<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Java面试总结】MySQL</title>
      <link href="/2020/09/11/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91MySQL/"/>
      <url>/2020/09/11/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="1-什么是MySQL？"><a href="#1-什么是MySQL？" class="headerlink" title="1. 什么是MySQL？"></a>1. 什么是MySQL？</h2><p>MySQL 是一种关系型数据库，其默认端口是 3306.</p><h2 id="2-字符集及校对规则"><a href="#2-字符集及校对规则" class="headerlink" title="2. 字符集及校对规则"></a>2. 字符集及校对规则</h2><p>字符集指的是一种从二进制编码到某类字符符号的映射。校对规则则是指某种字符集下的排序个规则。</p><p>MySQL中每一种字符集都会对应一系列的校对规则。</p><p>MySQL采用的是类似继承的方式指定字符集的默认值，每个数据库以及每张数据表都有自己的默认值，它们逐层继承。比如：某个库中所有表的默认字符集将是该数据库所指定的字符集（这些表在没有指定字符集的情况下，才会采用默认字符集）</p><h2 id="3-什么是事务？"><a href="#3-什么是事务？" class="headerlink" title="3. 什么是事务？"></a>3. 什么是事务？</h2><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。</p><blockquote><p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。</p></blockquote><h2 id="4-事务的四大特性："><a href="#4-事务的四大特性：" class="headerlink" title="4. 事务的四大特性："></a>4. 事务的四大特性：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200911094144.png" alt="image-20200911082037112"></p><ul><li><strong>原子性</strong>：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么全部失败；</li><li><strong>一致性</strong>：执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；</li><li><strong>隔离性</strong>：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库时独立的；</li><li><strong>持久性</strong>：一个事务被提交之后，它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ul><h2 id="5-并发事务带来哪些问题？"><a href="#5-并发事务带来哪些问题？" class="headerlink" title="5. 并发事务带来哪些问题？"></a>5. 并发事务带来哪些问题？</h2><p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能导致以下的问题：</p><ul><li><p><strong>脏读</strong>：当一个事务正在访问数据并对数据做出了修改，而这种修改还没有提交到数据库中，这么另外一个事务也访问到了这个数据，然后使用了这个数据。因为这个这个数据是还没有提交的数据，那么另一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。</p></li><li><p><strong>丢失修改</strong>：指在一个事务读取到一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也做出了修改。这样第一个事务的修改结果就被丢失，因此成为丢失修改。</p></li><li><p><strong>不可重复读</strong>：指一个事务内多次读取同一数据。在这个事务还没有结束时，另一个事务也访问不了这个数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此成为不可重复读。</p></li><li><p><strong>幻读</strong>：幻读与不可重复读类似。它发生在第一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时，在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以被称为幻读。</p></li></ul><blockquote><p><strong>不可重复读和幻读的区别：</strong></p><p>不可重复读的重点是修改比如多次读取一条记录发现其中的某些列的值被修改；幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了。</p></blockquote><h2 id="6-事务的隔离级别是什么？MySQL的默认隔离级别是什么？"><a href="#6-事务的隔离级别是什么？MySQL的默认隔离级别是什么？" class="headerlink" title="6. 事务的隔离级别是什么？MySQL的默认隔离级别是什么？"></a>6. 事务的隔离级别是什么？MySQL的默认隔离级别是什么？</h2><p><strong>SQL 标准定义了四个隔离级别：</strong></p><ul><li><strong>READ-UNCOMMITTED(读取未提交)：</strong>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li><strong>READ-COMMITTED(读取已提交)：</strong>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li><strong>REPEATABLE-READ(可重复读)：</strong>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li><strong>SERIALIZABLE(可串行化)：</strong>最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>READ-UNCOMMITTED(读取未提交)</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ-COMMITTED(读取已提交)</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE-READ(可重复读)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>SERIALIZABLE(可串行化)</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p><strong>MySQL InnoDB 存储引擎的默认支持的隔离级别是REPEATABLE-READ（可重读）</strong></p><h2 id="7-大表优化"><a href="#7-大表优化" class="headerlink" title="7. 大表优化"></a>7. 大表优化</h2><p>当 MySQL 单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：</p><h3 id="限定数据的范围："><a href="#限定数据的范围：" class="headerlink" title="限定数据的范围："></a><strong>限定数据的范围：</strong></h3><p>务必禁止不带任何限制数据范围条件的查询语句。比如当我们在查询订单历史的时候，我们可以控制在一个月的范围内。</p><h3 id="读-写分离"><a href="#读-写分离" class="headerlink" title="读/写分离"></a><strong>读/写分离</strong></h3><p>经典的数据库拆分方案，主库负责写，从库负责读</p><h3 id="垂直分区"><a href="#垂直分区" class="headerlink" title="垂直分区"></a><strong>垂直分区</strong></h3><p><strong>根据数据库里面数据表的相关性进行拆分</strong>。例如，用户表中既有用户的登录信息又有用户的基本信息，可以将用户表拆分成两个单独的表，甚至放到单独的库做分库。</p><p><strong>简单来说垂直拆分是指数据表列的拆分**</strong>，把一张列比较多的表拆分为多张表**。如下图所示</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200911094145.png" alt="image-20200911092531195"></p><ul><li><strong>垂直拆分的优点</strong>：可以使得列数据变小，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。</li><li><strong>垂直拆分的缺点</strong>：主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应用层进行Join来解决。此外，垂直分区会让事务变得更加复杂；</li></ul><h3 id="水平分区"><a href="#水平分区" class="headerlink" title="水平分区"></a>水平分区</h3><p><strong>保持数据表结构不变，通过某种策略存储数据分片。这样每一片数据分散到不同的表或者库中，达到了分布式的目的。水平拆分可以支撑非常大的数据量。</strong></p><p>水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200911094146.png" alt="image-20200911093519821"></p><p>水平拆分可以支持非常大的数据量。需要注意的一点是：分表仅仅是解决了单一表数据过大的问题，但由于表的数据还是在同一台机器上，其实对于提升MySQL并发能力没有什么意义，所以<strong>水平拆分最好分库</strong>。</p><h2 id="8-分库分表之后，id-主键如何处理？"><a href="#8-分库分表之后，id-主键如何处理？" class="headerlink" title="8. 分库分表之后，id 主键如何处理？"></a>8. 分库分表之后，id 主键如何处理？</h2><p>因为要是分成多个表之后，每个表都是从 1 开始累加的，这样是不对的，我们需要一个全局唯一的 id 来支持。</p><p>生成全局 id 有下面这几种方式：</p><ul><li><strong>UUID</strong>：不适合作为主键，因为太⻓了，并且无序不可读，查询效率低。比较适合用于生成唯一的名字的标示比如文件的名字。</li><li><strong>数据库自增 id</strong> : 两台数据库分别设置不同步⻓，生成不重复ID的策略来实现高可用。这种方式生成的 id 有序，但是需要独立部署数据库实例，成本高，还会有性能瓶颈。</li><li><strong>利用 redis 生成 id</strong> :性能比较好，灵活方便，不依赖于数据库。但是，引入了新的组件造成系统更加复杂，可用性降低，编码更加复杂，增加了系统成本。</li></ul><h2 id="9-推荐阅读："><a href="#9-推荐阅读：" class="headerlink" title="9. 推荐阅读："></a>9. 推荐阅读：</h2><ul><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485097&idx=1&sn=84c89da477b1338bdf3e9fcd65514ac1&chksm=cea24962f9d5c074d8d3ff1ab04ee8f0d6486e3d015cfd783503685986485c11738ccb542ba7&token=79317275&lang=zh_CN%23rd">一条SQL语句在MySQL中如何执行的</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485117&idx=1&sn=92361755b7c3de488b415ec4c5f46d73&chksm=cea24976f9d5c060babe50c3747616cce63df5d50947903a262704988143c2eeb4069ae45420&token=79317275&lang=zh_CN%23rd">MySQL高性能优化规范建议</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485185&idx=1&sn=66ef08b4ab6af5757792223a83fc0d45&chksm=cea248caf9d5c1dc72ec8a281ec16aa3ec3e8066dbb252e27362438a26c33fbe842b0e0adf47&token=79317275&lang=zh_CN%23rd">腾讯面试：一条SQL语句执行得很慢的原因有哪些？—不看后悔系列                </a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486461&idx=1&sn=60a22279196d084cc398936fe3b37772&chksm=cea24436f9d5cd20a4fa0e907590f3e700d7378b3f608d7b33bb52cfb96f503b7ccb65a1deed&token=1987003517&lang=zh_CN%23rd">后端程序员必备：书写高质量SQL的30条建议</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Java面试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【剑指Offer】替换空格</title>
      <link href="/2020/09/09/%E5%89%91%E6%8C%87Offer%2005-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>/2020/09/09/%E5%89%91%E6%8C%87Offer%2005-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。</p><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;We are happy.&quot;</span><br><span class="line">输出：&quot;We%20are%20happy.&quot;</span><br></pre></td></tr></table></figure><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>简单粗暴，直接用 <code>replaceAll()</code>，替换字符串中的空格为 %20</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> s.replaceAll(<span class="string">&quot; &quot;</span>,<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，显然这种已经有的方法不是面试官想要得到的答案，所以你得另寻方法，自己写个方法，如果写不出，那肯定给面试官不能留下一个好的印象。</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><ol><li>创建一个新的字符数组 StringBuilder()，名为 str;</li><li>遍历字符串中的每一个字符 <ul><li>当 st 为空格的时候，向 str 中加入 %20;</li><li>当 st 不为空格的时候，则加入st。</li></ul></li><li>将 str 以 String 类型返回</li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">for</span> (Character st : s.toCharArray()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (st == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">              str.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              str.append(st);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java面试总结】计算机网络</title>
      <link href="/2020/09/08/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/09/08/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="1-OSI-与-TCP-IP各层的结构与功能，都有哪些协议？"><a href="#1-OSI-与-TCP-IP各层的结构与功能，都有哪些协议？" class="headerlink" title="1. OSI 与 TCP/IP各层的结构与功能，都有哪些协议？"></a>1. OSI 与 TCP/IP各层的结构与功能，都有哪些协议？</h2><p>我们在学习的时候，一般采用折中的办法，也就是中和 OSI 与 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简介又能将概念阐述清楚。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200908204848.png" alt="image-20200907151339505"></p><h3 id="应用层："><a href="#应用层：" class="headerlink" title="应用层："></a>应用层：</h3><p>其的任务是 <strong>通过应用进程间的交互来完成特定网络应用</strong>。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如<strong>域名系统 DNS</strong>，支持万维网应用的 <strong>HTTP 协议</strong>，支持<strong>电子邮件的 SMTP协议</strong>等等，我们<strong>把应用层交互的数据单元称为报文</strong>。</p><p><strong>HTTP协议</strong></p><blockquote><p>超文本传输协议（HTTP，HyperText Transfer Protoco）是互联网上应用最为广泛的一种网络协议。所有的万维网（WWW）文件都必须遵守这个协议。设计HTTP最初的目的是为了提供一种发布和接收 HTML 页面的方法</p></blockquote><h3 id="运输层："><a href="#运输层：" class="headerlink" title="运输层："></a>运输层：</h3><p>其主要任务就是<strong>负责两台主机进程之间的通信提供通用的数据传输服务</strong>。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于同一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。</p><p><strong>运输层主要有以下两种协议：</strong></p><ol><li><strong>传输控制协议 TCP</strong>（Transmission Control Protocol）：提供<strong>面向链接的、可靠</strong>的数据传输服务。</li><li><strong>用户数据协议 UDP</strong>（User Datagram Protocol）：：提供<strong>无连接的</strong>。尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）</li></ol><p>TCP 与 UDP 对比 见下面问题三。</p><h3 id="网络层："><a href="#网络层：" class="headerlink" title="网络层："></a>网络层：</h3><p>在 <strong>计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是 选择合适的网间路由和交换节点</strong>，<strong>确保数据及时传送</strong>。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 <strong>IP协议</strong>，因此分组也叫<strong>IP数据报</strong>，也叫 <strong>数据报</strong>。</p><blockquote><p>注意：不要把运输层的“用户数据报 UDP”和网络层的“IP 数据报”弄混。另外，无论哪层的数据单元，都可笼统的用“分组”来表示。</p><p>这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称。</p></blockquote><p>互联网是由大量的异构（heterogeneous）网络通过路由（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Intert Protocol）和许多路由选择协议，因此互联网的网络层也叫做<strong>网际层</strong>或<strong>IP层</strong>。</p><h3 id="数据链路层："><a href="#数据链路层：" class="headerlink" title="数据链路层："></a>数据链路层：</h3><p><strong>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专⻔的链路层的协议</strong>。在两个相邻节点之间传送数据时，<strong>数据链路层将网络层交下来的 IP 数据报组装成帧</strong>，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。</p><p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有误差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。</p><h3 id="物理层："><a href="#物理层：" class="headerlink" title="物理层："></a>物理层：</h3><p>在物理层上所传送的数据单位是比特。<strong>物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。</strong>使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不⻅的。</p><p>在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>图片来源：<a href="https://blog.csdn.net/yaopeng_2005/article/details/7064869">https://blog.csdn.net/yaopeng_2005/article/details/7064869</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200907200023.gif" alt="0_1325744597WM32"></p><h2 id="2-三次握手-和-四次挥手（面试高频）"><a href="#2-三次握手-和-四次挥手（面试高频）" class="headerlink" title="2. 三次握手 和 四次挥手（面试高频）"></a>2. 三次握手 和 四次挥手（面试高频）</h2><p>目的：为了准确无误地把数据送达到目标处，TCP协议采用了三次握手策略</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200908204849.png" alt="image-20200907201309984"></p><p>如图，两个机器人通过3次握手确定了对方能正确接收和发送消息(图片来源：《图解HTTP》)</p><p>简图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200908204850.png" alt="image-20200907201932842"></p><ul><li>客户端 — 发送带有 SUN 标志的数据包 — 一次握手 - 服务端</li><li>服务端 — 发送带有 SYN/ACK 标志的数据包 — 二次握手 - 客户端</li><li>客户端 — 发送带有 ACK 标志的数据包 —- 三次握手 - 服务端</li></ul><h3 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h3><p><strong>三次握手的目的是建立可靠的通信信道。说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收都是正常的。</strong></p><blockquote><p>第一次握手：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常</p><p>第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：对方发送正常，自己接收正常</p><p>第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送、接收正常所以三次握手就能确认双发收发功能都正常，缺一不可。</p></blockquote><h3 id="为什么要传回-SYN"><a href="#为什么要传回-SYN" class="headerlink" title="为什么要传回 SYN"></a>为什么要传回 SYN</h3><p>接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号。</p><blockquote><p>SYN 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。 ]）消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。</p></blockquote><h3 id="传了-SYN，为啥还要传-ACK"><a href="#传了-SYN，为啥还要传-ACK" class="headerlink" title="传了 SYN，为啥还要传 ACK"></a>传了 SYN，为啥还要传 ACK</h3><p>双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道都没问题，但是接收方到发送方的通道还需要 ACK 来进行验证。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200908204851.png" alt="image-20200907202924109"></p><p>断开一个 TCP 连接则需要“<strong>四次挥手</strong>”：</p><ul><li>客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送</li><li>服务器-收到这个 FIN，它发回一个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个FIN 将占用一个序号</li><li>服务器-关闭与客户端的连接，发送一个FIN给客户端</li><li>客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1</li></ul><h3 id="为什么要四次挥手？"><a href="#为什么要四次挥手？" class="headerlink" title="为什么要四次挥手？"></a>为什么要四次挥手？</h3><p>任何一方都可以在数据传送结束后发送连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。</p><p>举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后B 说“我说完了”，A 回答“知道了”，这样通话才算结束。</p><p>推荐阅读：<a href="https://blog.csdn.net/qzcsu/article/details/72861891">两张动图-彻底明白TCP的三次握手与四次挥手</a></p><h2 id="3-TCP-UDP-协议的区别"><a href="#3-TCP-UDP-协议的区别" class="headerlink" title="3. TCP,UDP 协议的区别"></a>3. TCP,UDP 协议的区别</h2><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接性</td><td>面向连接</td><td>面向非连接</td></tr><tr><td>传输可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>报文</td><td>面向字节流</td><td>面向报文</td></tr><tr><td>效率</td><td>传输效率低</td><td>传输效率高</td></tr><tr><td>流量控制</td><td>滑动窗口</td><td>无</td></tr><tr><td>拥塞控制</td><td>慢开始、拥塞避免、快重传、快恢复</td><td>无</td></tr><tr><td>传输速度</td><td>慢</td><td>快</td></tr><tr><td>应用场合</td><td>对效率要求低，对准确性要求高或要求有连接的场景</td><td>对效率要求高，对准确性要求低</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200908204852.png" alt="image-20200908143417618"></p><p><strong>UDP</strong>：在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 <strong>UDP 不提供可靠交付</strong>，但在某些情况下 UDP 确是一种最有效的工作方式（<strong>一般用于即时通信</strong>），比如 QQ语音、QQ视频等。</p><p><strong>TCP</strong>：提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束之后要释放连接。 TCP 不提供广播或多播服务。由于 <strong>TCP 要提供可靠的、面向连接的传输服务</strong>（TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这一操作难免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。<strong>TCP 一般用于文件传输、发送和接收邮件、远程登录等场景</strong>。</p><h2 id="4-TCP-协议如何证可靠传输"><a href="#4-TCP-协议如何证可靠传输" class="headerlink" title="4. TCP 协议如何证可靠传输"></a>4. TCP 协议如何证可靠传输</h2><ol><li>应用数据被分割成 TCP 认为最适合发送的数据块；</li><li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层；</li><li><strong>校验和</strong>：TCP 将保持它首部和数据的校验和。这是一个端到端的校验和，目的是检测数据在传输过程中的变化。如果收到段的校验和有差错，TCP 将会丢弃这个报文段和不确认收到此报文段；</li><li>TCP 的接收端会丢弃收到的重复数据；</li><li><strong>流量控制</strong>： TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。（TCP 利用滑动窗口实现流量控制）</li><li><strong>拥塞控制</strong>：当网络拥塞时，减少数据的发送；</li><li><strong>ARQ 协议</strong>：也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认，在收到确认后再发送下一个分组；</li><li><strong>超时重传</strong>：当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</li></ol><h2 id="5-ARQ-协议"><a href="#5-ARQ-协议" class="headerlink" title="5. ARQ 协议"></a>5. ARQ 协议</h2><p><strong>自动重传请求</strong>（Automatic Repeat-reQuest，ARQ）是OSI模型中数据链路层和传输层的错误纠正协议之一。它通过确认和超时这两个机制，在不可靠服务的基础上实现可靠的信息传输。如果发送方在发送后一段时间内没有收到确认帧，它通常会重新发送。ARQ包括停止等待ARQ协议和连续ARQ协议。</p><h3 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h3><ul><li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认（回复ACK）。如果过了一段时间（超时时间后），还是没有收到ACK确认，说明没有发送成功，需要重新发送，知道收到确认再发送下一个分组；</li><li>在停止等待协议中，若收到对方重复分组，就丢弃该分组，但同时还要发送确认。</li></ul><p><strong>优点</strong>：简单</p><p><strong>缺点</strong>：信道利用率低，等待时间长</p><p>①、<strong>无差错情况：</strong></p><p>发送方发送分组，接收方在规定时间内收到，并且回复确认，发送方再次发送；</p><p>②、<strong>出现差错情况：（超时重传）</strong></p><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更⻓一些。这种自动重传方式常称为<strong>自动重传请求 ARQ</strong>。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。<strong>连续 ARQ 协议</strong>可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</p><p>③、<strong>确认丢失和确认迟到</strong></p><ul><li><strong>确认丢失：</strong>确认消息在传输过程中丢失。当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：1. 丢弃这个重复的M1消息，不向上层交付。 2. 向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。</li><li><strong>确认迟到：</strong>确认消息在传输过程中迟到。A发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：1. A收到重复的确认后，直接丢弃。2. B收到重复的M1后，也直接丢弃重复的M1。</li></ul><h3 id="连续ARQ-协议"><a href="#连续ARQ-协议" class="headerlink" title="连续ARQ 协议"></a>连续ARQ 协议</h3><p>连续ARQ协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明这个分组为止的所有分组都已经正确收到了。</p><p><strong>优点</strong>：信道利用率高，容易实现，即使确认丢失，也不必重传</p><p><strong>缺点</strong>：不能向发送方反映出接收方已经正确收到的所有分组的信息。比如：发送方发送了 5条消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的N 个消息。</p><h2 id="6-滑动窗口和流量控制"><a href="#6-滑动窗口和流量控制" class="headerlink" title="6. 滑动窗口和流量控制"></a>6. 滑动窗口和流量控制</h2><p><strong>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方速率，保证接收方来得及接收</strong>。接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为0，则发送方不能发送数据。</p><h2 id="7-拥塞控制"><a href="#7-拥塞控制" class="headerlink" title="7. 拥塞控制"></a>7. 拥塞控制</h2><p>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p><p>为了进行拥塞控制，TCP 发送方要维持一个 <strong>拥塞窗口</strong> 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接收窗口中较小的一个。</p><p>TCP 的拥塞控制采用了四种算法：<strong>慢开始、拥塞避免、快重传和快恢复</strong>。</p><blockquote><ul><li><strong>慢开始</strong>：慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。</li><li><strong>拥塞避免</strong>：拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.</li><li><strong>快重传与快恢复</strong>：在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了FRR，就不会因为重传时要求的暂停被耽误。 当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</li></ul></blockquote><h2 id="8-在浏览器中输入-url-地址-gt-gt-显示主页的过程（面试高频）"><a href="#8-在浏览器中输入-url-地址-gt-gt-显示主页的过程（面试高频）" class="headerlink" title="8. 在浏览器中输入 url 地址 -&gt;&gt; 显示主页的过程（面试高频）"></a>8. 在浏览器中输入 url 地址 -&gt;&gt; 显示主页的过程（面试高频）</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200908204853.png" alt="image-20200908195147847"></p><p>总体分为以下几个过程：</p><ol><li>DNS 解析；</li><li>TCP 连接；</li><li>发送 HTTP 请求；</li><li>服务器处理请求并返回 HTTP 报文；</li><li>浏览器解析并渲染页面；</li><li>连接结束。</li></ol><p>推荐阅读：<a href="https://segmentfault.com/a/1190000006879700">前端经典面试题:从输入URL到页面加载发生了什么?</a></p><h2 id="9-状态码"><a href="#9-状态码" class="headerlink" title="9. 状态码"></a>9. 状态码</h2><table><thead><tr><th></th><th>类别</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td>Informational（信息性状态码）</td><td>接受的请求正在处理</td></tr><tr><td>2 XX</td><td>Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td>3 XX</td><td>Redirection（重定向状态码）</td><td>需要进行附加操作以完成请求</td></tr><tr><td>4 XX</td><td>Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td>5 XX</td><td>Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><h2 id="10-各种协议与HTTP协议之间的关系"><a href="#10-各种协议与HTTP协议之间的关系" class="headerlink" title="10. 各种协议与HTTP协议之间的关系"></a>10. 各种协议与HTTP协议之间的关系</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200908200521.png" alt="670882-20190218113529176-278963322"></p><h2 id="11-HTTP-长连接，短连接"><a href="#11-HTTP-长连接，短连接" class="headerlink" title="11. HTTP 长连接，短连接"></a>11. HTTP 长连接，短连接</h2><p>在 <strong>HTTP/1.0 中默认使用短连接</strong>。也就是说，客户端和服务器每进行一次HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web⻚中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。</p><p>从 <strong>HTTP/1.1 开始默认使用长连接</strong>，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><p>在使用⻓连接的情况下，当一个网⻚打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现⻓连接需要客户端和服务端都支持⻓连接。</p><p><strong>HTTP协议的⻓连接和短连接，实质上是TCP协议的⻓连接和短连接。</strong></p><p>推荐阅读：<a href="https://www.cnblogs.com/gotodsp/p/6366163.html">HTTP协议的⻓连接和短连接到底是什么？</a></p><h2 id="12-HTTP是不保存状态的协议-如何保存用户状态"><a href="#12-HTTP是不保存状态的协议-如何保存用户状态" class="headerlink" title="12. HTTP是不保存状态的协议,如何保存用户状态?"></a>12. HTTP是不保存状态的协议,如何保存用户状态?</h2><p>HTTP 是一种不保存状态，即无状态（stateless）协议。也就是说 HTTP 协议自身不对请求和响应之间的通信状态进行保存。那么我们保存用户状态呢？Session 机制的存在就是为了解决这个问题，<strong>Session 的主要作用就是通过服务端记录用户的状态</strong>。典型的场景是购物⻋，当你要添加商品到购物⻋的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的Session 之后就可以标识这个用户并且跟踪这个用户了（一般情况下，服务器会在一定时间内保存这个Session，过了时间限制，就会销毁这个Session）。</p><p>在服务端保存 Session 的方法很多，最常用的就是内存和数据库(比如是使用内存数据库redis保存)。既然 Session 存放在服务器端，那么我们如何实现 Session 跟踪呢？大部分情况下，我们都是<strong>通过在Cookie 中附加一个 Session ID 来方式来跟踪</strong>。</p><blockquote><p><strong>Cookie 被禁用怎么办?</strong></p><p>最常用的就是利用 URL 重写把 Session ID 直接附加在URL路径的后面。</p></blockquote><h2 id="13-Cookie的作用是什么？和Session有什么区别？"><a href="#13-Cookie的作用是什么？和Session有什么区别？" class="headerlink" title="13. Cookie的作用是什么？和Session有什么区别？"></a>13. Cookie的作用是什么？和Session有什么区别？</h2><p>Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但是两者的应用场景不太一样。</p><p><strong>Cookie 一般用来保存用户信息</strong>比如①我们在 Cookie 中保存已经登录过得用户信息，下次访问网站的时候⻚面可以自动帮你登录的一些基本信息给填了；②一般的网站都会有保持登录也就是说下次你再访问网站的时候就不需要重新登录了，这是因为用户登录的时候我们可以存放了一个 Token 在 Cookie中，下次登录的时候只需要根据 Token 值来查找用户即可(为了安全考虑，重新登录一般要将 Token重写)；③登录一次网站后访问网站其他⻚面不需要重新登录。</p><p><strong>Session 的主要作用就是通过服务端记录用户的状态</strong>。典型的场景是购物⻋，当你要添加商品到购物⻋的时候，系统不知道是哪个用户操作的，因为 HTTP 协议是无状态的。服务端给特定的用户创建特定的 Session 之后就可以标识这个用户并且跟踪这个用户了。</p><p>Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p><p>Cookie 存储在客户端中，而Session存储在服务器上，相对来说 Session 安全性更高。如果要在Cookie 中存储一些敏感信息，不要直接写入 Cookie 中，最好能将 Cookie 信息加密然后使用到的时候再去服务器端解密。</p><h2 id="14-URI-和-URL-的区别是什么？"><a href="#14-URI-和-URL-的区别是什么？" class="headerlink" title="14. URI 和 URL 的区别是什么？"></a>14. URI 和 URL 的区别是什么？</h2><ul><li><strong>URI</strong>（Uniform Resource Identifie）：<strong>是统一资源标识符，可以唯一标识一个资源</strong>；</li><li><strong>URL</strong>（(Uniform Resource Location）：<strong>是统一资源定位符，可以提供该资源的路径</strong>。它<strong>是一种具体的URI</strong>，即 URL 可以用来标识一个资源，而且还指明了如何 locate 这个资源。</li></ul><blockquote><p>URI 的作用像身份证号一样，URL 的作用更像家庭住址一样。URL是一种更具体的URI，它不仅唯一标识资源，而且还提供了定位该资源的信息。</p></blockquote><h2 id="15-HTTP-和-HTTPS-的区别？"><a href="#15-HTTP-和-HTTPS-的区别？" class="headerlink" title="15. HTTP 和 HTTPS 的区别？"></a>15. HTTP 和 HTTPS 的区别？</h2><ol><li><strong>端口</strong>：HTTP的URL由“http://”起始且默认使用端口80，而HTTPS的URL由“https://”起始且默认使用端口443。</li><li><strong>安全性和资源消耗</strong>： HTTP协议运行在TCP之上，所有传输的内容都是明文，客户端和服务器端都无法验证对方的身份。HTTPS是运行在SSL/TLS之上的HTTP协议，SSL/TLS 运行在TCP之上。所有传输的内容都经过加密，加密采用对称加密，但对称加密的密钥用服务器方的证书进行了非对称加密。所以说，<strong>HTTP 安全性没有 HTTPS高，但是 HTTPS 比HTTP耗费更多服务器资源</strong>。<ul><li>对称加密：密钥只有一个，加密解密为同一个密码，且加解密速度快，典型的对称加密算法有DES、AES等；</li><li>非对称加密：密钥成对出现（且根据公钥无法推知私钥，根据私钥也无法推知公钥），加密解密使用不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的非对称加密算法有RSA、DSA等。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java面试总结】多线程</title>
      <link href="/2020/09/06/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/09/06/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="1-什么是线程和进程？"><a href="#1-什么是线程和进程？" class="headerlink" title="1. 什么是线程和进程？"></a>1. 什么是线程和进程？</h2><h3 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h3><p>进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个即是一个进程从创建、运行到消亡的过程。</p><p>在Java中，当我们启动 main 函数时，其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。</p><p>如下图所示，在 windows 中通过查看任务管理器的方式，我们就可以清楚看到 window 当前运行的进程（.exe 文件的运行）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200906214433.png" alt="image-20200905093743470"></p><h3 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h3><p>线程比进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源，但每个线程有自己的<strong>程序计数器、虚拟机栈</strong>和<strong>本地方法栈</strong>，所以系统在产生一个线程，或是在各个线程之间切换工作时，负担要比进程小的多，也正因如此，线程也被称作轻量级进程。</p><p>Java 天生就是多线程程序，我们可以通过 JMX 来看一下一个普通的 Java 程序有哪些线程。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> multiThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadInfo;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadMXBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/9/5 10:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 Java 线程管理 MXBean</span></span><br><span class="line">        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();</span><br><span class="line">        <span class="comment">// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息</span></span><br><span class="line">        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(<span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 遍历线程信息，仅打印线程ID 和 线程名称信息</span></span><br><span class="line">        <span class="keyword">for</span> (ThreadInfo threadInfo : threadInfos) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[&quot;</span>+threadInfo.getThreadId() +<span class="string">&quot;] &quot;</span>+threadInfo.getThreadName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：（输出内容可能不同，不用太纠结下面每个线程的作用，只用知道 main 线程执行main 方法即可）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[6] Monitor Ctrl-Break</span><br><span class="line">[5] Attach Listener  &#x2F;&#x2F;添加事件</span><br><span class="line">[4] Signal Dispatcher     &#x2F;&#x2F; 分发处理给 JVM 信号的线程</span><br><span class="line">[3] Finalizer    &#x2F;&#x2F;调用对象 finalize 方法的线程</span><br><span class="line">[2] Reference Handler     &#x2F;&#x2F;清除 reference 线程</span><br><span class="line">[1] main    &#x2F;&#x2F;main 线程,程序入口</span><br></pre></td></tr></table></figure><p>综上可以看出<strong>：一个 <code>Java</code> 程序的运行是 <code>main</code> 线程和多个其他线程同时运行。</strong></p><h2 id="2-请简要描述线程与进程的关系，区别以及优缺点"><a href="#2-请简要描述线程与进程的关系，区别以及优缺点" class="headerlink" title="2. 请简要描述线程与进程的关系，区别以及优缺点"></a>2. 请简要描述线程与进程的关系，区别以及优缺点</h2><p>从 JVM 角度说进程和线程之间的关系</p><p>详细内容请阅读：<a href="https://github.com/Snailclimb/JavaGuide/blob/3965c02cc0f294b0bd3580df4868d5e396959e2e/Java%E7%9B%B8%E5%85%B3/%E5%8F%AF%E8%83%BD%E6%98%AF%E6%8A%8AJava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AE%B2%E7%9A%84%E6%9C%80%E6%B8%85%E6%A5%9A%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.md">Java相关/可能是把Java内存区域讲的最清楚的一篇文章</a></p><h3 id="图解进程和线程的关系"><a href="#图解进程和线程的关系" class="headerlink" title="图解进程和线程的关系"></a>图解进程和线程的关系</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200906214434.png" alt="image-20200905111614452"></p><p>从上图可以看出：一个进程可以有多个线程，多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>（JDK 1.8 之后的元空间）资源，但是每个线程有 自己的<strong>程序计数器</strong>、<strong>虚拟机栈</strong> 和 <strong>本地方法栈</strong>。</p><p><strong>总结</strong>：线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正好相反。</p><blockquote><p>扩展内容：</p><p>思考：为什么程序计数器、虚拟机栈和本地方法栈是线程私有的呢？为什么堆和方法区是线程共享的呢？</p></blockquote><h3 id="程序计数器为什么是私有的？"><a href="#程序计数器为什么是私有的？" class="headerlink" title="程序计数器为什么是私有的？"></a>程序计数器为什么是私有的？</h3><p>程序计数器主要有两个作用：</p><ol><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够 知道该线程上次运行到哪了。</li></ol><p>需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。</p><p>所以，程序计数器私有主要是为了：<strong>线程切换后能够恢复到正确的执行位置</strong>。</p><h3 id="虚拟机栈和本地方法栈为什么是私有的？"><a href="#虚拟机栈和本地方法栈为什么是私有的？" class="headerlink" title="虚拟机栈和本地方法栈为什么是私有的？"></a>虚拟机栈和本地方法栈为什么是私有的？</h3><ul><li><strong>虚拟机栈</strong>：每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。</li><li><strong>本地方法栈</strong>：和虚拟机栈所发挥的作用非常相似，区别是：虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则为了虚拟机栈使用到的 Native 方法服务。在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</li></ul><p>所以，<strong>为了保证线程中的局部变量不被别的线程访问到</strong>，虚拟机栈和本地方法栈是线程私有的。</p><h3 id="一句话简单了解堆和方法区"><a href="#一句话简单了解堆和方法区" class="headerlink" title="一句话简单了解堆和方法区"></a>一句话简单了解堆和方法区</h3><p>堆和方法区都是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象（所有对象都在这里分配内存），方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><h2 id="3-说说并发和并行的区别"><a href="#3-说说并发和并行的区别" class="headerlink" title="3. 说说并发和并行的区别"></a>3. 说说并发和并行的区别</h2><ul><li><strong>并发</strong>：同一时间段，多个任务都在执行（单位时间内不一定同时执行）</li><li><strong>并行</strong>：单位时间内，多个任务同时执行</li></ul><h2 id="4-为什么要使用多线程呢？"><a href="#4-为什么要使用多线程呢？" class="headerlink" title="4. 为什么要使用多线程呢？"></a>4. 为什么要使用多线程呢？</h2><p>先从总体上来说：</p><ul><li><strong>从计算机底层来说</strong>：线程可以比作是轻量级的进程，是程序执行的最小单位,线程间的切换和调度的成本远远小于进程。另外，多核 CPU 时代意味着多个线程可以同时运行，这减少了线程上下文切换的开销。</li><li><strong>从当代互联网发展趋势来说</strong>：现在的系统动不动就要求百万级甚至千万级的并发量，而多线程并发编程正是开发高并发系统的基础，利用好多线程机制可以大大提高系统整体的并发能力以及性能</li></ul><p>再深入到计算机底层来探讨：</p><ul><li><strong>单核时代</strong>：在单核时代多线程主要是为了提高 CPU 和 IO 设备的综合利用率。举个例子：当只有一个线程的时候会导致 CPU 计算时，IO 设备空闲；进行 IO 操作时，CPU 空闲。我们可以简单地说这两者的利用率目前都是 50%左右。但是当有两个线程的时候就不一样了，当一个线程执行 CPU 计算时，另外一个线程可以进行 IO 操作，这样两个的利用率就可以在理想情况下达到100%了。</li><li><strong>多核时代</strong>:多核时代多线程主要是为了提高 CPU 利用率。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，CPU 只会一个 CPU 核心被利用到，而创建多个线程就可以让多个 CPU 核心被利用到，这样就提高了 CPU 的利用率。</li></ul><h2 id="5-使用多线程可能带来什么问题？"><a href="#5-使用多线程可能带来什么问题？" class="headerlink" title="5. 使用多线程可能带来什么问题？"></a>5. 使用多线程可能带来什么问题？</h2><p>并发编程的目的就是为了能提高程序的执行效率提高程序运行速度，但是并发编程并不总是能提高程序运行速度的，而且并发编程可能会遇到很多问题，比如：内存泄漏、上下文切换、死锁还有受限于硬件和软件的资源闲置问题。</p><h2 id="6-说说线程的生命周期和状态"><a href="#6-说说线程的生命周期和状态" class="headerlink" title="6. 说说线程的生命周期和状态?"></a>6. 说说线程的生命周期和状态?</h2><p>点击跳转【Java面试】Java基础(下篇)/#30-线程有哪些基本状态？<a href="https://www.silentcow.cn/2020/08/30/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91Java%E5%9F%BA%E7%A1%80(%E4%B8%8B%E7%AF%87)/#30-%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%8A%B6%E6%80%81%EF%BC%9F">线程有哪些基本状态</a></p><h2 id="7-什么是上下文切换？"><a href="#7-什么是上下文切换？" class="headerlink" title="7. 什么是上下文切换？"></a>7. 什么是上下文切换？</h2><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p><p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。<strong>任务从保存到再加载的过程就是一次上下文切换</strong>。</p><p>上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。</p><p>Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。</p><h2 id="8-什么是线程死锁？如何避免死锁？"><a href="#8-什么是线程死锁？如何避免死锁？" class="headerlink" title="8. 什么是线程死锁？如何避免死锁？"></a>8. 什么是线程死锁？如何避免死锁？</h2><h3 id="认识线程死锁"><a href="#认识线程死锁" class="headerlink" title="认识线程死锁"></a>认识线程死锁</h3><p>线程死锁描述的是：多个线程同时被阻塞，它们中的一个或全部都在等待某个资源被释放。由于线程被无期限的阻塞，因此程序不可能正常终止。</p><p>如下图所示，线程 A 持有资源 2，线程 B 持有资源 1，他们同时都想申请对方的资源，所以这两个线程就会互相等待而进入死锁状态。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200906214435.png" alt="image-20200906145736973"></p><p>下面通过一个例子来说明线程死锁,代码模拟了上图的死锁的情况 (代码来源于《并发编程之美》)：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> deadLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/9/6 14:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object resource1 = <span class="keyword">new</span> Object();<span class="comment">// 资源1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object resource2 = <span class="keyword">new</span> Object();<span class="comment">// 资源2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread[线程 1,5,main]get resource1</span><br><span class="line">Thread[线程 2,5,main]get resource2</span><br><span class="line">Thread[线程 2,5,main]waiting get resource1</span><br><span class="line">Thread[线程 1,5,main]waiting get resource2</span><br></pre></td></tr></table></figure><p>线程 A 通过 <code>synchronized (resource1) </code>获得<code> resource1</code> 的监视器锁，然后通过<code>Thread.sleep(1000)</code>;让线程 A 休眠 <code>1s </code>为的是让线程 B 得到执行然后获取到 <code>resource2</code> 的监视器锁。线程 A 和线程 B 休眠结束了都开始企图请求获取对方的资源，然后这两个线程就会陷入互相等待的状态，这也就产生了死锁。上面的例子符合产生死锁的四个必要条件。</p><blockquote><p><strong>产生死锁必须具备的条件：</strong></p><ol><li>互斥条件：该资源任意一个时刻只由一个线程占用；</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放；</li><li>不剥夺条件：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕之后才能释放资源；</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ol></blockquote><h3 id="如何避免线程死锁？"><a href="#如何避免线程死锁？" class="headerlink" title="如何避免线程死锁？"></a>如何避免线程死锁？</h3><p>上面说了产生死锁的必备条件，那么为了避免死锁，只需破坏其中的一个条件即可：</p><ol><li><strong>破坏互斥条件</strong>：这个条件我们没有办法破坏，因为我们的锁本来就是想让他们互斥的（临界资源需要互斥访问）；</li><li><strong>破坏请求与保持条件</strong>：一次性申请所有的资源；</li><li><strong>破坏不剥夺条件</strong>：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放资源占有的资源；</li><li><strong>破坏循环等待条件</strong>：靠按序申请资源来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol><p>线程 2 的代码修改成下面这样就不会产生死锁了</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource2&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;线程 2&quot;</span>).start();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread[线程 1,5,main]get resource1</span><br><span class="line">Thread[线程 1,5,main]waiting get resource2</span><br><span class="line">Thread[线程 1,5,main]get resource2</span><br><span class="line">Thread[线程 2,5,main]get resource1</span><br><span class="line">Thread[线程 2,5,main]waiting get resource2</span><br><span class="line">Thread[线程 2,5,main]get resource2</span><br></pre></td></tr></table></figure><p><strong>分析上面的代码为什么避免了死锁？</strong></p><p>线程 1 首先获得到<code> resource1</code> 的监视器锁,这时候线程 2 就获取不到了。然后线程 1 再去获取<code>resource2</code> 的监视器锁，可以获取到。然后线程 1 释放了对<code> resource1</code>、<code>resource2</code> 的监视器锁的占用，线程 2 获取到就可以执行了。这样就破坏了破坏循环等待条件，因此避免了死锁。</p><h2 id="9-说说-sleep-方法和-wait-方法区别和共同点"><a href="#9-说说-sleep-方法和-wait-方法区别和共同点" class="headerlink" title="9. 说说 sleep() 方法和 wait() 方法区别和共同点"></a>9. 说说 sleep() 方法和 wait() 方法区别和共同点</h2><ul><li>两者最主要的区别在于：<code>sleep</code> 方法没有释放锁，而 <code>wait</code> 方法释放了锁</li><li>两者都可以暂停线程的执行</li><li><code>wait</code> 通常被用于线程间交互/通信，<code>sleep</code> 通常被用于暂停执行</li><li><code>wait() </code>方法被调用后，线程不会自动苏醒，需要别的线程调用同一个对象上的 <code>notify()</code> 或者<code>notifyAll()</code> 方法。<code>sleep() </code>方法执行完成后，线程会自动苏醒。或者可以使用<code> wait(long timeout)</code>超时后线程会自动苏醒</li></ul><h2 id="10-为什么我们调用-start-方法时会执行-run-方法，为什么我们不能直接调用run-方法？"><a href="#10-为什么我们调用-start-方法时会执行-run-方法，为什么我们不能直接调用run-方法？" class="headerlink" title="10. 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用run() 方法？"></a>10. 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用run() 方法？</h2><p><code>new</code> 一个 <code>Thread</code> ，线程进入了新建状态；调用 <code>start()</code> 方法，会启动一个线程并使线程进入就绪状态，当分配到时间片后就可以运行了。<code>start()</code> 会执行线程 的响应准备工作，然后自动执行<code>run()</code>方法的内容，这是真正的多线程工作。而直接执行 <code>run() </code>方法，会把<code>run()</code>方法当成一个 <code>main </code>线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。</p><p><strong>总结： 调用 start 方法可启动线程并使线程进入就绪状态；而 run 方法只是 Thread 的一个普通方法，还是在主线程里执行。</strong></p><h2 id="11-synchronized-关键字"><a href="#11-synchronized-关键字" class="headerlink" title="11. synchronized 关键字"></a>11. synchronized 关键字</h2><h3 id="1-说一说自己对于-synchronized-关键字的了解"><a href="#1-说一说自己对于-synchronized-关键字的了解" class="headerlink" title="1.说一说自己对于 synchronized 关键字的了解"></a>1.说一说自己对于 synchronized 关键字的了解</h3><p>synchronized关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。</p><p>另外，在 Java 早期版本中，synchronized属于重量级锁，效率低下，因为监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，Java 的线程是映射到操作系统的原生线程之上的。如果要挂起或者唤醒一个线程，都需要操作系统帮忙完成，而操作系统实现线程之间的切换时需要从用户态转换到内核态，这个状态之间的转换需要相对比较⻓的时间，时间成本相对较高，这也是为什么早期的 synchronized 效率低的原因。庆幸的是在 Java 6 之后 Java 官方对从 JVM 层面对synchronized较大优化，所以现在的 synchronized 锁效率也优化得很不错了。JDK1.6对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销。</p><h3 id="2-说说自己是怎么使用-synchronized-关键字，在项目中用到了吗"><a href="#2-说说自己是怎么使用-synchronized-关键字，在项目中用到了吗" class="headerlink" title="2. 说说自己是怎么使用 synchronized 关键字，在项目中用到了吗"></a>2. 说说自己是怎么使用 synchronized 关键字，在项目中用到了吗</h3><p>暂无，后期写</p><h3 id="3-synchronized-关键字最主要的三种使用方式"><a href="#3-synchronized-关键字最主要的三种使用方式" class="headerlink" title="3. synchronized 关键字最主要的三种使用方式"></a>3. synchronized 关键字最主要的三种使用方式</h3><ul><li><strong>修饰实例方法</strong>：作用于当前对象实例加锁，进入同步代码前要获得当前对象实例的锁</li><li><strong>修饰静态方法</strong>：也就是给当前类加锁，会作用于类的所有对象实例，因为静态成员不属于任何一个实例对象，是类成员（static 表明这是该类的一个静态资源，不管new 了多少个对象，只有一份）。所以如果一个线程A调用一个实例对象的非静态 synchronized 方法，而线程B需要调用这个实例对象所属类的静态 synchronized 方法，是允许的，不会发生互斥现象，<strong>因为访问静态synchronized 方法占用的锁是当前类的锁，而访问非静态 synchronized 方法占用的锁是当前实例对象锁</strong>。</li><li><strong>修饰代码块</strong>：指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</li></ul><p><strong>总结</strong>：<code>synchronized</code>关键字加到 <code>static </code>静态方法和<code> synchronized(class)</code>代码块上都是是给<code> Class</code>类上锁。<code>synchronized </code>关键字加到实例方法上是给对象实例上锁。尽量不要使用<code>synchronized(String a) </code>因为<code>JVM</code>中，字符串常量池具有缓存功能！</p><h3 id="4-讲一下-synchronized-关键字的底层原理"><a href="#4-讲一下-synchronized-关键字的底层原理" class="headerlink" title="4. 讲一下 synchronized 关键字的底层原理"></a>4. 讲一下 synchronized 关键字的底层原理</h3><p>暂 略</p><h3 id="5-说说-JDK1-6-之后的synchronized-关键字底层做了哪些优化，可以详细介绍一下这些优化吗"><a href="#5-说说-JDK1-6-之后的synchronized-关键字底层做了哪些优化，可以详细介绍一下这些优化吗" class="headerlink" title="5. 说说 JDK1.6 之后的synchronized 关键字底层做了哪些优化，可以详细介绍一下这些优化吗"></a>5. 说说 JDK1.6 之后的synchronized 关键字底层做了哪些优化，可以详细介绍一下这些优化吗</h3><p>JDK1.6 对锁的实现引入了大量的优化，如偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁操作的开销。</p><p>锁主要存在四种状态，依次是：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态，他们会随着竞争的激烈而逐渐升级。注意锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率。</p><p><a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/Multithread/synchronized.md">详细请点击阅读</a></p><h3 id="6-谈谈-synchronized和ReentrantLock-的区别"><a href="#6-谈谈-synchronized和ReentrantLock-的区别" class="headerlink" title="6. 谈谈 synchronized和ReentrantLock 的区别"></a>6. 谈谈 synchronized和ReentrantLock 的区别</h3><p>①、两者都是可重入锁</p><p>“可重入锁”概念是：自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想要获取这个对象的锁的时候还是可以获取的，如果不可锁重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增1，所以要等到锁的计数器下降为0时才能释放锁。</p><p>②、synchronized 依赖于 JVM ，而 ReentrantLock 依赖于 API</p><p><code>synchronized </code>是依赖于<code> JVM</code> 实现的，前面我们也讲到了虚拟机团队在<code> JDK1.6</code> 为 <code>synchronized </code>关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。<code>ReentrantLock</code> 是<code>JDK</code>层面实现的（也就是<code> API</code> 层面，需要<code>lock()</code>和<code>unlock()</code>方法配合<code>try/finally </code>语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。</p><p>③、ReentrantLock 比 synchronized 增加了一些高级功能</p><p>相比<code>synchronized</code>，<code>ReentrantLock</code>增加了一些高级功能。主要来说主要有三点：①等待可中断；②可实现公平锁；③可实现选择性通知（锁可以绑定多个条件）</p><ul><li><strong>ReentrantLock提供了一种能够中断等待锁的线程的机制</strong>，通过<code>lock.lockInterruptibly()</code>来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong><code>ReentrantLock</code>可以指定是公平锁还是非公平锁。而synchronized只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。</strong> <code>ReentrantLock</code>默认情况是非公平的，可以通过 <code>ReentrantLock</code>类的<code>ReentrantLock(boolean fair)</code>构造方法来制定是否是公平的。</li><li><code>synchronized</code>关键字与<code>wait()</code>和<code>notify()/notifyAll()</code>方法相结合可以实现等待/通知机制，<code>ReentrantLock</code>类当然也可以实现，但是需要借助于<code>Condition</code>接口与<code>newCondition() </code>方法。<code>Condition</code>是<code>JDK1.5</code>之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个<code>Lock</code>对象中可以创建多个<code>Condition</code>实例（即对象监视器），<strong>线程对象可以注册在指定的<code>Condition</code>中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。在使用<code>notify()/notifyAll()</code>方法进行通知时，被通知的线程是由 <code>JVM </code>选择的，用<code>ReentrantLock</code>类结合<code>Condition</code>实例可以实现“选择性通知”，</strong>这个功能非常重要，而且是<code>Condition</code>接口默认提供的。而<code>synchronized</code>关键字就相当于整个<code>Lock</code>对象中只有一个<code>Condition</code>实例，所有的线程都注册在它一个身上。如果执行<code>notifyAll()</code>方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而<code>Condition</code>实例的<code>signalAll()</code>方法只会唤醒注册在该<code>Condition</code>实例中的所有等待线程。</li></ul><p>④、性能已不是选择标准</p><h2 id="12-volatile关键字"><a href="#12-volatile关键字" class="headerlink" title="12. volatile关键字"></a>12. volatile关键字</h2><p>暂略</p><h2 id="13-ThreadLocal"><a href="#13-ThreadLocal" class="headerlink" title="13. ThreadLocal"></a>13. ThreadLocal</h2><p>暂略</p><h2 id="14-线程池"><a href="#14-线程池" class="headerlink" title="14. 线程池"></a>14. 线程池</h2><h3 id="1-为什么要用线程池？"><a href="#1-为什么要用线程池？" class="headerlink" title="1. 为什么要用线程池？"></a>1. 为什么要用线程池？</h3><blockquote><p>池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率</p></blockquote><p>线程池提供了一种限制和管理资源（包括执行一个任务）。每个线程池还维护一些基本统计信息，例如已完成任务的数量。</p><p><strong>使用线程池的好处</strong>：</p><ul><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h3 id="2-实现Runnable接口和Callable接口的区别"><a href="#2-实现Runnable接口和Callable接口的区别" class="headerlink" title="2. 实现Runnable接口和Callable接口的区别"></a>2. 实现Runnable接口和Callable接口的区别</h3><p><code>Runnable</code>自<code>Java 1.0</code>以来一直存在，但<code>Callable</code>仅在<code>Java 1.5</code>中引入,目的就是为了来处理<code>Runnable</code>不支持的用例。<code>Runnable</code>接口不会返回结果或抛出检查异常，但是<code>Callable</code>接口可以。所以，如果任务不需要返回结果或抛出异常推荐使用<code>Runnable</code>接口，这样代码看起来会更加简洁。</p><p>工具类``Executors<code>可以实现</code>Runnable<code>对象和</code>Callable<code>对象之间的相互转换。（</code>Executors.callable（Runnable task）<code>或</code>Executors.callable（Runnable task，Object resule）`）。</p><h3 id="3-执行execute-方法和submit-方法的区别是什么呢？"><a href="#3-执行execute-方法和submit-方法的区别是什么呢？" class="headerlink" title="3. 执行execute()方法和submit()方法的区别是什么呢？"></a>3. 执行execute()方法和submit()方法的区别是什么呢？</h3><ol><li><strong><code>execute()</code>方法用于提交不需要返回值的任务</strong>，所以无法判断任务是否被线程池执行成功与否；</li><li><strong><code>submit()</code>方法用于提交需要返回值的任务</strong>。线程池会返回一个<code>Future</code>类型的对象，通过这个<code>Future</code>对象可以判断任务是否执行成功，并且可以通过<code>Future</code>的<code>get()</code>方法来获取返回值，<code>get()</code>方法会阻塞当前线程直到任务完成，而使用<code>get（long timeout，TimeUnit unit）</code>方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【剑指Offer】打印从1到最大的n位数</title>
      <link href="/2020/09/04/%E5%89%91%E6%8C%87Offer%2017-%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/"/>
      <url>/2020/09/04/%E5%89%91%E6%8C%87Offer%2017-%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: n &#x3D; 1</span><br><span class="line">输出: [1,2,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>吐槽一下自己，最初自己在思考的时候，一直在思考当n位数的数字时，输出 10 ^(n-1) + (1~9)，然后采用递归实现，但是思来思去，还是过于复杂。</p><p>当我看了官方推荐题解之后，真心感觉发现了新大陆，哇，好简单。</p><p><strong>言归正传，接下来，说一下思路：</strong></p><ol><li>题目中要求打印出最大的n位数的数字，1位是9,2位是99,3位是999，同理可推出，最大的数字可表示为： <code>10^(n) - 1</code></li><li>因为要打印出1 ~ 最大数字，也就是说 最大数字即为数组长度</li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] printNumbers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">       <span class="keyword">int</span> end = (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>,n) - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span>[] array =  <span class="keyword">new</span> <span class="keyword">int</span>[end];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; end;i ++) &#123;</span><br><span class="line">          array[i] = i + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java面试总结】Java集合</title>
      <link href="/2020/09/02/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91Java%E9%9B%86%E5%90%88/"/>
      <url>/2020/09/02/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91Java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-集合"><a href="#Java-集合" class="headerlink" title="Java 集合"></a>Java 集合</h1><h2 id="1-说说List、Set、Map三者的区别"><a href="#1-说说List、Set、Map三者的区别" class="headerlink" title="1. 说说List、Set、Map三者的区别"></a>1. 说说List、Set、Map三者的区别</h2><ul><li><strong>List（对付顺序的好帮手）</strong>：List接口存储一组<strong>不唯一</strong>（可以有多个元素引用相同的对象），<strong>有序</strong>的对象</li><li><strong>Set（注重独一无二的性质）</strong>：<strong>不允许重复</strong>的集合。不会有多个元素引用相同的对象</li><li><strong>Map（用key来搜索的专家）</strong>：使用<strong>键值对存储</strong>。Map会维护与key有关联的值。两个key可以引用相同的对象，但key不能重复，典型的key是String类型，也可以是任意类型</li></ul><h2 id="2-ArrayList与LinkedList的区别"><a href="#2-ArrayList与LinkedList的区别" class="headerlink" title="2. ArrayList与LinkedList的区别"></a>2. ArrayList与LinkedList的区别</h2><ol><li><p><strong>是否保证线程安全</strong>：<code>ArrayList</code>和<code>LinkedList</code>都是不同步的，也就是不保证线程安全；</p></li><li><p><strong>底层数据结构</strong>：<code>ArrayList</code>底层使用的是<code>Object</code>数组；<code>LinkedList</code>底层使用的是双向链表   数据结构（JDK1.6之前为循环链表，JDK1.7取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到！）</p></li><li><p><strong>插入和删除是否受元素位置的影响</strong>：</p><p> ① . <code>ArrayList</code>采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。比如：执行<code>add(E e)</code>方法的时候，<code>ArrayList</code>会默认将指定的元素追加到此列表的末尾，这种情况的时间复杂度就是 0(1)。但是如果要在指定位置 i 插入和删除元素的话（<code>add(int index,E e)</code>）时间复杂度就是 0(n - i)。因为在进行上述操作的时候，集合中第 i 个元素和第 n- i 个之后的元素都要向后/向前移一位。</p><p> ② . <code>LinkedList</code>采用链表存储，所以对于<code>add(E e)</code>方法的插入和删除的时间复杂度不受元素位置的影响，近似 0(1)，如果是要在指定位置 i 插入或删除元素的话（<code>add(int index,E e)</code>）时间复杂度近似为 0(n)，因为需要先移动到指定位置再插入</p></li><li><p><strong>是否支持快速随机访问</strong>：<code>LinkedList</code>不支持搞笑的随机元素访问，而<code>ArrayList</code>支持。快速随机访问就是通过元素的序号快速获取元素对象（对应于<code>get(int index)</code>方法）</p></li><li><p><strong>内存占用空间</strong>：<code>ArrayList</code>的空间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 <code>LinkedList</code>的空间花费则体现在它的每一个元素都需要消耗比 <code>ArrayList</code>更多的空间（因</p><p> 为要存放直接后继和直接前驱以及数据）。</p></li></ol><h3 id="list-的遍历方式选择："><a href="#list-的遍历方式选择：" class="headerlink" title="list 的遍历方式选择："></a>list 的遍历方式选择：</h3><ul><li>实现了 <code>RandomAccess</code>接口的 list，优先选择普通的 for 循环，其次是 foreach</li><li>未实现 <code>RandomAccess</code>接口的 list，则优先选择 <code>iterator</code>遍历（foreach遍历底层也是通过 iterator实现的），大 size 的数据，千万不要使用普通for循环</li></ul><blockquote><p>注：</p><p><code>ArrayLis</code>t实现了RandomAccess接口，而<code>LinkedList</code>没有实现。为什么呢？我觉得还是和底层数据结构有关！<code>ArrayList</code>底层是数组，而<code>LinkedList</code>底层是链表。数组天然支持随机访问，时间复杂度为 O（1），所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为 O（n），所以不支持快速随机访问。<code>ArrayList</code>实现了<code>RandomAccess</code>接口，就表明了他具有快速随机访问功能。<code>RandomAccess</code>接口只是标识，并不是说<code>ArrayList</code>实现<code>RandomAccess</code>接口才具有快速随机访问功能的！</p></blockquote><p>更多关于  <code>RandomAccess</code>接口的知识，请百度。</p><h3 id="补充内容-双向链表和双向循环链表"><a href="#补充内容-双向链表和双向循环链表" class="headerlink" title="补充内容:双向链表和双向循环链表"></a>补充内容:双向链表和双向循环链表</h3><p><strong>双向链表：</strong>包含两个指针，一个prev指向前一个节点，一个next指向后一个节点。</p><blockquote><p>推荐阅读：<a href="https://juejin.im/post/6844903648154271757">看图轻松理解数据结构与算法系列(双向链表)</a></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200903213645.png" alt="image-20200831090247509"></p><p><strong>双向循环链表：</strong>最后一个节点的 next 指向head，而 head 的prev指向最后一个节点，构成一个环。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200903213646.png" alt="image-20200831090529849"></p><h2 id="3-ArrayList-与-Vector-区别呢-为什么要用Arraylist取代Vector呢？"><a href="#3-ArrayList-与-Vector-区别呢-为什么要用Arraylist取代Vector呢？" class="headerlink" title="3. ArrayList 与 Vector 区别呢?为什么要用Arraylist取代Vector呢？"></a>3. ArrayList 与 Vector 区别呢?为什么要用Arraylist取代Vector呢？</h2><p><code>Vector</code>类的所有方法都是同步的。可以由两个线程安全地访问一个 Vector 对象，但是一个线程访问 Vector 的话代码要在同步操作上耗费大量的时间。</p><p><code>ArrayList</code>不是同步的，所以不需要保证线程安全时建议使用 ArrayList。</p><h2 id="4-ArrayList-的扩容机制"><a href="#4-ArrayList-的扩容机制" class="headerlink" title="4. ArrayList 的扩容机制"></a>4. ArrayList 的扩容机制</h2><p>直接阅读Guide老哥的文章吧，我感觉写的很详细，我已经无法简写摘抄了，缺少一步都相当于缺少了灵魂：<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/ArrayList-Grow.md">通过源码一步一步分析ArrayList 扩容机制</a></p><h2 id="5-HashMap-和-HashTable-的区别"><a href="#5-HashMap-和-HashTable-的区别" class="headerlink" title="5. HashMap 和 HashTable 的区别"></a>5. HashMap 和 HashTable 的区别</h2><ol><li><p><strong>线程是否安全</strong>：<code>HashMap</code> 是非线程安全的，<code>HashTable</code> 是线程安全的。<code>HashTable</code> 内部的方法基本都经过 <code>synchronized</code>修饰。（如果要保证线程安全，就使用 <code>ConcurrentHashMap</code>）</p></li><li><p><strong>效率</strong>：因为线程安全的问题，<code>HashMap</code> 要比 <code>HashTable </code>效率高一点。另外，<code>HashTable</code> 基本被淘汰，不要在代码中使用它</p></li><li><p><strong>对 Null key 和 Null value的支持</strong>：<code>HashMap</code>中，<code>null</code> 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为<code> null</code>。但是在<code>HashTable</code>中 put 中的键值只有一个 null，直接抛出 <code>NullPointerException</code></p></li><li><p><strong>初始化容量大小和每次扩充容量的大小不同</strong>：</p><p> ① . <strong>创建时如果不指定容量初始值</strong>，<code> HashTable</code> 默认的初试大小为11，之后每次扩容 ，容量变成原来的 2n+1；<code>HashMap</code> 默认的初试大小为 16，之后每次扩容，容量变成原来的2倍。</p><p> ② . <strong>创建时如果指定了容量初始值</strong>，那么 <code>HashTable</code> 会直接使用给定的大小，而<code> HashMap</code> 会将其扩充为2 的幂次方大小。</p></li><li><p><strong>底层数据结构</strong>：JDK 1.8 以后的<code>HashMap</code> 在解决 哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转换为红黑树，以减少搜索时间。<code>HashTable</code> 没有这样的机制。</p></li></ol><h2 id="6-HashMap-和-HashSet-的区别"><a href="#6-HashMap-和-HashSet-的区别" class="headerlink" title="6. HashMap 和 HashSet 的区别"></a>6. HashMap 和 HashSet 的区别</h2><p><code>HashSet</code> 底层是基于 <code>HashMap</code> 实现的（<code>HashSet </code>的源码非常非常少，因为除了<code>clone()</code>、<code>writeObject()</code>、<code>readObject()</code>是<code> HashSet</code> 自己不得不实现之外，其他方法都是直接调用 <code>HashMap</code> 中的方法。</p><table><thead><tr><th>HashMap</th><th>HashSet</th></tr></thead><tbody><tr><td>实现了Map接口</td><td>实现Set接口</td></tr><tr><td>存储键值对</td><td>仅存储对象</td></tr><tr><td>调用<code>put()</code>向map中添加元素</td><td>调用<code>add()</code>方法向map中添加元素</td></tr><tr><td>HashMap使用键（Key）计算<code>Hashcode</code></td><td><code>HashSet</code>使用成员对象来计算<code>hashcode</code>值，对于两个对象来说<code>hashcode</code>可能相同，所以<code>equals()</code>方法用来判断对象的相等性</td></tr></tbody></table><h2 id="7-HashSet如何检查重复"><a href="#7-HashSet如何检查重复" class="headerlink" title="7. HashSet如何检查重复"></a>7. HashSet如何检查重复</h2><p>当把对象加入<code>HashSet</code>时，<code>HashSet</code>会先计算对象的<code>HashCode</code>值来判断对象加入的位置，同时也会与其它加入的对象的<code>HashCode</code>的值做比较，如果没有相符的<code>HashCode</code>，<code>HashSet</code>会假设对象没有重复出现。但是如果发现有相同的<code>HashCode</code>值的对象，这时会调用<code>equals()</code>方法来检查<code>HashCode</code>相等的对象是否真的相同。如果两者相同，<code>HashSet</code>就不会让加入操作成功。</p><p><strong><code>hashcode()</code>与<code>equals()</code>的相关规定：</strong></p><ol><li>如果两个对象相等，则hashcode一定也是相同的</li><li>两个对象相等，对两个equals方法返回true</li><li>两个对象有相同的hashCode值，它们也不一定是相等的</li><li>综上，equals方法被覆盖过，则hashCode方法也必须被覆盖</li><li>hashCode()的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><p><strong>== 与 equals 的区别</strong></p><ol><li><code>==</code>是判断两个变量或实例是不是指向同一个内存空间 ，<code>equals</code>是判断两个变量或实例所指向的内存空间的值是不是相同</li><li><code>==</code>是指对内存地址进行比较 <code>equals()</code>是对字符串的内容进行比较</li><li><code>==</code>指引用是否相同 ,<code>equals()</code>指的是值是否相同</li></ol><h2 id="8-HashMap的底层实现"><a href="#8-HashMap的底层实现" class="headerlink" title="8. HashMap的底层实现"></a>8. HashMap的底层实现</h2><p>JDK 1.8之前</p><p>JDK 1.8之前<code>HashMap</code>底层是 <strong>数组和链表</strong> 结合在一起使用也就是 <strong>链表散列</strong>。<strong>HashMap</strong> <strong>通过 key 的hashCode经过扰动函数处理后得到的 hash 值，然后通过 （n - 1）&amp; hash 判断当前元素存放的位置（这里的n指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash值，以及是key 是否相同，如果相同的话，直接覆盖，不相同就通过 拉链法解决冲突。</strong></p><p><strong>扰动函数指的就是 hashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 <code>hashCode()</code> 方法，换句话说使用扰动函数之后可以减少碰撞。</strong></p><p>JDK 1.8 HashMap 的 hash 方法源码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">staticfinalinthash(Objectkey) &#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line">    <span class="comment">// ^ ：按位异或// j&gt;ké无符号右移，忽略符号位，空位都以0补⻬</span></span><br><span class="line">    <span class="keyword">return</span> (keyWXnull) ?<span class="number">0</span> : (h=key.hashCode()) ^ (hj&gt;k16); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK1.7的 HashMap 的 hash 方法源码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">staticinthash(inth) &#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line"></span><br><span class="line">    h^= (hj&gt;k20) ^ (hj&gt;k12);</span><br><span class="line">    returnh^ (hj&gt;k7) ^ (hj&gt;k4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK 1.8 的 hash方法相比于 JDK 1.7 hash 方法更加简化，但是原理不变</p><p>相比于 JDK1.8 的 hash 方法，JDK 1.7 的 hash 方法的性能会稍差一点点，因为毕竟扰动了 4 次。</p><p>“拉链法”就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200903213647.png" alt="image-20200902151901877"></p><p>JDK1.8之后相比于之前的版本， JDK1.8之后在解决哈希冲突时有了较大的变化，当链表⻓度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200903213648.png" alt="image-20200902152013105"></p><blockquote><p>TreeMap、TreeSet以及JDK1.8之后的HashMap底层都用到了红黑树。红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。</p></blockquote><p>推荐阅读：<a href="https://zhuanlan.zhihu.com/p/21673805">《Java 8系列之重新认识HashMap》</a></p><p>注：本块内容后期再做整理修改</p><h2 id="9-HashMap-的长度为什么是2的幂次方"><a href="#9-HashMap-的长度为什么是2的幂次方" class="headerlink" title="9. HashMap 的长度为什么是2的幂次方"></a>9. HashMap 的长度为什么是2的幂次方</h2><p>为了能让 <code>HashMap</code> 存取高效，尽量较少碰撞，也就是要尽量把数据分配均匀。</p><p><code>Hash</code> 值 的范围值 <code>-2147483648</code>到<code>2147483647</code>，前后加起来大概<code>40亿</code>的映射空间，只要哈希函数映射得比较均匀松散，一般应用很难出现碰撞的。但问题是一个<code>40亿</code>长度的数组，内存是放不下的，所以这个散列值是不能直接拿来用的。用之前还要先做对数组的长度取模运算，得到的余数才能用来要存放的位置，也就是对应的数组 下标。这个数组下标的计算方法是“<code>（n - 1）&amp; hash</code>”。（n代表数组⻓度），这也就解释了<code>HashMap</code>的⻓度为什么是2的幂次方。</p><p>那么，如何设计这个算法呢？</p><p>我们首先可能会想到采用%取余的操作来实现。但是，重点来了：“<strong>取余(%)操作中如果除数是2的幂次则等价于与其除数减一的与(&amp;)操作（也就是说 hash%lengthdehash&amp;(length-1)的前提是 length 是2的n 次方；）。”并且采用二进制位操作 &amp;，相对于%能够提高运算效率，这就解释了 HashMap 的⻓度为什么是2的幂次方。</strong></p><h2 id="10-HashMap-多线程操作导致死循环问题"><a href="#10-HashMap-多线程操作导致死循环问题" class="headerlink" title="10. HashMap 多线程操作导致死循环问题"></a>10. HashMap 多线程操作导致死循环问题</h2><p>主要原因在于并发下的<code>Rehash</code> 会造成元素之间会形成一个循环链表。不过，jdk 1.8 后解决了这个问题，但是还是不建议在多线程下使用<code> HashMap</code>,因为多线程下使用<code> HashMap</code> 还是会存在其他问题比如数据丢失。并发环境下推荐使用 <code>ConcurrentHashMap</code></p><p>推荐阅读：<a href="https://coolshell.cn/articles/9606.html">疫苗：Java HashMap的死循环</a></p><h2 id="11-ConcurrentHashMap-和-Hashtable-的区别"><a href="#11-ConcurrentHashMap-和-Hashtable-的区别" class="headerlink" title="11. ConcurrentHashMap 和 Hashtable 的区别"></a>11. ConcurrentHashMap 和 Hashtable 的区别</h2><p>后期补上</p><h2 id="12-ConcurrentHashMap线程安全的具体实现方式-底层具体实现"><a href="#12-ConcurrentHashMap线程安全的具体实现方式-底层具体实现" class="headerlink" title="12. ConcurrentHashMap线程安全的具体实现方式/底层具体实现"></a>12. ConcurrentHashMap线程安全的具体实现方式/底层具体实现</h2><p>后期补上</p><h2 id="13-comparable-和-Comparator的区别"><a href="#13-comparable-和-Comparator的区别" class="headerlink" title="13. comparable 和 Comparator的区别"></a>13. comparable 和 Comparator的区别</h2><ul><li><code>comparable</code> 接口实际上出自 <code>java.lang</code>包，它有一个 <code>compareTo(Object obj)</code> 方法用来排序</li><li><code>comparator</code> 接口实际上是出自<code> java.util</code> 包它有一个 <code>compare(Object obj1,Object obj2)</code>方法用来排序</li></ul><p>一般我们需要对一个集合使用自定义排序时，我们就要重写<code>compareTo()</code>方法或<code>compare()</code>方法，当我们需要对某一个集合实现两种排序方式，比如一个song对象中的歌名和歌手分别采用一种排序方法的话，我们可以重写<code>compareTo()</code>方法和使用自制的<code>comparator</code>方法或者以两个<code>Comparator</code>来实现歌名排序和歌星名排序，第二种代表我们只能使用两个参数板的<code> collections.sort()</code>.</p><p><strong>Comparator定制排序</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> comparable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/9/3 22:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        arrayList.add(-<span class="number">1</span>);</span><br><span class="line">        arrayList.add(<span class="number">2</span>);</span><br><span class="line">        arrayList.add(<span class="number">1</span>);</span><br><span class="line">        arrayList.add(<span class="number">0</span>);</span><br><span class="line">        arrayList.add(-<span class="number">3</span>);</span><br><span class="line">        arrayList.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;原始数组：&quot;</span> + arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// void reverse(List list)   反转</span></span><br><span class="line">        Collections.reverse(arrayList);</span><br><span class="line">        System.out.println(<span class="string">&quot;反转后的数组：&quot;</span> + arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// void sort(List list) 按自然排序的升序排序</span></span><br><span class="line">        Collections.sort(arrayList);</span><br><span class="line">        System.out.println(<span class="string">&quot;反转后的数组按自然排序升序：&quot;</span> + arrayList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定制排序的用法</span></span><br><span class="line">        Collections.sort(arrayList, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o2.compareTo(o1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;定制排序后：&quot;</span> + arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原始数组：[-1, 2, 1, 0, -3, 6]</span><br><span class="line">反转后的数组：[6, -3, 0, 1, 2, -1]</span><br><span class="line">反转后的数组按自然排序升序：[-3, -1, 0, 1, 2, 6]</span><br><span class="line">定制排序后：[6, 2, 1, 0, -1, -3]</span><br></pre></td></tr></table></figure><p><strong>重写compareTo方法实现按年龄来排序</strong></p><ul><li><p>Person.java</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> comparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/9/3 22:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TODO 重写 compareTo方法实现按年龄来排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &gt; o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; o.getAge()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>PersonMain.java</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> comparable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/9/3 23:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeMap&lt;Person, String&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>),<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Person(<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>),<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Person(<span class="string">&quot;王五&quot;</span>,<span class="number">21</span>),<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="keyword">new</span> Person(<span class="string">&quot;赵六&quot;</span>,<span class="number">25</span>),<span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到 key 的值 同时得到key所对应的值</span></span><br><span class="line">        Set&lt;Person&gt; keys = treeMap.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Person key : keys) &#123;</span><br><span class="line">            System.out.println(key.getAge() + <span class="string">&quot;-&quot;</span> + key.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出：</p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20-李四</span><br><span class="line">21-王五</span><br><span class="line">23-张三</span><br><span class="line">25-赵六</span><br></pre></td></tr></table></figure></li></ul><h2 id="14-集合框架底层数据结构总结"><a href="#14-集合框架底层数据结构总结" class="headerlink" title="14. 集合框架底层数据结构总结"></a>14. 集合框架底层数据结构总结</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><ol><li><strong>List</strong><ul><li><strong>ArrayList</strong>：Object 数组</li><li><strong>Vector</strong>：Object 数组</li><li><strong>LinkedList</strong>：双向链表（JDK 1.6之前为循环链表，JDK 1.7取消了循环）</li></ul></li><li><strong>Set</strong><ul><li><strong>HashSet（无序，唯一）</strong>：基于 HashMap 实现的，底层采用 HashMap 来保存元素</li><li><strong>LinkedHashSet</strong>：LinkedHashSet 继承于 HashSet，并且其内部是通过 LinkedHashMap 来实现的。有点类似于我们之前说过的 LinkedHashMap，其内部是基于 HashMap 实现一样，不过还是有一点点区别。</li><li><strong>TreeSet</strong>（有序，唯一）：红黑树（自平衡的排序二叉树）</li></ul></li></ol><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul><li><p><strong>HashMap</strong>：DK1.8之前HashMap由数组+链表组成的，数组是<code>HashMap</code>的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8以后在解决哈希冲突时有了较大的变化，当链表⻓度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间</p></li><li><p><strong>LinkedHashMap</strong>： <code>LinkedHashMap</code> 继承自 <code>HashMap</code>，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，<code>LinkedHashMap</code> 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</p><p>  详细阅读：<a href="https://www.imooc.com/article/22931">LinkedHashMap 源码详细分析（JDK1.8）</a></p></li><li><p><strong>Hashtable</strong>：数组+链表组成的，数组是 <code>HashMap</code> 的主体，链表则是主要为了解决哈希冲突而存在的</p></li><li><p><strong>TreeMap</strong>：红黑树（自平衡的排序二叉树）</p></li></ul><h2 id="15-如何选用集合"><a href="#15-如何选用集合" class="headerlink" title="15. 如何选用集合?"></a>15. 如何选用集合?</h2><p>主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用<code>Map</code>接口下的集合，需要排序时选择<code>TreeMap</code>,不需要排序时就选择<code>HashMap</code>,需要保证线程安全就选用<code>ConcurrentHashMap</code>.当我们只需要存放元素值时，就选择实现<code>Collection</code>接口的集合，需要保证元素唯一时选择实现Set接口的集合比如<code>TreeSet</code>或<code>HashSet</code>，不需要就选择实现<code>List</code>接口的比如<code>ArrayList</code>或<code>LinkedList</code>，然后再根据实现这些接口的集合的特点来选用。</p>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【剑指Offer】二叉树的镜像</title>
      <link href="/2020/08/31/%E5%89%91%E6%8C%87Offer%2027-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
      <url>/2020/08/31/%E5%89%91%E6%8C%87Offer%2027-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><p>例如输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  2     7</span><br><span class="line"> &#x2F; \   &#x2F; \</span><br><span class="line">1   3 6   9</span><br></pre></td></tr></table></figure><p>镜像输出：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     4</span><br><span class="line">   &#x2F;   \</span><br><span class="line">  7     2</span><br><span class="line"> &#x2F; \   &#x2F; \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：root &#x3D; [4,2,7,1,3,6,9]</span><br><span class="line">输出：[4,7,2,9,6,3,1]</span><br></pre></td></tr></table></figure><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>看输入二叉树图像和镜像输出图像，可发现每一个节点的子节点的左右值都在交换位置。</p><p>在此，我们可以用递归的方法去不断交换二叉树节点的左右值</p><ul><li>当节点root为空时，则返回null；</li><li>利用递归，不断交换节点的左右值</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mirrorTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断 root是否为空，若为null，则表示越出节点，则返回 null</span></span><br><span class="line">       <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">// 递归，轮回交换 节点左右节点值</span></span><br><span class="line">       TreeNode temp = root.left;</span><br><span class="line">       root.left = mirrorTree(root.right);</span><br><span class="line">       root.right = mirrorTree(temp);</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java面试总结】完整归类版</title>
      <link href="/2020/08/31/%E3%80%90Java%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E3%80%91%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/"/>
      <url>/2020/08/31/%E3%80%90Java%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E3%80%91%E5%AE%8C%E6%95%B4%E7%89%88%EF%BC%88%E6%9B%B4%E6%96%B0%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>需要复习哪块的知识点，直接点击会跳转到响应的章节。</p><p>一、<a href="https://www.silentcow.cn/2020/08/29/%E3%80%90Java%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E3%80%91Java%E5%9F%BA%E7%A1%80(%E4%B8%8A%E7%AF%87)/">【Java面试总结】Java基础(上篇)</a></p><p>二、<a href="https://www.silentcow.cn/2020/08/30/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91Java%E5%9F%BA%E7%A1%80(%E4%B8%8B%E7%AF%87)/">【Java面试总结】Java基础(下篇)</a></p><p>三、<a href="https://www.silentcow.cn/2020/09/02/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91Java%E9%9B%86%E5%90%88/">【Java面试总结】Java集合</a></p><p>四、<a href="https://www.silentcow.cn/2020/09/06/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91%E5%A4%9A%E7%BA%BF%E7%A8%8B/#%E5%A4%9A%E7%BA%BF%E7%A8%8B">【Java面试总结】多线程</a></p><p>五、<a href="https://www.silentcow.cn/2020/09/08/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/#7-%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6">【Java面试总结】计算机网络</a></p><p>逐步更新中，着急的小伙伴直接点击下方链接跳转原作者版本阅读。</p><blockquote><p>声明：</p></blockquote><p>个人整理这套 Java面试总结 系列，主要是根据 @Guide哥开源项目：<a href="https://snailclimb.gitee.io/javaguide/#/">JavaGuide面试突击版</a></p><p>整理修改的，在此感谢 Guide老哥 的辛苦整理。</p><p>大家可能会觉得我这个和 Guide老哥的版本一模一样，的确，因为老哥整理的太细致完整了，以至于个人觉得很多地方不能再简写修改了，所以大体都是一样的，但是此系列中，百分之99都是本人一字一字码字的。</p><p>程序员的观点：“不要重复造轮子”，但在此我之所以这样一字一字跟着敲，目的在于加深自己的记忆、加深自己的理解，毕竟如果一字一字慢慢背的话，效果很不理想，而且很机械。</p><p>更新比较慢，尽量保持日更，但是由于学校大四课程太多太多了，每天留给自己的时间很少很少，再之别的事耽搁，日更可能不会日日完成，但我会尽力而更。</p><p>欢迎小伙伴们一起学校交流，文章中难免出现细微错误，欢迎指出！</p>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
            <tag> 完整归类版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【剑指Offer】链表中倒数第k个字节</title>
      <link href="/2020/08/30/%E5%89%91%E6%8C%87Offer%2022-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E5%AD%97%E8%8A%82/"/>
      <url>/2020/08/30/%E5%89%91%E6%8C%87Offer%2022-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E5%AD%97%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有6个节点，从头节点开始，它们的值依次是1、2、3、4、5、6。这个链表的倒数第3个节点是值为4的节点。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.</span><br><span class="line"></span><br><span class="line">返回链表 4-&gt;5.</span><br></pre></td></tr></table></figure><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>解题思路：</p><p>采用双指针</p><ol><li>初始化前指针former 和 后指针latter都指向头节点 head</li><li>构建双指针距离：前指针先向前走k步，则两者相距k步</li><li>共同移动：循环中，两者每轮都同时向前走一步，直到 前指针former为null（表示跳出链表）</li><li>返回latter的值（跳出后，latter与尾节点距离为k-1，即latter指向倒数第k个节点）</li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getKthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化former，latter</span></span><br><span class="line">        ListNode former = head,latter = head;</span><br><span class="line">        <span class="comment">// former 先向前走 k 步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;i ++) &#123;</span><br><span class="line">            former = former.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当 former 不为空的时候，former和latter共同向前走一步</span></span><br><span class="line">        <span class="keyword">while</span> (former != <span class="keyword">null</span>) &#123;</span><br><span class="line">            former = former.next;</span><br><span class="line">            latter = latter.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> latter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java面试总结】Java基础(下篇)</title>
      <link href="/2020/08/30/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91Java%E5%9F%BA%E7%A1%80(%E4%B8%8B%E7%AF%87)/"/>
      <url>/2020/08/30/%E3%80%90Java%E9%9D%A2%E8%AF%95%E3%80%91Java%E5%9F%BA%E7%A1%80(%E4%B8%8B%E7%AF%87)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.silentcow.cn/2020/08/29/%E3%80%90Java%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E3%80%91Java%E5%9F%BA%E7%A1%80(%E4%B8%8A%E7%AF%87)/">【Java面试总结】Java基础(上篇)</a></p><h2 id="26-与-equals-重要"><a href="#26-与-equals-重要" class="headerlink" title="26. == 与 equals(重要)"></a>26. == 与 equals(重要)</h2><p><strong>== ：</strong>它的作用 是<strong>判断两个对象的地址是不是相等</strong>。即，判断两个对象是不是同一个对象（基本数据类型 == 比较的是值，引用数据类型 == 比较的是 内存地址）</p><p><strong>equals()</strong> ：它的作用也是<strong>判断两个对象是否相等</strong>。但它一般有两种使用情况：</p><ul><li>情况1：类没有覆盖 equals() 方法，则通过 equals() 比较该类的两个对象时，等价于通过 “==”比较这两个对象；</li><li>情况2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回true（即，认为这两个对象相等）</li></ul><p><strong>说明：</strong></p><ul><li>String 中的 equals 方法是被重写过的，因为Object 的 equals 方法是比较的对象的内存地址，而String 的equals 方法比较的是对象的值；</li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有，就把它赋给当前引用。如果没有，就在常量池中重新创建一个 String 对象。</li></ul><h2 id="27-hashCode-与-equals-重要"><a href="#27-hashCode-与-equals-重要" class="headerlink" title="27. hashCode 与 equals(重要)"></a>27. hashCode 与 equals(重要)</h2><p>“重写 equals 时 必须重写 hashCode 方法”</p><p><strong>hashCode() 介绍：</strong></p><p>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在JDK 的 Object.java 中，这就意味着Java 中任何类都包含hashCode() 函数。</p><p>散列表存储的是键值对(key-value)，它的特点是：根据”键“快速的检索出对应的”值“，这其中就用到了散列码。（可以快速找到所需要的对象）</p><p><strong>为什么要有 hashCode</strong></p><p>我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：当你把对象加入 HashSet时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与该位置其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用equals()方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。</p><p>通过我们可以看出：<strong>hashCode()的作用就是获取哈希码</strong>，也称为散列码；它实际上是返回一个 int整数。这个<strong>哈希码的作用是确定该对象在哈希表中的索引位置</strong>。<strong>hashCode()在散列表中才有用</strong>，在其它情况下没用。在散列表中 hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。</p><p><strong>hashCode（）与 equals（）的相关规定</strong></p><ol><li>如果两个对象相等，则 hashCode 一定也是相同的；</li><li>两个对象相等，对两个对象分别调用 equals 方法都返回 true</li><li>两个对象有相同的 hashCode 值，它们也不一定是相等的；</li><li>equals 方法被覆盖过，则 hashCode 方法也必须被覆盖；</li><li>hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</li></ol><p>更多阅读：<a href="https://www.cnblogs.com/skywang12345/p/3324958.html">Java hashCode() 和 equals()的若干问题解答</a></p><h2 id="28-为什么Java中只有值传递？"><a href="#28-为什么Java中只有值传递？" class="headerlink" title="28. 为什么Java中只有值传递？"></a>28. 为什么Java中只有值传递？</h2><p>在程序设计语言中有关将参数传递给方法（或函数）的一些专业术语。<strong>按值调用(call by value)表示方法接收的是调用者提供的值，而按引用调用（call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值，而不能修改传递值调用所对应的变量值。</strong> 它用来描述各种程序设计语言（不只是 Java)中方法参数传递方式。</p><p>Java 程序设计语言采用按值调用。也就是说，方法得到的是所有参数的一个拷贝，也就是说，方法不能修改传递给它的任何参数变量的内容；</p><p>下面通过3个例子说明：</p><blockquote><p>例1：</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/30 9:01</span></span><br><span class="line"><span class="comment"> * 值传递</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZCD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        swap(num1,num2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;num1=&quot;</span> + num1);</span><br><span class="line">        System.out.println(<span class="string">&quot;num2=&quot;</span> + num2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span> + a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b=&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a&#x3D;200</span><br><span class="line">b&#x3D;100</span><br><span class="line">num1&#x3D;100</span><br><span class="line">num2&#x3D;200</span><br></pre></td></tr></table></figure><p>解析：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830230902.png" alt="image-20200830091836424"></p><p>在 swap 方法中，a、b的值进行交换，并不会影响到num1、num2，因为，a、b中的值，只是从num1、num2中复制过来的，也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</p><p><strong>通过上面的例子，我们知道了一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不一样，请看例2。</strong></p><blockquote><p>例2：</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/30 9:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZCD2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(array[<span class="number">0</span>]);</span><br><span class="line">        change(array);</span><br><span class="line">        System.out.println(array[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将数组的第一个元素变为0</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>解析：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830230903.png" alt="image-20200830093607698"></p><p>arr 被初始化 array 的拷贝也就是一个对象的引用，也就是说 arr 和 array 指向的是同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上。</p><p><strong>通过 example2 我们已经看到，实现一个改变对象参数状态的方法并不是一件难事。理由很简单，方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。</strong></p><p><strong>很多程序设计语言（特别是，C++和 Pascal)提供了两种参数传递的方式：值调用和引用调用。有些程序员认为 Java 程序设计语言对对象采用的是引用调用，实际上，这种理解是不对的。由于这种误解具有一定的普遍性，所以下面给出一个反例来详细地阐述一下这个问题。</strong></p><blockquote><p>例3</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/30 9:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZCD3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line"></span><br><span class="line">        swap(s1, s2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;s1:&quot;</span> + s1.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;s2:&quot;</span> + s2.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line">        Student temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;a:&quot;</span> + a.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;b:&quot;</span> + b.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:小红</span><br><span class="line">b:小王</span><br><span class="line">s1:小王</span><br><span class="line">s2:小红</span><br></pre></td></tr></table></figure><p>解析：</p><p>交换之前：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200831092525.png" alt="image-20200830095556786"></p><p>交换之后：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200831093013.png" alt="image-20200830095556785"></p><p>通过上面两张图可以很清晰的看出： <strong>方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap 方法的参数 a和 b 被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝</strong></p><blockquote><p><strong>总结</strong></p></blockquote><p>Java 程序设计语言对对象采用的不是引用调用。实际上，对象引用是按值调用的。</p><p><strong>Java中方法参数的使用情况：</strong></p><ul><li>一个方法不能修改一个基本数据类型的参数（即数值型或布尔值）</li><li>一个方法可以改变一个对象参数的状态</li><li>一个方法不能让对象参数引用一个新的对象</li></ul><h2 id="29-简述线程、程序、进程的基本概念以及它们之间的关系"><a href="#29-简述线程、程序、进程的基本概念以及它们之间的关系" class="headerlink" title="29. 简述线程、程序、进程的基本概念以及它们之间的关系"></a>29. 简述线程、程序、进程的基本概念以及它们之间的关系</h2><p><strong>线程</strong>：与进程相似，但线程是    一个比进程更小的执行单位。一个进程在执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间做切换工作的时候，负担要比进程小的多。也正因如此，线程被称之为轻量级进程。</p><p><strong>程序</strong>：是含有指令和数据的文件，被存储在磁盘或其它的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>：是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建、运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接一个指令的执行着，同时，每个进程还占用某些系统资源，如CPU、内存空间、文件、输入输出设备的使用权等。换句话说，当程序 在执行中，将会被操作系统载入内存中。</p><p>线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是相互独立的，而各线程不一定，因为同一进程中的线程极有可能相互影响。从另一个角度来看，进程属于操作系统的范畴，主要是同一时间段内，可以执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。</p><h2 id="30-线程有哪些基本状态？"><a href="#30-线程有哪些基本状态？" class="headerlink" title="30. 线程有哪些基本状态？"></a>30. 线程有哪些基本状态？</h2><p>Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java并发编程艺术》4.1.4 节）。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830230907.png" alt="image-20200830103352629"></p><p>线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830230905.png" alt="image-20200830095827042"></p><p>由上图可以看出：</p><p><strong>线程创建之后它将处于NEW（新建）状态，调用start()方法后开始运行，线程这时候处于READY（可运行）状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于RUNNING（运行）状态</strong>。</p><blockquote><p>操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态，所以 Java 系统一般将这两个状态统称为RUNNABLE（运行中）状态。</p></blockquote><p>当线程执行wait()方法之后，线程进入WAITING（等待）状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而TIME_WAITING(超时等待)状态相当于在等待状态的基础上增加了超时限制，比如通过sleep（long millis）方法或wait（long millis）方法可以将 Java线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到BLOCKED（阻塞）状态。线程在执行Runnable 的run()方法之后将会进入到TERMINATED（终止）状态。</p><h2 id="31-关于-final-关键字的总结："><a href="#31-关于-final-关键字的总结：" class="headerlink" title="31. 关于 final 关键字的总结："></a>31. 关于 final 关键字的总结：</h2><p>final 关键字主要用在三个地方：变量、方法、类</p><ol><li>对于一个 final 变量，如果是基本数据类型的变量，则其一旦被初始化之后便不能再被修改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</li><li>当用 final 修饰一个类时，表名这个类不能被继承。final 类中所有的成员方法都会被隐式地指定为 final 方法。</li><li>使用 final 方法的原因有两点：第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早起的 Java 实现版本中，会将 final 方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的 Java版本已经不需要使用 final 方法进行这些优化了）。类中所有的 private 方法都会隐式地指定为 final。</li></ol><h2 id="32-Java-中的异常处理"><a href="#32-Java-中的异常处理" class="headerlink" title="32. Java 中的异常处理"></a>32. Java 中的异常处理</h2><h3 id="Java异常类层次结构图"><a href="#Java异常类层次结构图" class="headerlink" title="Java异常类层次结构图"></a><strong>Java异常类层次结构图</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830230906.png" alt="image-20200830103320305"></p><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包含的 <strong>Throwable</strong> 类。</p><p><strong>Throwable</strong>：有两个重要的子类：<strong>Exception（异常</strong>）和 <strong>Error（错误）</strong>，二者都是  Java 异常处理的重要子类，各自都包含大量子类。</p><p> <strong>Error（错误）</strong>：<strong>是程序无法处理的错误</strong>，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java 虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p><p>这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如 Java 虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过 Error 的子类描述。</p><p><strong>Exception（异常</strong>）：<strong>是程序本身可以处理的异常</strong>。Exception 类有一个重要的子类 <strong>RuntimeException</strong>。RuntimeException 异常由 Java虚拟机抛出。<strong>NullPointerException</strong>（要访问的变量没有引用任何对象时，抛出该异常）、<strong>ArithmeticException</strong>（算术运算异常，一个整数除以 0时，抛出该异常）和<strong>ArrayIndexOutOfBoundsException</strong>（下标越界异常）。</p><p><strong>注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。</strong></p><h3 id="Throwable-类常用方法"><a href="#Throwable-类常用方法" class="headerlink" title="Throwable 类常用方法"></a>Throwable 类常用方法</h3><ul><li>public string getMessage():返回异常发生时的简要描述</li><li>public string toString():返回异常发生时的详细信息</li><li>public string getLocalizedMessage():返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与getMessage（）返回的结果相同</li><li>public void printStackTrace():在控制台上打印 Throwable 对象封装的异常信息</li></ul><h3 id="异常处理总结"><a href="#异常处理总结" class="headerlink" title="异常处理总结"></a>异常处理总结</h3><ul><li>try 块：用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个finally 块。</li><li>catch 块：用于处理 try 捕获到的异常。</li><li>finally 块：无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或catch 块中遇到 return语句时，finally 语句块将在方法返回之前被执行。</li></ul><p><strong>在以下 4 种特殊情况下，finally 块不会被执行：</strong></p><ol><li>在 finally 语句块第一行发生了异常。因为在其他行，finally 块还是会得到执行</li><li>在前面的代码中用了 System.exit(int)已退出程序。 exit 是带参函数；若该语句在异常语句之后，finally 会执行</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ol><p><strong>注意：</strong>当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(intvalue)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           returnvalue * value;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (valueWX2) &#123;</span><br><span class="line">               return0;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如果调用<code>f(2)</code>，返回值将是 0，因为 finally 语句的返回值覆盖了 try 语句块的返回值。</p><h2 id="33-Java序列化如果有些字段不想进行序列化，怎么办？"><a href="#33-Java序列化如果有些字段不想进行序列化，怎么办？" class="headerlink" title="33. Java序列化如果有些字段不想进行序列化，怎么办？"></a>33. Java序列化如果有些字段不想进行序列化，怎么办？</h2><p>对于不想进行序列化的变量，使用 transient 关键字修饰。</p><p><strong>transient 关键字的作用</strong>是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。</p><h2 id="34-获取用键盘输入常用的两种方法"><a href="#34-获取用键盘输入常用的两种方法" class="headerlink" title="34. 获取用键盘输入常用的两种方法"></a>34. 获取用键盘输入常用的两种方法</h2><p>方法1：通过 <strong>Scanner</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = input.nextLine();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><p>方法2：通过 <strong>BufferedReader</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String s=input.readLine();</span><br></pre></td></tr></table></figure><h2 id="35-Java-中-IO-流"><a href="#35-Java-中-IO-流" class="headerlink" title="35. Java 中 IO 流"></a>35. Java 中 IO 流</h2><h3 id="Java-中的IO-流分为几种？"><a href="#Java-中的IO-流分为几种？" class="headerlink" title="Java 中的IO 流分为几种？"></a>Java 中的IO 流分为几种？</h3><ul><li>按照流的流向分，可以分为输入流和输出流；</li><li>按照操作单元划分，可以划分为字节流和字符流；</li><li>按照流的角色划分，可以分为字节流和处理流。</li></ul><p>Java IO流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系，Java IO流的40 多个类都是从 如下 4个抽象类基类中派生出来的。</p><ul><li>InputStream/Reader：所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li>OutputStream/Writer：所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><p><strong>按操作方式分类结构图：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830230911.png" alt="image-20200830181249235"></p><p><strong>按操作对象分类结构图：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830230909.png" alt="image-20200830164503352"></p><h3 id="既然有了字节流，为什么还要有字符流？"><a href="#既然有了字节流，为什么还要有字符流？" class="headerlink" title="既然有了字节流，为什么还要有字符流？"></a><strong>既然有了字节流，为什么还要有字符流？</strong></h3><p>问题：<strong>不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</strong></p><p>答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时的，并且，如果我们不知道编码类型就很容易出现乱码问题。所以，I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符流进行操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话则使用字符流比较好。</p><h3 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h3><ul><li>BIO (Blocking I/O):同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机 1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。</li><li>NIO (Non-blocking/New I/O): NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO提供了与传统 BIO 模型中的Socket和ServerSocket相对应的SocketChannel和ServerSocketChannel两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发</li><li>AIO (Asynchronous I/O): AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了</li></ul><h2 id="36-常见关键字总结-static-final-this-super"><a href="#36-常见关键字总结-static-final-this-super" class="headerlink" title="36. 常见关键字总结:static,final,this,super"></a>36. 常见关键字总结:static,final,this,super</h2><p><a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/final,static,this,super.md#final-%E5%85%B3%E9%94%AE%E5%AD%97">点击阅读此篇文章</a></p><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h3><p>final 关键字，意思是最终的、不可修改的，最见不得变化，用来修饰类、方法和变量，具有以下特点：</p><ol><li><strong>final 修饰的类不能被继承，final类 中的所有成员方法都会被隐式的指定为final方法；</strong></li><li><strong>final修饰的方法不能被重写；</strong></li><li><strong>final修饰的变量是常量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能让其指向另一个对象</strong></li></ol><p>说明：使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的Java版本已经不需要使用final方法进行这些优化了）。类中所有的private方法都隐式地指定为final。</p><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><p><strong>static 关键字主要有以下四种使用场景：</strong></p><ol><li><strong>修饰成员变量和成员方法:</strong> 被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。被static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。调用格式：<code>类名.静态变量名</code>    <code>类名.静态方法名()</code></li><li><strong>静态代码块:</strong> 静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—&gt;非静态代码块—&gt;构造方法)。 该类不管创建多少对象，静态代码块只执行一次.</li><li><strong>静态内部类（static修饰类的话只能修饰内部类）：</strong> 静态内部类与非静态内部类之间存在一个最大的区别:  非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。没有这个引用就意味着：1.  它的创建是不需要依赖外围类的创建。2. 它不能使用任何外围类的非static成员变量和方法。</li><li><strong>静态导包(用来导入类中的静态资源，1.5之后的新特性):</strong> 格式为：<code>import static</code> 这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法。</li></ol><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>this关键字用于引用类的当前实例。 例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    Employees[] employees;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">manageEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalEmp = <span class="keyword">this</span>.employees.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;Total employees: &quot;</span> + totalEmp);</span><br><span class="line">        <span class="keyword">this</span>.report();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，this关键字用于两个地方：</p><ul><li>this.employees.length：访问类Manager的当前实例的变量。</li><li>this.report（）：调用类Manager的当前实例的方法。</li></ul><p>此关键字是可选的，这意味着如果上面的示例在不使用此关键字的情况下表现相同。 但是，使用此关键字可能会使代码更易读或易懂。</p><h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h2><p>super关键字用于从子类访问父类的变量和方法。 例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> number;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">showNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;number = &quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.number = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">super</span>.showNumber();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，Sub 类访问父类成员变量 number 并调用其其父类 Super 的 <code>showNumber（）</code> 方法。</p><p><strong>使用 this 和 super 要注意的问题：</strong></p><ul><li>在构造器中使用 <code>super（）</code> 调用父类中的其他构造方法时，该语句必须处于构造器的首行，否则编译器会报错。另外，this 调用本类中的其他构造方法时，也要放在首行。</li><li>this、super不能用在static方法中。</li></ul><p><strong>简单解释一下：</strong></p><p>被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享。而 this 代表对本类对象的引用，指向本类对象；而 super 代表对父类对象的引用，指向父类对象；所以， <strong>this和super是属于对象范畴的东西，而静态方法是属于类范畴的东西</strong>。</p><p>详细请参考：<a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/final,static,this,super.md#final-%E5%85%B3%E9%94%AE%E5%AD%97">https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/final,static,this,super.md#final-%E5%85%B3%E9%94%AE%E5%AD%97</a></p><h2 id="37-Collections-工具类和-Arrays-工具类常⻅方法总结"><a href="#37-Collections-工具类和-Arrays-工具类常⻅方法总结" class="headerlink" title="37. Collections 工具类和 Arrays 工具类常⻅方法总结"></a>37. Collections 工具类和 Arrays 工具类常⻅方法总结</h2><p>更多详细内容请参考：<a href="https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md#collections">Collections 工具类和 Arrays 工具类常见方法</a></p><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>Collections 工具类常用方法:</p><ol><li>排序</li><li>查找,替换操作</li><li>同步控制(不推荐，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合)</li></ol><h4 id="排序操作"><a href="#排序操作" class="headerlink" title="排序操作"></a>排序操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List list)</span><span class="comment">//反转</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List list)</span><span class="comment">//随机排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list)</span><span class="comment">//按自然排序的升序排序</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List list, Comparator c)</span><span class="comment">//定制排序，由Comparator控制排序逻辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(List list, <span class="keyword">int</span> i , <span class="keyword">int</span> j)</span><span class="comment">//交换两个索引位置的元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(List list, <span class="keyword">int</span> distance)</span><span class="comment">//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面。</span></span></span><br></pre></td></tr></table></figure><h4 id="查找-替换操作"><a href="#查找-替换操作" class="headerlink" title="查找,替换操作"></a>查找,替换操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(List list, Object key)</span><span class="comment">//对List进行二分查找，返回索引，注意List必须是有序的</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll)</span><span class="comment">//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(Collection coll, Comparator c)</span><span class="comment">//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(List list, Object obj)</span><span class="comment">//用指定的元素代替指定list中的所有元素。</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">frequency</span><span class="params">(Collection c, Object o)</span><span class="comment">//统计元素出现次数</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOfSubList</span><span class="params">(List list, List target)</span><span class="comment">//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target).</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">replaceAll</span><span class="params">(List list, Object oldVal, Object newVal)</span>, 用新元素替换旧元素</span></span><br></pre></td></tr></table></figure><h4 id="同步控制"><a href="#同步控制" class="headerlink" title="同步控制"></a>同步控制</h4><p>Collections提供了多个<code>synchronizedXxx()</code>方法·，该方法可以将指定集合包装成线程同步的集合，从而解决多线程并发访问集合时的线程安全问题。</p><p>我们知道 HashSet，TreeSet，ArrayList,LinkedList,HashMap,TreeMap 都是线程不安全的。Collections提供了多个静态方法可以把他们包装成线程同步的集合。</p><p><strong>最好不要用下面这些方法，效率非常低，需要线程安全的集合类型时请考虑使用 JUC 包下的并发集合。</strong></p><p>方法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">synchronizedCollection(Collection&lt;T&gt;  c) <span class="comment">//返回指定 collection 支持的同步（线程安全的）collection。</span></span><br><span class="line">synchronizedList(List&lt;T&gt; list)<span class="comment">//返回指定列表支持的同步（线程安全的）List。</span></span><br><span class="line">synchronizedMap(Map&lt;K,V&gt; m) <span class="comment">//返回由指定映射支持的同步（线程安全的）Map。</span></span><br><span class="line">synchronizedSet(Set&lt;T&gt; s) <span class="comment">//返回指定 set 支持的同步（线程安全的）set。</span></span><br></pre></td></tr></table></figure><h4 id="Collections还可以设置不可变集合，提供了如下三类方法："><a href="#Collections还可以设置不可变集合，提供了如下三类方法：" class="headerlink" title="Collections还可以设置不可变集合，提供了如下三类方法："></a>Collections还可以设置不可变集合，提供了如下三类方法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emptyXxx(): 返回一个空的、不可变的集合对象，此处的集合既可以是List，也可以是Set，还可以是Map。</span><br><span class="line">singletonXxx(): 返回一个只包含指定对象（只有一个或一个元素）的不可变的集合对象，此处的集合可以是：List，Set，Map。</span><br><span class="line">unmodifiableXxx(): 返回指定集合对象的不可变视图，此处的集合可以是：List，Set，Map。</span><br><span class="line">上面三类方法的参数是原有的集合对象，返回值是该集合的”只读“版本。</span><br></pre></td></tr></table></figure><h3 id="Arrays类的常见操作"><a href="#Arrays类的常见操作" class="headerlink" title="Arrays类的常见操作"></a>Arrays类的常见操作</h3><ol><li>排序 : <code>sort()</code></li><li>查找 : <code>binarySearch()</code></li><li>比较: <code>equals()</code></li><li>填充 : <code>fill()</code></li><li>转列表:  <code>asList()</code></li><li>转字符串 : <code>toString()</code></li><li>复制: <code>copyOf()</code></li></ol><h2 id="38-深拷⻉-vs-浅拷⻉"><a href="#38-深拷⻉-vs-浅拷⻉" class="headerlink" title="38. 深拷⻉ vs 浅拷⻉"></a>38. 深拷⻉ vs 浅拷⻉</h2><ol><li><strong>浅拷贝</strong>：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝；</li><li><strong>深拷贝</strong>：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830230910.png" alt="image-20200830165047546"></p>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【剑指Offer】二叉树的深度</title>
      <link href="/2020/08/30/%E5%89%91%E6%8C%87Offer%2055-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
      <url>/2020/08/30/%E5%89%91%E6%8C%87Offer%2055-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p><p>例如：</p><p>给定二叉树 [3,9,20,null,null,15,7]，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  3</span><br><span class="line"> &#x2F; \</span><br><span class="line">9  20</span><br><span class="line">  &#x2F;  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>返回它的最大深度 3 。</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>此树的深度和其左（右）子树的深度之间的关系。显然，<strong>此树的深度</strong> 等于 <strong>左子树的深度</strong> 与 <strong>右子树的深度</strong> 中的 <strong>最大值</strong> +1 。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200830004723.png" alt="image-20200830004402365"></p><p>采用递归，当 root 为空，说明已经越过叶节点，则返回深度0；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(maxDepth(root.left),maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本解题思路参考官方题解，了解更多阅读：<a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/solution/mian-shi-ti-55-i-er-cha-shu-de-shen-du-xian-xu-bia/">面试题55 - I. 二叉树的深度（后序遍历、层序遍历，清晰图解）</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java面试总结】Java基础(上篇)</title>
      <link href="/2020/08/29/%E3%80%90Java%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E3%80%91Java%E5%9F%BA%E7%A1%80(%E4%B8%8A%E7%AF%87)/"/>
      <url>/2020/08/29/%E3%80%90Java%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E3%80%91Java%E5%9F%BA%E7%A1%80(%E4%B8%8A%E7%AF%87)/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="1-面向对象和面向过程的区别"><a href="#1-面向对象和面向过程的区别" class="headerlink" title="1. 面向对象和面向过程的区别"></a>1. 面向对象和面向过程的区别</h2><ul><li><strong>面向过程：其性能高于面向对象</strong>。因为类调用时需要实例化，开销比较大，比较消耗资源，因此在考虑性能的条件下，比如linux、单片机等都采用面向过程开发。但是，<strong>面向过程没有面向对象易维护、易复用、易扩展。</strong></li><li><strong>面向对象：面向对象易维护、易复用、易扩展</strong>。因为其有继承、多态、封装的特性，因此可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，<strong>面向对象性能比面向过程低。</strong></li></ul><h2 id="2-Java语言的特点"><a href="#2-Java语言的特点" class="headerlink" title="2. Java语言的特点"></a>2. Java语言的特点</h2><ol><li>简单易学；</li><li>面向对象（封装、继承、多态）；</li><li>平台无关性（Java虚拟机可以实现跨平台）；</li><li>可靠性；</li><li>安全性</li><li>支持多线程（C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 却提供了多线程支持）；</li><li>支持网络编程（Java 语言的诞生就是为了简化网络编程设计的，因此Java 不仅支持网络编程而且很方便）；</li><li>编译与解释并存。</li></ol><blockquote><p>注：C++11 开始（2011 年的时候）,C++就引入了多线程库，在 windows、linux、macos 都可以使用stdÇÉthread和stdÇÉasync来创建线程。参考链接：<a href="http://www.cplusplus.com/reference/thread/thread/?kw=thread">http://www.cplusplus.com/reference/thread/thread/?kw=thread</a></p></blockquote><h2 id="3-关于-JVM-JDK-和JRE"><a href="#3-关于-JVM-JDK-和JRE" class="headerlink" title="3. 关于 JVM JDK 和JRE"></a>3. 关于 JVM JDK 和JRE</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java虚拟机（JVM）是运行Java字节码的虚拟机。JVM 有针对不同系统的特定实现（windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。</p><p><strong>什么是字节码？采用字节码的好处是什么？</strong></p><ul><li><p>在Java中，代码就是字节码（扩展名是 .class的文件），它不面向任何的特定的处理器，只面向虚拟机。</p></li><li><p>Java语言通过通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释性语言可移植的特点。所以Java程序运行时比较高效。而且，由于字节码并不是针对特定的机器，因此，Java 程序无需重新编译便可在不同的操作系统的计算机运行。</p></li></ul><p><strong>Java 程序从源代码到运行一般有下面3步：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200829155705.png" alt="image-20200829081621291"></p><p><strong>需要格外注意的是： .class -&gt; 机器码 这一步。在这一步，JVM 类加载器首先会加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢；而且，有些方法和代码块是经常需要被重复调用的（也就是所谓的热点代码），所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。我们知道，机器码的运行效率是肯高于 Java 解释器的。这也解释了我们为什么会说 Java 是 编译与解释共存的语言。</strong></p><blockquote><p>HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。</p></blockquote><p><strong>总结：</strong></p><p>Java虚拟机（JVM）是运行Java字节码的虚拟机，JVM有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java语言 “一次编译，随处可以运行”的关键所在。</p><hr><h3 id="JDK-和-JRE"><a href="#JDK-和-JRE" class="headerlink" title="JDK 和 JRE"></a>JDK 和 JRE</h3><p>JDK 是 Java Development Kit，它是功能齐全的Java SDK。它拥有 JRE 所拥有的的一切，还有编译器（javac）和 工具（javadoc 和 jdb）。它能够创建和编译程序。</p><p>JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括Java虚拟机（JVM），Java类库，Java 命令和 其它的一些基础构件。但是，它不能用于创建新程序。</p><p>如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。</p><h2 id="4-Oracle-JDK-和-OpenJDK-的对比"><a href="#4-Oracle-JDK-和-OpenJDK-的对比" class="headerlink" title="4. Oracle JDK 和 OpenJDK 的对比"></a>4. Oracle JDK 和 OpenJDK 的对比</h2><p>对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的 HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle 工程师维护。</p><blockquote><p>问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？</p><p>答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东⻄，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。</p></blockquote><p><strong>总结：</strong></p><ol><li>Oracle JDK 大概每6个月发一次主要版本，而OpenJDK 版本大概每三个月发布一次。</li><li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的。</li><li>Oracle JDK 比 OpenJDK更稳定。两者代码几乎相同，但是Oracle有更多的类额一些错误修复。</li><li>在 响应性 和 JVM 性能方面，Oracle JDK 与 OpenJDK相比提供了更好的性能；</li><li>Oracle JDK不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK是根据二进制代码许可协议获得许可，而 OpenJDK 根据GPL v2 许可获得许可。</li></ol><h2 id="5-Java-和-C-的区别"><a href="#5-Java-和-C-的区别" class="headerlink" title="5. Java 和 C ++ 的区别"></a>5. Java 和 C ++ 的区别</h2><ul><li>都是面向对象的语言，都支持 封装、继承、多态</li><li>Java 不提供指针来直接访问内存，程序内存更加安全</li><li>Java 的类是单继承的，C ++ 支持多重继承；虽然Java 的类不可以多继承，但是接口可以多继承</li><li>Java 有自动内存管理机制，不需要程序员手动释放无用内存</li><li>在 C 语言中，字符串或字符数组最后都会有一个额外额字符“\0”来表示结束，但是，Java中没有结束符这一概念。 （具体参考：<a href="https://blog.csdn.net/sszgg2006/article/details/49148189%EF%BC%89">https://blog.csdn.net/sszgg2006/article/details/49148189）</a></li></ul><h2 id="6-什么是-Java-程序的主类？应用程序和小程序的主类有什么不同？"><a href="#6-什么是-Java-程序的主类？应用程序和小程序的主类有什么不同？" class="headerlink" title="6. 什么是 Java 程序的主类？应用程序和小程序的主类有什么不同？"></a>6. 什么是 Java 程序的主类？应用程序和小程序的主类有什么不同？</h2><p>一个程序中可以有多个类，但只有一个类是主类。在Java应用程序中，这个主类的类是包含在main() 方法的类中。而在Java小程序中，这个主类是一个继承自系统类 JApplet 或 Applet 的子类。应用程序的主类不一定要求是public类，但小程序的主类要求必须是public类。主类是Java程序执行的入口点。</p><h2 id="7-Java应用程序和小程序之间有哪些差别？"><a href="#7-Java应用程序和小程序之间有哪些差别？" class="headerlink" title="7. Java应用程序和小程序之间有哪些差别？"></a>7. Java应用程序和小程序之间有哪些差别？</h2><p>简单来说应用程序是从主线程启动（也就是main（）方法）。applet小程序没有main（）方法，主要是嵌在浏览器页面上运行（调用init（）或者run（）来启动），嵌入浏览器这点跟flash的小游戏类似。</p><h2 id="8-字符型常量和字符串常量的区别？"><a href="#8-字符型常量和字符串常量的区别？" class="headerlink" title="8. 字符型常量和字符串常量的区别？"></a>8. 字符型常量和字符串常量的区别？</h2><ol><li>形式上：字符常量是单引号引起的一个字符；字符串常量是双引号引起的若干个字符</li><li>含义上：字符常量相当于一个整型值（ASCII 值），可以参加表达式运算；字符串常量代表一个地址值（该字符串在内存中存放的位置）</li><li>占内存大小：字符常量只占2个字节；字符串常量占若干个字节（注意：char在Java中占两个字节）</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200829155706.png" alt="image-20200829094333888"></p><h2 id="9-构造器Constructor-是否可以被-override？"><a href="#9-构造器Constructor-是否可以被-override？" class="headerlink" title="9. 构造器Constructor 是否可以被 override？"></a>9. 构造器Constructor 是否可以被 override？</h2><p>Constructor 不能被 Override（重写），但是可以overload（重载），所以你可以看到一个类中有多个构造函数的情况。</p><h2 id="10-重载和重写的区别"><a href="#10-重载和重写的区别" class="headerlink" title="10. 重载和重写的区别"></a>10. 重载和重写的区别</h2><ul><li>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理</li><li>重写就是当子类继承父类的相同方法，输入数据一样，但是要做出有别于父类的响应时，就要覆盖父类方法</li></ul><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，也可以抛出不同的异常。</p><p>下面是《Java 核心技术》对重载这个概念的介绍：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200829155707.png" alt="image-20200829095146697"></p><p><strong>综上所述：重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。</strong></p><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><p>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写</p><ol><li>参数列表必须完全与被重写的方法相同，否则不能称其为重写而是重载</li><li>返回的类型必须一直与被重写的方法的返回类型相同，否则不能称其为重写而是重载</li><li>访问修饰符的限制一定要大于等于被重写方法的访问修饰符（public&gt;protected&gt;default&gt;private）</li><li>重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常</li><li>如果父类方法访问修饰符为 private/final/static，则子类就不能重写该方法，但是被static修饰的方法能够被再次声明</li><li>构造方法无法被重写</li></ol><p><strong>综上：重写就是子类对父类的重新改造，外部样子不能改变，内部逻辑可以改变。</strong></p><table><thead><tr><th>区别</th><th>重载</th><th>重写</th></tr></thead><tbody><tr><td>发生范围</td><td>同一个类</td><td>子类中</td></tr><tr><td>参数列表</td><td>必须修改</td><td>一定不能修改</td></tr><tr><td>返回类型</td><td>可修改</td><td>一定不能修改</td></tr><tr><td>异常</td><td>可修改</td><td>可以减少或删除，一定不能抛出新的异常或更广的异常</td></tr><tr><td>访问修饰符</td><td>可修改</td><td>一定不能做更严格的限制（可以降低限制）</td></tr><tr><td>发生阶段</td><td>编译期</td><td>运行期</td></tr></tbody></table><h2 id="11-Java面向对象编程三大特性：封装、继承、多态"><a href="#11-Java面向对象编程三大特性：封装、继承、多态" class="headerlink" title="11. Java面向对象编程三大特性：封装、继承、多态"></a>11. Java面向对象编程三大特性：封装、继承、多态</h2><h3 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h3><p>封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。</p><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，我们能够很方便的复用以前的代码。</p><p><strong>注意：</strong></p><ol><li>子类拥有父类对象所有的属性和方法(包括私有属性和私有方法)，但是父类的私有属性和方法，子类是无法访问，只是拥有；</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展；</li><li>子类可以用自己的方法实现父类的方法。</li></ol><h3 id="多态："><a href="#多态：" class="headerlink" title="多态："></a>多态：</h3><p>多态就是同一个行为具有多个不同表现形式或形态的能力；</p><p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://www.runoob.com/wp-content/uploads/2013/12/dt-java.png" alt="img"></p><p><strong>多态的优点：</strong></p><ol><li>消除类型之间的耦合关系；</li><li>可替换性；</li><li>可扩充性；</li><li>接口性；</li><li>灵活性；</li><li>简化性；</li></ol><p><strong>多态存在的三个必要条件：</strong></p><ol><li>继承；</li><li>重写；</li><li>父类引用指向子类对象</li></ol><p><strong>在Java中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中的同一方法）。</strong></p><h2 id="12-String-StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？"><a href="#12-String-StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？" class="headerlink" title="12. String, StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？"></a>12. String, StringBuffer和StringBuilder的区别是什么？String为什么是不可变的？</h2><p><strong>可变性：</strong></p><p>简单的来说：String 类 中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>,所以String对象是不可变的。</p><blockquote><p>注：Java 9 之后，String类的实现改用 byte 数组存储字符串</p><p><code>private final byte value[]</code></p></blockquote><p>而 StringBuffer 和 StringBuilder 都继承自 AbstractStringBuilder 类，在AbstactStringBuilder 中也是使用字符数组保存字符串<code>char value[]</code>,但是没有用 final 关键字修饰，所以这两种对象是可变的。</p><p><strong>线程安全性：</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。</p><p>AbstactStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以线程时安全的。StringBuilder 并没有对方法进行加同步锁，所以是 非线程安全的。</p><p><strong>性能：</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的String对象。StringBuffer 每次都会对 StringBuffer 本身进行操作，而不是生成新的对象并改变对象引用。相同条件下，使用 StringBuilder 相比 使用 StringBuffer 仅能获得10% ~ 15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>对于三者使用的总结：</strong></p><ol><li>操作少量的数据：适用 String</li><li>单线程操作字符串缓冲区下操作大量数据：适用 StringBuilder</li><li>多线程操作字符串缓冲区下操作大量数据：适用 StringBuffer</li></ol><hr><h2 id="13-自动拆箱和装箱"><a href="#13-自动拆箱和装箱" class="headerlink" title="13. 自动拆箱和装箱"></a>13. 自动拆箱和装箱</h2><ul><li>装箱：将基本类型用它们对应的引用类型包装起来；</li><li>拆箱：将包装类型转换为基本数据类型</li></ul><p>基本数据类型对应的包装器类型：</p><table><thead><tr><th>int (4字节)</th><th>Integer</th></tr></thead><tbody><tr><td>byte (1字节)</td><td>Byte</td></tr><tr><td>short （2字节）</td><td>Short</td></tr><tr><td>long（8字节）</td><td>Long</td></tr><tr><td>float（4字节）</td><td>Float</td></tr><tr><td>double（8字节）</td><td>Double</td></tr><tr><td>char （2字节）</td><td>Character</td></tr><tr><td>boolean（未定）</td><td>Boolean</td></tr></tbody></table><p><strong>装箱和拆箱是如何实现的</strong>？</p><p>在装箱的时候自动调用的是Integer的valueOf(int)方法。而在拆箱的时候自动调用的是Integer的intValue方法。其他的也类似，比如Double、Character</p><p>因此可以用一句话总结<strong>装箱和拆箱的实现过程</strong>：</p><p>装箱过程是通过调用包装器的valueOf方法实现的，而拆箱过程是通过调用包装器的 xxxValue方法实现的。（xxx代表对应的基本数据类型）。</p><p>关于装箱和拆箱的更多内容以及面试必记，请访问：<a href="https://www.cnblogs.com/dolphin0520/p/3780005.html">深入解剖Java中的装箱和拆箱</a></p><hr><h2 id="14-在一个静态方法内调用一个非静态成员为什么是非法的？"><a href="#14-在一个静态方法内调用一个非静态成员为什么是非法的？" class="headerlink" title="14. 在一个静态方法内调用一个非静态成员为什么是非法的？"></a>14. 在一个静态方法内调用一个非静态成员为什么是非法的？</h2><p>由于静态方法可以不通过对象调用，因此在静态方法里面，不能调用其他非静态变量，也不可以访问非静态变量成员。</p><h2 id="15-在-Java-中定义一个不做事且没有任何参数的构造方法的作用"><a href="#15-在-Java-中定义一个不做事且没有任何参数的构造方法的作用" class="headerlink" title="15. 在 Java 中定义一个不做事且没有任何参数的构造方法的作用"></a>15. 在 Java 中定义一个不做事且没有任何参数的构造方法的作用</h2><p>Java 程序在执行子类的构造方法之前，如果没有用<code>super()</code>来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用<code>super()</code>来调用父类中特定的构造方法，则编译时将发生错误，因为Java程序在父类中找不到没有参数的构造方法可供执行。</p><p>解决方法是：在父类中加上一个不做事且没有任何参数的构造方法。</p><h2 id="16-import-java-和-javax-有什么区别？"><a href="#16-import-java-和-javax-有什么区别？" class="headerlink" title="16. import java 和 javax 有什么区别？"></a>16. import java 和 javax 有什么区别？</h2><p>刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。然而随着时间的推移，javax 逐渐地扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java包确实太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准 API 的一部分。</p><p>所以，实际上 java 和 javax 没有区别。这都是一个名字。</p><h2 id="17-接口和抽象类的区别是什么？"><a href="#17-接口和抽象类的区别是什么？" class="headerlink" title="17. 接口和抽象类的区别是什么？"></a>17. 接口和抽象类的区别是什么？</h2><ol><li>接口的方法默认是 public，所有方法在接口不能有实现（Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法</li><li>接口中除了 static,final 变量，不能有其他变量，而抽象类中则不一定</li><li>一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends 关键字扩展多个接口</li><li>接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用private关键字修饰）</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。</li></ol><blockquote><p>注：</p><ol><li>在 JDK 8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。</li><li>jdk 9 的接口被允许定义私有方法。</li></ol></blockquote><p>总结一下 jdk7 ~ jdk 9，Java中接口概念的变化：</p><ol><li>在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。</li><li>jdk8 的时候接口可以有默认方法和静态方法功能。</li><li>Jdk 9 在接口中引入了私有方法和私有静态方法。</li></ol><h2 id="18-成员变量与局部变量的区别有哪些？"><a href="#18-成员变量与局部变量的区别有哪些？" class="headerlink" title="18. 成员变量与局部变量的区别有哪些？"></a>18. 成员变量与局部变量的区别有哪些？</h2><ol><li><p><strong>定义的位置不一样</strong></p><p> 局部变量：写在方法内部</p><p> 成员变量：写在方法外部，直接写在类当中</p></li><li><p><strong>作用范围不一样</strong></p><p> 局部变量：只有方法当中才可以使用，出了方法就不能再用</p><p> 成员变量：整个类全都可以通用。</p></li><li><p><strong>默认值不一样</strong></p><p> 局部变量：没有默认值，如果想要使用，必须手动进行赋值</p><p> 成员变量：如果没有赋值，会有默认值，规则和数组一样</p></li><li><p><strong>内存的位置不一样</strong></p><p> 局部变量：位于栈内存</p><p> 成员变量，位于堆内存。</p></li><li><p><strong>生命周期不一样</strong></p><p> 局部变量：随着方法进栈而诞生，随着方法出栈而死亡。</p><p> 成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失。</p></li></ol><h2 id="19-创建一个对象用什么运算符？对象实体和对象引用有何不同？"><a href="#19-创建一个对象用什么运算符？对象实体和对象引用有何不同？" class="headerlink" title="19. 创建一个对象用什么运算符？对象实体和对象引用有何不同？"></a>19. 创建一个对象用什么运算符？对象实体和对象引用有何不同？</h2><p>new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。</p><h2 id="20-什么是方法的返回值？返回值在类的方法里的作用是什么？"><a href="#20-什么是方法的返回值？返回值在类的方法里的作用是什么？" class="headerlink" title="20. 什么是方法的返回值？返回值在类的方法里的作用是什么？"></a>20. 什么是方法的返回值？返回值在类的方法里的作用是什么？</h2><p>方法返回值：是指我们获取到的某个方法体中的代码执行后产生的结果（前提是该方法可能产生结果）；</p><p>返回值的作用：接收出结果，使得它可以用于其他的操作。</p><h2 id="21-一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？"><a href="#21-一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？" class="headerlink" title="21. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？"></a>21. 一个类的构造方法的作用是什么？若一个类没有声明构造方法，该程序能正确执行吗？为什么？</h2><p>主要作用是完成对类对象的初始化工作；</p><p>可以执行；</p><p>因为一个类即使没有声明构造方法，也会有默认的不带参数的构造方法。</p><h2 id="22-构造方法有哪些特性？"><a href="#22-构造方法有哪些特性？" class="headerlink" title="22. 构造方法有哪些特性？"></a>22. 构造方法有哪些特性？</h2><ol><li>名字和类名相同；</li><li>没有返回值，但不能用void声明构造函数；</li><li>生成类的对象时自动处理，无需调用。</li></ol><h2 id="23-静态方法和实例方法有何不同？"><a href="#23-静态方法和实例方法有何不同？" class="headerlink" title="23. 静态方法和实例方法有何不同？"></a>23. 静态方法和实例方法有何不同？</h2><ol><li>在外部调用静态方法时，可以使用“类名.方法名”的方式，也可以使用“对象名.方法名”的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。</li><li>静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。</li></ol><h2 id="24-对象的相等与指向它们的引用相等，两者有什么不同？"><a href="#24-对象的相等与指向它们的引用相等，两者有什么不同？" class="headerlink" title="24. 对象的相等与指向它们的引用相等，两者有什么不同？"></a>24. 对象的相等与指向它们的引用相等，两者有什么不同？</h2><p>对象相等，比的是内存中存放的内容是否相等；</p><p>而引用相等，比较的是他们指向的内存地址是否相等。</p><h2 id="25-在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？"><a href="#25-在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？" class="headerlink" title="25. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？"></a>25. 在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？</h2><p>帮助子类做初始化工作。</p>]]></content>
      
      
      <categories>
          
          <category> Java面试总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java面试总结 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈这半个月断更以及接下来的计划</title>
      <link href="/2020/08/28/%E8%B0%88%E8%B0%88%E8%BF%99%E5%8D%8A%E4%B8%AA%E6%9C%88%E6%96%AD%E6%9B%B4%E4%BB%A5%E5%8F%8A%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9A%84%E8%AE%A1%E5%88%92/"/>
      <url>/2020/08/28/%E8%B0%88%E8%B0%88%E8%BF%99%E5%8D%8A%E4%B8%AA%E6%9C%88%E6%96%AD%E6%9B%B4%E4%BB%A5%E5%8F%8A%E6%8E%A5%E4%B8%8B%E6%9D%A5%E7%9A%84%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="这大半个月做了什么？"><a href="#这大半个月做了什么？" class="headerlink" title="这大半个月做了什么？"></a>这大半个月做了什么？</h2><p>不知不觉，已经断更半个多月了，这半个月主要是 “备战考试”，实则 打酱油不想学习</p><h2 id="接下来要干什么？"><a href="#接下来要干什么？" class="headerlink" title="接下来要干什么？"></a>接下来要干什么？</h2><p>8月就要这么过去了，9月就要来临，一切都该步入正轨了，那么接下来的这个一个月，就要开言归正传，为接下来找工作做准备，因此呢，接下来，预计<strong>一个月</strong>的时间，<strong>背面试题</strong>。</p><h2 id="近期谈悟："><a href="#近期谈悟：" class="headerlink" title="近期谈悟："></a>近期谈悟：</h2><p>谈谈最近吧，可以说是大起大悲，2020年对我来说，开端很好，可是1月下旬到昨天，对我来说都是可悲的，不过没关系，相信时间可以冲淡一切，年初都是那么美好的，那我相信从今天起，自己的努力不会亏待自己，加油吧，只有提高自己，才不会那么被动！</p><p>​                                                                                                                            </p><p>​                                                                                                                    于 2020-8-28 23:19:09 </p>]]></content>
      
      
      <categories>
          
          <category> 谈悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谈悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>声明</title>
      <link href="/2020/08/28/%E5%90%8C%E6%AD%A5%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84%E5%A3%B0%E6%98%8E/"/>
      <url>/2020/08/28/%E5%90%8C%E6%AD%A5%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9A%84%E5%A3%B0%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=3hywy20d32yoo">https://cloud.tencent.com/developer/support-plan?invite_code=3hywy20d32yoo</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat &amp; Servlet的学习</title>
      <link href="/2020/08/28/Tomcat&amp;Servlet/"/>
      <url>/2020/08/28/Tomcat&amp;Servlet/</url>
      
        <content type="html"><![CDATA[<h1 id="web相关概念回顾："><a href="#web相关概念回顾：" class="headerlink" title="web相关概念回顾："></a>web相关概念回顾：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 软件架构</span><br><span class="line">    1. C&#x2F;S：客户端&#x2F;服务器端</span><br><span class="line">    2. B&#x2F;S：浏览器&#x2F;服务器端</span><br><span class="line"></span><br><span class="line">2. 资源分类</span><br><span class="line">    1. 静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析</span><br><span class="line">        * 如： html,css,JavaScript</span><br><span class="line">    2. 动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器</span><br><span class="line">        * 如：servlet&#x2F;jsp,php,asp....</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 网络通信三要素</span><br><span class="line">    1. IP：电子设备(计算机)在网络中的唯一标识。</span><br><span class="line">    2. 端口：应用程序在计算机中的唯一标识。 0~65536</span><br><span class="line">    3. 传输协议：规定了数据传输的规则</span><br><span class="line">        1. 基础协议：</span><br><span class="line">            1. tcp:安全协议，三次握手。 速度稍慢</span><br><span class="line">            2. udp：不安全协议。 速度快</span><br></pre></td></tr></table></figure><h1 id="web服务器软件："><a href="#web服务器软件：" class="headerlink" title="web服务器软件："></a>web服务器软件：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 服务器：安装了服务器软件的计算机</span><br><span class="line">* 服务器软件：接收用户的请求，处理请求，做出响应</span><br><span class="line">* web服务器软件：接收用户的请求，处理请求，做出响应</span><br><span class="line">    * 在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</span><br><span class="line">    * web容器</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 常见的Java相关的web服务器软件：</span><br><span class="line">    * webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">    * webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">    * JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">    * Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet&#x2F;jsp。开源的，免费的。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范。</span><br></pre></td></tr></table></figure><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="1-安装-amp-卸载-amp-启动"><a href="#1-安装-amp-卸载-amp-启动" class="headerlink" title="1. 安装&amp;卸载&amp;启动"></a>1. 安装&amp;卸载&amp;启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 下载：http:&#x2F;&#x2F;tomcat.apache.org&#x2F;</span><br><span class="line">2. 安装：解压压缩包即可。</span><br><span class="line">        * 注意：安装目录建议不要有中文和空格</span><br><span class="line">3. 卸载：删除目录就行了</span><br><span class="line">4. 启动：</span><br><span class="line">        * bin&#x2F;startup.bat ,双击运行该文件即可</span><br><span class="line">        * 访问：浏览器输入：http:&#x2F;&#x2F;localhost:8080 回车访问自己</span><br><span class="line">                          http:&#x2F;&#x2F;别人的ip:8080 访问别人</span><br></pre></td></tr></table></figure><h2 id="2-启动问题分析："><a href="#2-启动问题分析：" class="headerlink" title="2. 启动问题分析："></a>2. 启动问题分析：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 可能遇到的问题：</span><br><span class="line">            1. 黑窗口一闪而过：</span><br><span class="line">                * 原因： 没有正确配置JAVA_HOME环境变量</span><br><span class="line">                * 解决方案：正确配置JAVA_HOME环境变量</span><br><span class="line"></span><br><span class="line">            2. 启动报错：</span><br><span class="line">                1. 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</span><br><span class="line">                    * netstat -ano</span><br><span class="line">                2. 温柔：修改自身的端口号</span><br><span class="line">                    * conf&#x2F;server.xml</span><br><span class="line">                    * &lt;Connector port&#x3D;&quot;8888&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">                       connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">                       redirectPort&#x3D;&quot;8445&quot; &#x2F;&gt;</span><br><span class="line">            * 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</span><br><span class="line">                    * 好处：在访问时，就不用输入端口号</span><br></pre></td></tr></table></figure><h2 id="3-关闭："><a href="#3-关闭：" class="headerlink" title="3. 关闭："></a>3. 关闭：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 正常关闭：</span><br><span class="line">            方式1： bin&#x2F;shutdown.bat</span><br><span class="line">            方式2： ctrl+c</span><br><span class="line">        2. 强制关闭：</span><br><span class="line">            * 点击启动窗口的×</span><br></pre></td></tr></table></figure><h2 id="4-配置：部署项目的方式："><a href="#4-配置：部署项目的方式：" class="headerlink" title="4. 配置：部署项目的方式："></a>4. 配置：部署项目的方式：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 部署项目的方式：</span><br><span class="line">            1. 直接将项目放到webapps目录下即可。</span><br><span class="line">                * &#x2F;hello：项目的访问路径--&gt;虚拟目录</span><br><span class="line">                * 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</span><br><span class="line">                    * war包会自动解压缩</span><br><span class="line"></span><br><span class="line">            2. 配置conf&#x2F;server.xml文件</span><br><span class="line">                在&lt;Host&gt;标签体中配置</span><br><span class="line">                &lt;Context docBase&#x3D;&quot;D:\hello&quot; path&#x3D;&quot;&#x2F;hehe&quot; &#x2F;&gt;</span><br><span class="line">                * docBase:项目存放的路径</span><br><span class="line">                * path：虚拟目录</span><br><span class="line"></span><br><span class="line">            3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</span><br><span class="line">                &lt;Context docBase&#x3D;&quot;D:\hello&quot; &#x2F;&gt;</span><br><span class="line">                * 虚拟目录：xml文件的名称</span><br></pre></td></tr></table></figure><h2 id="5-静态项目和动态-项目："><a href="#5-静态项目和动态-项目：" class="headerlink" title="5. 静态项目和动态 项目："></a>5. 静态项目和动态 项目：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 目录结构</span><br><span class="line">                * java动态项目的目录结构：</span><br><span class="line">                    -- 项目的根目录</span><br><span class="line">                        -- WEB-INF目录：</span><br><span class="line">                            -- web.xml：web项目的核心配置文件</span><br><span class="line">                            -- classes目录：放置字节码文件的目录</span><br><span class="line">                            -- lib目录：放置依赖的jar包</span><br></pre></td></tr></table></figure><hr><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：运行在服务器端的小程序</span><br><span class="line">    * Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则</span><br><span class="line">    * 将来我们自定义一个类，实现Servlet接口，复写方法</span><br></pre></td></tr></table></figure><h2 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2. 快速入门："></a>2. 快速入门：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line">    1.创建JavaEE项目</span><br><span class="line">    2.定义一个类，实现Servlet接口</span><br><span class="line">    3.实现接口中的抽象方法</span><br><span class="line">    4.配置Servlet</span><br><span class="line">        在web.xml里面配置</span><br><span class="line">    -----------------------------------------------</span><br><span class="line">    //配置Servlet</span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>ServletDemo01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>//里面是文件路径</span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo01<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/22 - 11:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo01</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供服务的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-执行原理："><a href="#3-执行原理：" class="headerlink" title="3. 执行原理："></a>3. 执行原理：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径；</span><br><span class="line">2.查找web.xml文件，是否有对应的&lt;url-pattern&gt;</span><br><span class="line">3.如果有，则在找到对应的&lt;servlet-class&gt;全类名</span><br><span class="line">4.tomcat会将字节码文件加载进内存，并且创建其对象</span><br><span class="line">5.调用其方法</span><br></pre></td></tr></table></figure><h2 id="4-Servlet中的生命周期："><a href="#4-Servlet中的生命周期：" class="headerlink" title="4. Servlet中的生命周期："></a>4. Servlet中的生命周期：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.被创建：执行init方法，只执行一次；</span><br><span class="line">    * Serclet什么时候被创建？</span><br><span class="line">        * 默认情况下，第一次被访问时，Servlet被创建</span><br><span class="line">        * 可以配置执行Servlet的创建时机。</span><br><span class="line">            * 在&lt;servlet&gt;标签下配置：</span><br><span class="line">                1.第一次被访问时，创建</span><br><span class="line">                    * &lt;load-on-startup&gt;的值为负数</span><br><span class="line">                2.在服务器启动时，创建：</span><br><span class="line">                    * &lt;load-on-startup&gt;的值为0或正整数</span><br><span class="line">    * Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</span><br><span class="line">        * 多个用户同时访问时，可能存在线程安全问题</span><br><span class="line">        * 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对其修改值</span><br><span class="line">        </span><br><span class="line">2.提供服务：执行service方法，执行多次</span><br><span class="line">    * 每次访问Servlet时，Servlet方法都会被调用一次</span><br><span class="line">    </span><br><span class="line">3.被销毁：执行destroy方法，只执行一次</span><br><span class="line">    * Servlet被销毁时执行。服务器关闭时，Servlet被销毁</span><br><span class="line">    * 只有服务器正常关闭时，才会执行destroy方法；</span><br><span class="line">    * destroy方法在Servlet被销毁之前执行，一般用于释放资源</span><br></pre></td></tr></table></figure><h2 id="5-Servlet-3-0"><a href="#5-Servlet-3-0" class="headerlink" title="5. Servlet 3.0"></a>5. Servlet 3.0</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 好处：</span><br><span class="line">    * 支持注解配置。可以不需要web.xml了。</span><br><span class="line">    </span><br><span class="line">* 步骤：</span><br><span class="line">    <span class="number">1.</span>创建JavaEE项目，选择Servlet的版本<span class="number">3.0</span>以上，可以不创建web.xml</span><br><span class="line">    <span class="number">2.</span>定义一个类，实现Servlet接口</span><br><span class="line">    <span class="number">3.</span>复写方法</span><br><span class="line">    <span class="number">4.</span>在类上商用<span class="meta">@WebServlet</span>注解，进行配置</span><br><span class="line">        * <span class="meta">@WebServlet(&quot;资源访问路径&quot;)</span></span><br><span class="line">        </span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/22 - 18:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet3.0来啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Servlet体系结构："><a href="#6-Servlet体系结构：" class="headerlink" title="6. Servlet体系结构："></a>6. Servlet体系结构：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Servlet -- 接口</span><br><span class="line">    |</span><br><span class="line">GebericServlet -- 抽象类</span><br><span class="line">    |</span><br><span class="line">HttpServlet -- 抽象类</span><br><span class="line"></span><br><span class="line">* GenericServlet：将Servlet接口中 其他的方法做了默认空实现，只将service()方法作为抽象</span><br><span class="line">    * 将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</span><br><span class="line">    </span><br><span class="line">* HttpServlet：对http协议的一种封装，简化操作</span><br><span class="line">    1.定义类继承HttpServlet</span><br><span class="line">    2.复写doGet&#x2F;doPost方法</span><br></pre></td></tr></table></figure><h2 id="7-Servlet相关配置："><a href="#7-Servlet相关配置：" class="headerlink" title="7. Servlet相关配置："></a>7. Servlet相关配置：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* urlpartten:Servlet访问路径：</span><br><span class="line">    <span class="number">1.</span>一个Servlet可以定义多个访问路径：<span class="meta">@WebServlet(&#123;&quot;/a&quot;,&quot;/b&quot;,&quot;/c&quot;&#125;)</span></span><br><span class="line">    <span class="number">2.</span>路径定义规则：</span><br><span class="line">        <span class="number">1.</span>/xxx</span><br><span class="line">        <span class="number">2.</span>/xxx/xxx：多层路径，目录结构</span><br><span class="line">        <span class="number">3.</span>*.<span class="keyword">do</span></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/22 - 21:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">            </span><br><span class="line"><span class="comment">//@WebServlet(&#123;&quot;/a&quot;,&quot;/b&quot;,&quot;/c&quot;&#125;)</span></span><br><span class="line"><span class="comment">//@WebServlet(&quot;/demo3&quot;)</span></span><br><span class="line"><span class="comment">//@WebServlet(&quot;/demo3/d/e&quot;)</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;*.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="IDEA和tomcat的相关配置："><a href="#IDEA和tomcat的相关配置：" class="headerlink" title="IDEA和tomcat的相关配置："></a>IDEA和tomcat的相关配置：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. IDEA会为每一个tomcat部署的项目单独建立一份配置文件</span><br><span class="line">    * 查看控制台的log：Using CATALINA_BASE:   &quot;C:\Users\NiuLinXuan\.IntelliJIdea2019.3\system\tomcat\Tomcat_9_0_34_JavaWeb_Demo_3</span><br><span class="line">    </span><br><span class="line">2. 工作空间项目和tomcat部署的web项目：</span><br><span class="line">    * tomcat真正访问的是&quot;tomcat部署的web项目&quot;，&quot;tomcat部署的web项目&quot;对应着&quot;工作空间项目&quot;的web目录下的所有资源</span><br><span class="line">    * WEB-INF目录下的资源不能被浏览器直接访问</span><br><span class="line">3.断点调试：使用&quot;小虫子&quot;(启动按钮旁)启动dubug启动</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Tomcat </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话技术 &amp; JSP 的学习</title>
      <link href="/2020/08/28/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF&amp;jsp/"/>
      <url>/2020/08/28/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF&amp;jsp/</url>
      
        <content type="html"><![CDATA[<h1 id="会话技术："><a href="#会话技术：" class="headerlink" title="会话技术："></a>会话技术：</h1><h2 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 会话：一次会话中包含多次请求和响应。</span><br><span class="line">    * 一次会话：浏览器第一次给服务区资源发送请求，会话建立，知道由一方断开为止。</span><br></pre></td></tr></table></figure><h2 id="2-功能："><a href="#2-功能：" class="headerlink" title="2. 功能："></a>2. 功能：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在一次会话的范围内的多次请求间，共享数据</span><br></pre></td></tr></table></figure><h2 id="3-方式："><a href="#3-方式：" class="headerlink" title="3. 方式："></a>3. 方式：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.客户端会话技术：Cookie</span><br><span class="line">2.服务器端会话技术：Session</span><br></pre></td></tr></table></figure><h1 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">客户端会话技术，将数据保存到客户端</span><br></pre></td></tr></table></figure><h2 id="2-使用步骤："><a href="#2-使用步骤：" class="headerlink" title="2. 使用步骤："></a>2. 使用步骤：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 创建Cookie对象，绑定数据</span><br><span class="line">    * new Cookie(String name,String value)</span><br><span class="line">2. 发送Cookie对象</span><br><span class="line">    * response.addCookie(Cookie cookie)</span><br><span class="line">3. 获取Cookie，拿到数据(其实是一个数组)</span><br><span class="line">    * Cookie[] request.getCookies()</span><br></pre></td></tr></table></figure><ul><li><p>代码实现：</p><ul><li><p>发送端：CookieDemo1.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookieDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建Cookie对象，绑定数据</span></span><br><span class="line">        Cookie c = <span class="keyword">new</span> Cookie(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//2.发送Cookie对象</span></span><br><span class="line">        response.addCookie(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接收端：CookieDemo2.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookieDemo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//3. 获取Cookie，拿到数据</span></span><br><span class="line">        Cookie[] cs = request.getCookies();</span><br><span class="line">        <span class="comment">//遍历Cookies</span></span><br><span class="line">        <span class="keyword">if</span> (cs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie c : cs) &#123;</span><br><span class="line">                String name = c.getName();</span><br><span class="line">                String value = c.getValue();</span><br><span class="line">                System.out.println(name + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-实现原理："><a href="#3-实现原理：" class="headerlink" title="3. 实现原理："></a>3. 实现原理：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 基于响应头set-cookie和请求头cookie实现</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\NiuLinXuan\AppData\Roaming\Typora\typora-user-images\image-20200426081734370.png" alt="image-20200426081734370"></p><h2 id="4-Cookie的细节："><a href="#4-Cookie的细节：" class="headerlink" title="4. Cookie的细节："></a>4. Cookie的细节：</h2><h3 id="1-一次可不可以发送多个cookie？"><a href="#1-一次可不可以发送多个cookie？" class="headerlink" title="1. 一次可不可以发送多个cookie？"></a>1. 一次可不可以发送多个cookie？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 可以</span><br><span class="line">* 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建Cookie对象，绑定数据</span></span><br><span class="line">Cookie c1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">Cookie c2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="comment">//2.发送数据</span></span><br><span class="line">response.addCookie(c1);</span><br><span class="line">response.addCookie(c2);</span><br></pre></td></tr></table></figure><h3 id="2-cookie在浏览器中保存多长时间？"><a href="#2-cookie在浏览器中保存多长时间？" class="headerlink" title="2. cookie在浏览器中保存多长时间？"></a>2. cookie在浏览器中保存多长时间？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.默认情况下，当浏览器关闭后，Cookie数据被销毁</span><br><span class="line">2.持久化存储：</span><br><span class="line">    * SetMaxAge(int seconds)</span><br><span class="line">        1.整数：将Cookie数据写到硬盘的文件中，持久化存储，cookie存货时间多少秒</span><br><span class="line">        2.负数：默认值</span><br><span class="line">        3.零：删除cookie信息</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookieDemo4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建Cookie对象，添加数据</span></span><br><span class="line">        Cookie c = <span class="keyword">new</span> Cookie(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.设置cookie存活时间</span></span><br><span class="line">       <span class="comment">// c.setMaxAge(30);//设置cookie存活时间为30秒，30秒后自动销毁</span></span><br><span class="line"><span class="comment">//        c.setMaxAge(-50); //默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        c.setMaxAge(500);</span></span><br><span class="line">        c.setMaxAge(<span class="number">0</span>);<span class="comment">//删除cookie信息</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.发送数据</span></span><br><span class="line">        response.addCookie(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-cookie能不能存中文？"><a href="#3-cookie能不能存中文？" class="headerlink" title="3. cookie能不能存中文？"></a>3. cookie能不能存中文？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 在tomcat 8 之前，cookie中不能直接存储中文数据</span><br><span class="line">    * 需要将中文数据转码---一般采用URL编码(%E3)</span><br><span class="line">* 在tomcat 8 之后，cookie支持中文数据，特殊字符还是不支持，建议使用URL编码存储，URL解码解析</span><br></pre></td></tr></table></figure><h3 id="4-cookie共享问题："><a href="#4-cookie共享问题：" class="headerlink" title="4. cookie共享问题："></a>4. cookie共享问题：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.默认情况下Cookie不能共享</span><br><span class="line"></span><br><span class="line">* setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</span><br><span class="line">    * 如果要共享，则可以将path设置为&quot;&#x2F;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.不同的tomcat服务器间cookie共享问题：</span><br><span class="line">    * setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</span><br><span class="line">        * setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中的cookie可以共享</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建Cookie对象，添加数据</span></span><br><span class="line">      Cookie c = <span class="keyword">new</span> Cookie(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//设置cookie范围：</span></span><br><span class="line">      c.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//2.发送数据</span></span><br><span class="line">      response.addCookie(c);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="5-Cookie的特点和作用："><a href="#5-Cookie的特点和作用：" class="headerlink" title="5. Cookie的特点和作用："></a>5. Cookie的特点和作用：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.cookie存储数据在客户端浏览器</span><br><span class="line">2.浏览器对于单个cookie的大小有限制(4kb),以及对同一个域名下的总cookie数量也有限制(20个)</span><br><span class="line"></span><br><span class="line">* 作用：</span><br><span class="line">    1.cookie一般用于存储少量的不太敏感的数据；</span><br><span class="line">    2.在不登录的情况下，完成服务器对客户端的身份识别</span><br></pre></td></tr></table></figure><h2 id="案例：记住上一次时间"><a href="#案例：记住上一次时间" class="headerlink" title="案例：记住上一次时间"></a>案例：记住上一次时间</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 需求：</span><br><span class="line">        1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</span><br><span class="line">        2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</span><br><span class="line"></span><br><span class="line">    2. 分析：</span><br><span class="line">        1. 可以采用Cookie来完成</span><br><span class="line">        2. 在服务器中的Servlet判断是否有一个名为lastTime的cookie</span><br><span class="line">            1. 有：不是第一次访问</span><br><span class="line">                1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20</span><br><span class="line">                2. 写回Cookie：lastTime&#x3D;2018年6月10日11:50:01</span><br><span class="line">            2. 没有：是第一次访问</span><br><span class="line">                1. 响应数据：您好，欢迎您首次访问</span><br><span class="line">                2. 写回Cookie：lastTime&#x3D;2018年6月10日11:50:01</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/cookieTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取响应的消息体的数据格式以及编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取所有Cookie对象</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//没有cookie为lastTime</span></span><br><span class="line">        <span class="comment">//2.遍历</span></span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//3.获取Cookie的名称</span></span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                <span class="comment">//4.判断名称是否是：lastTime</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;lastTime&quot;</span>.equals(name)) &#123;</span><br><span class="line">                    <span class="comment">//有该cookie，不是第一次访问</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置Cookie的value</span></span><br><span class="line">                    <span class="comment">//获取当前时间的字符串，重新设置cookie的值，重新发送cookie</span></span><br><span class="line">                    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">                    String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//URL编码：</span></span><br><span class="line">                    str_date = URLEncoder.encode(str_date, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line">                    <span class="comment">//设置cookie存活时间：</span></span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);<span class="comment">//一个月</span></span><br><span class="line"></span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//响应数据</span></span><br><span class="line">                    <span class="comment">//获取cookie的value值，时间</span></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//URL解码</span></span><br><span class="line">                    value = URLDecoder.decode(value, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    response.getWriter().write(<span class="string">&quot;&lt;h1&gt;欢迎回来，您上次访问的时间为：&quot;</span> + value + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cookies == <span class="keyword">null</span> || cookies.length == <span class="number">0</span> || flag == <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="comment">//没有，第一次访问</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置Cookie的value</span></span><br><span class="line">            <span class="comment">//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">            String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//URL编码</span></span><br><span class="line">            str_date = URLEncoder.encode(str_date, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;lastTime&quot;</span>, str_date);</span><br><span class="line">            <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>);<span class="comment">//一个月</span></span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h1&gt;您好，欢迎您首次访问&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h1><h2 id="1-概念：-1"><a href="#1-概念：-1" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Java Server Pages:Java服务器端页面</span><br><span class="line">    * 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义Java代码</span><br><span class="line">    * 用于简化书写</span><br></pre></td></tr></table></figure><h2 id="2-原理："><a href="#2-原理：" class="headerlink" title="2. 原理："></a>2. 原理：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JSP本质上就是一个Servlet</span><br></pre></td></tr></table></figure><h2 id="3-JSP的脚本："><a href="#3-JSP的脚本：" class="headerlink" title="3. JSP的脚本："></a>3. JSP的脚本：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JSP的脚本：JSP定义Java代码的方式</span><br><span class="line">    1. &lt;% 代码 %&gt;：定义的Java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</span><br><span class="line">    2. &lt;%! 代码 %&gt;：定义的Java代码，在jsp转换后的Java类的成员位置。例如成员变量，成员方法，代码块，静态代码块等。</span><br><span class="line">    3. &lt;%&#x3D; 代码 %&gt;：定义的Java代码，会输出页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">26</span></span><br><span class="line">  Time: <span class="number">7</span>:<span class="number">42</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%</span><br><span class="line">    System.out.println(<span class="string">&quot;hello jsp&quot;</span>);</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%!</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">  %&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;%= i %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-JSP的内置对象："><a href="#4-JSP的内置对象：" class="headerlink" title="4. JSP的内置对象："></a>4. JSP的内置对象：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 在jsp页面中不需要获取和创建，可以直接使用的对象</span><br><span class="line">* jsp一共有9个内置对象</span><br><span class="line">    * request：</span><br><span class="line">    * response：</span><br><span class="line">    * out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似</span><br><span class="line">        * response.getWriter()和out.write()的区别：</span><br><span class="line">            * 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</span><br><span class="line">            * response.getWriter()数据输出永远在out.write()之前。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    变量名                    真实类型                        作用</span><br><span class="line">* pageContext                PageContext                    当前页面共享数据，还可以获取其他八个内置对象</span><br><span class="line">* request                    HttpServletRequest            一次请求访问的多个资源(转发)</span><br><span class="line">* session                    HttpSession                    一次会话的多个请求间</span><br><span class="line">* application                ServletContext                所有用户间共享数据</span><br><span class="line">* response                    HttpServletResponse            响应对象</span><br><span class="line">* page                        Object                        当前页面(Servlet)的对象  this</span><br><span class="line">* out                        JspWriter                    输出对象，数据输出到页面上</span><br><span class="line">* config                    ServletConfig                Servlet的配置对象</span><br><span class="line">* exception                    Throwable                    异常对象</span><br></pre></td></tr></table></figure><h2 id="5-指令："><a href="#5-指令：" class="headerlink" title="5. 指令："></a>5. 指令：</h2><h3 id="1-作用和格式："><a href="#1-作用和格式：" class="headerlink" title="1. 作用和格式："></a>1. 作用和格式：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 作用：用于配置JSP页面，导入资源文件</span><br><span class="line">* 格式：</span><br><span class="line">    &lt;%@ 指令名称 属性名1&#x3D;属性值1 属性名2&#x3D;属性值2 %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 分类：</span><br><span class="line">    1.page：配置JSP页面的</span><br><span class="line">    2.include：页面包含的。导入页面的资源文件</span><br><span class="line">    3.raglib：导入资源</span><br></pre></td></tr></table></figure><h3 id="2-page指令："><a href="#2-page指令：" class="headerlink" title="2. page指令："></a>2. page指令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* page：配置JSP页面的</span><br><span class="line">    * contentType：等同于response.setContentType()</span><br><span class="line">        1.设置响应体的mime类型以及字符集</span><br><span class="line">        2.设置当前jsp页面的编码(只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集)</span><br><span class="line">    * imprt：导包</span><br><span class="line">    * errorPage：当前页面发送异常后，会自动跳转到指定的错误页面</span><br><span class="line">    * isErrorPage：标识当前是否是错误页面</span><br><span class="line">        1.true:是，可以使用内置对象exception</span><br><span class="line">        2.false：否，默认值。不可以使用内置对象exception</span><br></pre></td></tr></table></figure><h3 id="3-include-amp-taglib-指令："><a href="#3-include-amp-taglib-指令：" class="headerlink" title="3. include &amp; taglib 指令："></a>3. include &amp; taglib 指令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* include:页面包含的，导入页面的资源文件</span><br><span class="line">    * &lt;%@ include file&#x3D;&quot;tou.jsp&quot;%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* taglib:导入资源</span><br><span class="line">    * &lt;%@taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">        * prefix：前缀，自定义的</span><br></pre></td></tr></table></figure><h2 id="6-JSP注释："><a href="#6-JSP注释：" class="headerlink" title="6. JSP注释："></a>6. JSP注释：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.html注释：</span><br><span class="line">    &lt;!-- --&gt;:只能注释html代码片段</span><br><span class="line">2.jsp注释：推荐使用：</span><br><span class="line">    &lt;%-- --%&gt;:可以注释所有</span><br></pre></td></tr></table></figure><h1 id="Session："><a href="#Session：" class="headerlink" title="Session："></a>Session：</h1><h2 id="1-概念：-2"><a href="#1-概念：-2" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</span><br></pre></td></tr></table></figure><h2 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2. 快速入门："></a>2. 快速入门：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.获取HttpSession对象：</span><br><span class="line">    HttpSession session &#x3D; request.getSession();</span><br><span class="line">2.使用HttpSession对象：</span><br><span class="line">    Object getAttribute(String name)</span><br><span class="line">    void setAttribute(String name,Object value)</span><br><span class="line">    void removeAttribute(String name)&#x2F;&#x2F;移除</span><br></pre></td></tr></table></figure><ul><li><p>代码示例</p><ul><li><p>SessionDemo1.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/sessionDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取Session对象</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//2.存储数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello session&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SessionDemo2.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/sessionDemo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Session</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//2.获取数据：</span></span><br><span class="line">        Object msg = session.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-原理："><a href="#3-原理：" class="headerlink" title="3. 原理："></a>3. 原理：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Session的实现是依赖于Cookie的。</span><br></pre></td></tr></table></figure><h2 id="4-Session的细节："><a href="#4-Session的细节：" class="headerlink" title="4. Session的细节："></a>4. Session的细节：</h2><h3 id="1-当客户端关闭后，服务器不关闭，两次获取Session是否为同一个？"><a href="#1-当客户端关闭后，服务器不关闭，两次获取Session是否为同一个？" class="headerlink" title="1. 当客户端关闭后，服务器不关闭，两次获取Session是否为同一个？"></a>1. 当客户端关闭后，服务器不关闭，两次获取Session是否为同一个？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 默认情况下，不是。</span><br><span class="line">* 如果需要相同，则可以创建Cookie，键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/sessionDemo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取Session对象</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        System.out.println(session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建cookie，键为JSESSIONID</span></span><br><span class="line">        Cookie c = <span class="keyword">new</span> Cookie(<span class="string">&quot;JSESSIONID&quot;</span>, session.getId());</span><br><span class="line">        c.setMaxAge(<span class="number">60</span> * <span class="number">60</span>);<span class="comment">//设置存活时间</span></span><br><span class="line">        response.addCookie(c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"><a href="#2-客户端不关闭，服务器关闭后，两次获取的session是同一个吗？" class="headerlink" title="2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"></a>2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 不是同一个，但是要确保数据不丢失</span><br><span class="line">    * session的钝化：</span><br><span class="line">        * 在服务器正常关闭之前，将session对象序列化到硬盘上。</span><br><span class="line">    * session的活化：</span><br><span class="line">        * 在服务器启动后，将session文件转化为内存中的session对象即可。</span><br></pre></td></tr></table></figure><h3 id="3-session什么时候被销毁？"><a href="#3-session什么时候被销毁？" class="headerlink" title="3. session什么时候被销毁？"></a>3. session什么时候被销毁？</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.服务器关闭</span><br><span class="line">2.session对象调用invalidate()</span><br><span class="line"></span><br><span class="line">3.session默认失效时间 30分钟</span><br><span class="line">    * 可以选择性修改配置：web.xml</span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-session的特点："><a href="#5-session的特点：" class="headerlink" title="5. session的特点："></a>5. session的特点：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.session用于存储一次会话的多次请求的数据，存在服务器端</span><br><span class="line">2.session可以存储任意类型，任意大小的数据</span><br></pre></td></tr></table></figure><h2 id="6-session与cookie的区别："><a href="#6-session与cookie的区别：" class="headerlink" title="6. session与cookie的区别："></a>6. session与cookie的区别：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.session存储数据在服务器端，cookie在客户端</span><br><span class="line">2.session没有数据大小限制，cookie有</span><br><span class="line">3.session数据安全，cookie相对于不安全</span><br></pre></td></tr></table></figure><h1 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 案例需求：</span><br><span class="line">    1. 访问带有验证码的登录页面login.jsp</span><br><span class="line">    2. 用户输入用户名，密码以及验证码。</span><br><span class="line">        * 如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误</span><br><span class="line">        * 如果验证码输入有误，跳转登录页面，提示：验证码错误</span><br><span class="line">        * 如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</span><br></pre></td></tr></table></figure><h1 id="EL表达式："><a href="#EL表达式：" class="headerlink" title="EL表达式："></a>EL表达式：</h1><h2 id="1-概念：-3"><a href="#1-概念：-3" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Expression Language 表达式语言</span><br></pre></td></tr></table></figure><h2 id="2-作用："><a href="#2-作用：" class="headerlink" title="2. 作用："></a>2. 作用：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 替换和简化jsp页面中Java代码的编写</span><br></pre></td></tr></table></figure><h2 id="3-语法："><a href="#3-语法：" class="headerlink" title="3. 语法："></a>3. 语法：</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;表达式&#125;</span><br></pre></td></tr></table></figure><h2 id="4-注意："><a href="#4-注意：" class="headerlink" title="4. 注意："></a>4. 注意：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* jsp默认支持el表达式的。如果要忽略el表达式</span><br><span class="line">    1.设置jsp中page指令中：isELIgnored&#x3D;&quot;true&quot;忽略当前jsp页面中所有的el表达式</span><br><span class="line">    2.\$&#123;表达式&#125;：忽略当前这个el表达式</span><br></pre></td></tr></table></figure><h2 id="5-使用："><a href="#5-使用：" class="headerlink" title="5. 使用："></a>5. 使用：</h2><h4 id="1-运算："><a href="#1-运算：" class="headerlink" title="1. 运算："></a>1. 运算：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.运算：</span><br><span class="line">    * 运算符：</span><br><span class="line">        1.算数运算符： +  -  *  &#x2F;(div)  %(mod)</span><br><span class="line">        2.比较运算符： &gt;  &lt;  &gt;&#x3D;  &lt;&#x3D;  &#x3D;&#x3D;  !&#x3D;</span><br><span class="line">        3.逻辑运算符： &amp;&amp;(and)  ||(or)  !(not)</span><br><span class="line">        4.空运算符： empty</span><br><span class="line">            * 功能：用于判断字符串、集合、数组对象是否为null并且长度是否为0</span><br><span class="line">            * $&#123;empty list&#125;</span><br><span class="line">            * $&#123;not enmpty list&#125;</span><br></pre></td></tr></table></figure><h4 id="2-获取值："><a href="#2-获取值：" class="headerlink" title="2. 获取值："></a>2. 获取值：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.获取值：</span><br><span class="line">    1.el表达式只能从域对象中获取值</span><br><span class="line">    2.语法：</span><br><span class="line">        1. $&#123;域名称.键名&#125;：从指定域中获取指定键的值</span><br><span class="line">            * 域名称：</span><br><span class="line">                1. pageScope        --&gt; pageContext</span><br><span class="line">                2. requestScope        --&gt; request</span><br><span class="line">                3. sessionScope        --&gt; session</span><br><span class="line">                4. applicationScope --&gt; application(ServletContext)</span><br><span class="line">                </span><br><span class="line">            * 举例：在request域中存储了name&#x3D;张三</span><br><span class="line">            * 获取：$&#123;request.name&#125;</span><br><span class="line">            </span><br><span class="line">        2. $&#123;键名&#125;：表示依次从最小的域中查找是否有该键值对应的值，直到找到为止。</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">52</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">//在域中存储数据</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;12&quot;</span>);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;h3&gt;获取值&lt;/h3&gt;</span><br><span class="line">$&#123;requestScope.name&#125;&lt;br&gt;</span><br><span class="line">$&#123;sessionScope.age&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.获取对象、List集合、Map集合的值</span><br><span class="line">    1.对象：$&#123;域名称.键名.属性名&#125;</span><br><span class="line">        * 本质上会去调用对象的getter方法</span><br><span class="line">        ------------------------------</span><br><span class="line">        * 通过的是对象的属性来获取：</span><br><span class="line">        * setter或getter方法，去掉set或get，再将剩余的部分，首字母变为小写</span><br><span class="line">        * 比如：setName --&gt; name</span><br><span class="line">        ------------------------------</span><br><span class="line">        </span><br><span class="line">     2. List集合：$&#123;域名称.键名[索引]&#125;</span><br><span class="line"></span><br><span class="line">     3. Map集合：</span><br><span class="line">            * $&#123;域名称.键名.key名称&#125;</span><br><span class="line">            * $&#123;域名称.键名[&quot;key名称&quot;]&#125;</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><ul><li><p>User.java</p></li><li><pre><code class="java">package el;import java.text.SimpleDateFormat;import java.util.Date;/** * @Description TODO * @Author NiuLinXuan * @Date 2020/4/27 - 16:43 */public class User &#123;    private String name;    private int age;    private Date birthday;    public String getBirStr()&#123;        if (birthday != null) &#123;            //格式化日期            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);            //2.返回字符串即可            return sdf.format(birthday);        &#125; else &#123;            return &quot;&quot;;        &#125;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age = age;    &#125;    public Date getBirthday() &#123;        return birthday;    &#125;    public void setBirthday(Date birthday) &#123;        this.birthday = birthday;    &#125;&#125;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* elDemo2.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &amp;#96;&amp;#96;&amp;#96;jsp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%@ page import&amp;#x3D;&amp;quot;el.User&amp;quot; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%@ page import&amp;#x3D;&amp;quot;java.util.*&amp;quot; %&amp;gt;&amp;lt;%--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Created by IntelliJ IDEA.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    User: NiuLinXuan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Date: 2020&amp;#x2F;4&amp;#x2F;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Time: 16:44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    To change this template use File | Settings | File Templates.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%@ page contentType&amp;#x3D;&amp;quot;text&amp;#x2F;html;charset&amp;#x3D;UTF-8&amp;quot; language&amp;#x3D;&amp;quot;java&amp;quot; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;title&amp;gt;Title&amp;lt;&amp;#x2F;title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      User user &amp;#x3D; new User();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user.setName(&amp;quot;张三&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user.setAge(20);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      user.setBirthday(new Date());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      request.setAttribute(&amp;quot;u&amp;quot;,user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      List list &amp;#x3D; new ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      list.add(&amp;quot;张三&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      list.add(19);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      list.add(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      request.setAttribute(&amp;quot;list&amp;quot;,list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Map map &amp;#x3D; new HashMap();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map.put(&amp;quot;name&amp;quot;,&amp;quot;王五&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map.put(&amp;quot;age&amp;quot;,&amp;quot;20&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      map.put(&amp;quot;user&amp;quot;,user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      request.setAttribute(&amp;quot;map&amp;quot;,map);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;h3&amp;gt;el获取对象的值&amp;lt;&amp;#x2F;h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;requestScope.u&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;hr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;requestScope.u.name&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;u.age&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;u.birthday&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;%--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      * 通过的是对象的属性来获取：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          * setter或getter方法，去掉set或get，再将剩余的部分，首字母变为小写&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          * 比如：setName --&amp;gt; name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;u.birStr&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;h3&amp;gt;el获取List值&amp;lt;&amp;#x2F;h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;list[0]&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;list[1]&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;list[2].name&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;hr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;h3&amp;gt;el获取Map值&amp;lt;&amp;#x2F;h3&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;requestScope.map.name&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;requestScope.map[&amp;quot;age&amp;quot;]&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $&amp;#123;map.user.name&amp;#125;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul></li></ul><hr><h4 id="3-隐式对象："><a href="#3-隐式对象：" class="headerlink" title="3. 隐式对象："></a>3. 隐式对象：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* el表达式中有11个隐式对象</span><br><span class="line">* pageContext:</span><br><span class="line">    * 获取jsp其他八个内置对象</span><br><span class="line">        * $&#123;pageContext.request.contentType&#125;:动态获取虚拟目录</span><br></pre></td></tr></table></figure><h1 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL:"></a>JSTL:</h1><h2 id="1-概念：-4"><a href="#1-概念：-4" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JavaServlet Page Tag Library        JSP标准标签库</span><br><span class="line">    * 是由Apache组织提供的开源的免费的jsp标签        &lt;标签&gt;</span><br></pre></td></tr></table></figure><h2 id="2-作用：-1"><a href="#2-作用：-1" class="headerlink" title="2. 作用："></a>2. 作用：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于简化和替换jsp页面上的Java代码。</span><br></pre></td></tr></table></figure><h2 id="3-使用步骤："><a href="#3-使用步骤：" class="headerlink" title="3. 使用步骤："></a>3. 使用步骤：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.导入jstl相关jar包；</span><br><span class="line">2.引入标签库：taglib指令：    &lt;%@ taglib %&gt;</span><br><span class="line">3.使用标签</span><br></pre></td></tr></table></figure><h2 id="4-常用的JSTL标签："><a href="#4-常用的JSTL标签：" class="headerlink" title="4. 常用的JSTL标签："></a>4. 常用的JSTL标签：</h2><h3 id="1-if："><a href="#1-if：" class="headerlink" title="1. if："></a>1. if：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 相当于Java代码的if语句</span><br><span class="line">    1.属性：</span><br><span class="line">        * test：必须属性，接受boolean表达式</span><br><span class="line">            * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</span><br><span class="line">            * 一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line">            </span><br><span class="line">    2.注意：</span><br><span class="line">        * c:if标签没有else情况，想要else情况，则可以再定义一个c:if标签</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">43</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;if&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">        我是真的。。。</span><br><span class="line">    &lt;/c:if&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">//判断request域中的一个list集合是否为空，如果不为null则显示遍历集合</span></span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;not empty list&#125;&quot;</span>&gt;</span><br><span class="line">        遍历集合</span><br><span class="line">    &lt;/c:if&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    List arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    request.setAttribute(<span class="string">&quot;num&quot;</span>,<span class="number">3</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;num % 2 != 0&#125;&quot;</span>&gt;</span><br><span class="line">    $&#123;num&#125;是奇数</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-choose："><a href="#2-choose：" class="headerlink" title="2. choose："></a>2. choose：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 相当于Java代码的switch语句</span><br><span class="line">    1.使用choose标签声明                    相当于switch声明</span><br><span class="line">    2.使用when标签做判断                    相当于case</span><br><span class="line">    3.使用otherwise标签做其他情况的声明            相当于default</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">22</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;switch&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        request.setAttribute(<span class="string">&quot;num&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num == 1&#125;&quot;&gt;星期一&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num == 2&#125;&quot;&gt;星期二&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num == 3&#125;&quot;&gt;星期三&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num == 4&#125;&quot;&gt;星期四&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num == 5&#125;&quot;&gt;星期五&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num == 6&#125;&quot;&gt;星期六&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;num == 7&#125;&quot;&gt;星期天&lt;/c:when&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:otherwise&gt;对不起，您输入的数字有误。&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="3-foreach："><a href="#3-foreach：" class="headerlink" title="3. foreach："></a>3. foreach：</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">* foreach：相当于java代码中的<span class="keyword">for</span>语句</span><br><span class="line">    <span class="number">1.</span>完成重复的操作：</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i ++) &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        * 属性：</span><br><span class="line">            begin:开始值</span><br><span class="line">            end：结束值</span><br><span class="line">            <span class="keyword">var</span>：临时变量</span><br><span class="line">            step：步长</span><br><span class="line">            varStatus:循环状态对象</span><br><span class="line">                index:容器中元素的索引，从<span class="number">0</span>开始</span><br><span class="line">                count：循环次数，从<span class="number">1</span>开始</span><br><span class="line">                </span><br><span class="line">    ------------------------------------------------</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">57</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;foreach&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach begin=<span class="string">&quot;0&quot;</span> end=<span class="string">&quot;10&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> step=<span class="string">&quot;1&quot;</span> varStatus=<span class="string">&quot;s&quot;</span>&gt;</span><br><span class="line">    $&#123;i&#125; $&#123;s.index&#125; $&#123;s.count&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>遍历容器：</span><br><span class="line">    List&lt;User&gt; list;</span><br><span class="line">    <span class="keyword">for</span>(User user : list) &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    * 属性：</span><br><span class="line">        items:容器对象</span><br><span class="line">        <span class="keyword">var</span>:容器中元素的临时变量</span><br><span class="line">        varStatus:循环状态对象</span><br><span class="line">            index:容器中元素的索引，从<span class="number">0</span>开始</span><br><span class="line">            count:循环次数，从<span class="number">1</span>开始</span><br><span class="line">    ----------------------------------------------------</span><br><span class="line">    &lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">21</span>:<span class="number">06</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;forEach&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        request.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> varStatus=<span class="string">&quot;s&quot;</span>&gt;</span><br><span class="line">    $&#123;i&#125; $&#123;s.index&#125; $&#123;s.count&#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.awt.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;el.User&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Date&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">4</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">21</span>:<span class="number">15</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="string">&quot;李四&quot;</span>,<span class="number">21</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="string">&quot;王五&quot;</span>,<span class="number">22</span>,<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;table width=<span class="string">&quot;500&quot;</span> border=<span class="string">&quot;1px&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;编号&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;出生日期&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> varStatus=<span class="string">&quot;s&quot;</span>&gt;</span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;s.count % 2 == 0&#125;&quot;</span>&gt;</span><br><span class="line">            &lt;tr bgcolor=<span class="string">&quot;#ffc0cb&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.birStr&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;s.count % 2 != 0&#125;&quot;</span>&gt;</span><br><span class="line">            &lt;tr bgcolor=<span class="string">&quot;aqua&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;user.birStr&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:if&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 会话技术 </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤器 &amp; 监听器的学习</title>
      <link href="/2020/08/28/%E8%BF%87%E6%BB%A4%E5%99%A8&amp;%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2020/08/28/%E8%BF%87%E6%BB%A4%E5%99%A8&amp;%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="过滤器：Filter"><a href="#过滤器：Filter" class="headerlink" title="过滤器：Filter"></a>过滤器：Filter</h1><h2 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 生活照的过滤器：净水器、空气净化器、土匪</span><br><span class="line">* web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</span><br><span class="line">* 过滤器的作用：</span><br><span class="line">    * 一般用于完成通用的操作。</span><br><span class="line">        如：登录验证、统一编码处理 、敏感字符过滤</span><br></pre></td></tr></table></figure><h2 id="2-步骤："><a href="#2-步骤：" class="headerlink" title="2. 步骤："></a>2. 步骤：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.定义一个类，实现接口Filter</span><br><span class="line">2.复写方法</span><br><span class="line">3.配置拦截路径</span><br><span class="line">    1.web.xml</span><br><span class="line">    2.注解</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nlxj.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span><span class="comment">//访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">filterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;filterDemo1被执行啦...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Filter细节："><a href="#3-Filter细节：" class="headerlink" title="3. Filter细节："></a>3. Filter细节：</h2><h3 id="1-web-xml配置方式"><a href="#1-web-xml配置方式" class="headerlink" title="1. web.xml配置方式"></a>1. web.xml配置方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.nlxj.web.filter.filterDemo2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-过滤器执行流程："><a href="#2-过滤器执行流程：" class="headerlink" title="2. 过滤器执行流程："></a>2. 过滤器执行流程：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.执行过滤器；</span><br><span class="line">2.执行放行后的资源；</span><br><span class="line">3.回来执行过滤器放行代码下边的代码</span><br></pre></td></tr></table></figure><h3 id="3-过滤器生命周期方法："><a href="#3-过滤器生命周期方法：" class="headerlink" title="3. 过滤器生命周期方法："></a>3. 过滤器生命周期方法：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.init：在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次，用于加载资源；</span><br><span class="line">2.doFilter:每一次请求拦截资源时，会执行。执行多次；</span><br><span class="line">3.destroy：在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次，用于释放资源。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nlxj.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-04-30 09:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">filterDemo4</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每一次请求被拦截资源后，会执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doFilter...&quot;</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次.用于加载资源</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在服务器关闭后，destroy被销毁。如果服务器是正常关闭的，则会执行destroy方法，只执行一次。用于释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-过滤器配置详解："><a href="#4-过滤器配置详解：" class="headerlink" title="4. 过滤器配置详解："></a>4. 过滤器配置详解：</h3><h4 id="1-拦截路径配置："><a href="#1-拦截路径配置：" class="headerlink" title="1. 拦截路径配置："></a>1. 拦截路径配置：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.具体资源路径：&#x2F;index.jsp        只有访问index,jsp资源时，过滤器才会被执行</span><br><span class="line">2.拦截目录：&#x2F;user&#x2F;*        访问&#x2F;user下的所有资源时，过滤器都会被执行</span><br><span class="line">3.后缀名拦截：*.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行</span><br><span class="line">4.拦截所有资源：&#x2F;*            访问所有资源时，过滤器都会被执行</span><br></pre></td></tr></table></figure><h4 id="2-拦截方式配置："><a href="#2-拦截方式配置：" class="headerlink" title="2. 拦截方式配置："></a>2. 拦截方式配置：</h4><h5 id="1-注解配置："><a href="#1-注解配置：" class="headerlink" title="1. 注解配置："></a>1. 注解配置：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 设置dispatchTypes属性：</span><br><span class="line">    1.REQUEST:默认值，浏览器直接请求资源</span><br><span class="line">    2.FORWARD:转发访问资源</span><br><span class="line">    3.INCLUDE:包含访问资源</span><br><span class="line">    4.ERROR:错误跳转资源</span><br><span class="line">    5.ASYNC:异步访问资源</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浏览器直接请求index.jsp资源时，该过滤器才会被执行</span></span><br><span class="line"><span class="comment">//@WebFilter(value = &quot;/index.jsp&quot;,dispatcherTypes = DispatcherType.REQUEST)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有转发访问index.jsp时，该过滤器才会被执行</span></span><br><span class="line"><span class="comment">// @WebFilter(value = &quot;/index.jsp&quot;,dispatcherTypes = DispatcherType.FORWARD)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浏览器直接请求或者转发访问index.jsp时，该过滤器才会执行</span></span><br><span class="line"> <span class="meta">@WebFilter(value = &quot;/index.jsp&quot;,dispatcherTypes = &#123;DispatcherType.REQUEST,DispatcherType.FORWARD&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="2-web-xml配置："><a href="#2-web-xml配置：" class="headerlink" title="2. web.xml配置："></a>2. web.xml配置：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 设置&lt;dispatcher&gt;属性&lt;&#x2F;dispatcher&gt;标签即可</span><br><span class="line">    * 属性也是上面注解中的5种</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.nlxj.web.filter.filterDemo2<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>     </span><br><span class="line"><span class="comment">&lt;!-- web.xml配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-过滤器链-配置多个过滤器"><a href="#5-过滤器链-配置多个过滤器" class="headerlink" title="5. 过滤器链(配置多个过滤器)"></a>5. 过滤器链(配置多个过滤器)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 执行顺序：如果有两个过滤器：过滤器1和过滤器2</span><br><span class="line">    1.过滤器1先执行；</span><br><span class="line">    2.过滤器2再执行；</span><br><span class="line">    3.资源执行；</span><br><span class="line">    4.过滤器2先回来；</span><br><span class="line">    5.过滤器1再回来。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 过滤器先后顺序问题：</span><br><span class="line">    1. 注解配置：按照类名的字符串比较规则比较，值小的先执行</span><br><span class="line">            * AFilter 和 BFilter，AFilter先执行；</span><br><span class="line">            * Fileter6 和Filter18, Filter18先执行</span><br><span class="line">        * 这个是逐位比较的</span><br><span class="line">        </span><br><span class="line">    2.web.xml配置：</span><br><span class="line">        * &lt;filter-mapping&gt;谁定义在上边，谁先执行</span><br></pre></td></tr></table></figure><h3 id="6-动态代理："><a href="#6-动态代理：" class="headerlink" title="6. 动态代理："></a>6. 动态代理：</h3><pre><code>    * 增强对象的功能：        * 设计模式：一些通用的解决固定问题的方式        1. 装饰模式        2. 代理模式            * 概念：                1. 真实对象：被代理的对象                2. 代理对象：                3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的             * 实现方式：                 1. 静态代理：有一个类文件描述代理模式                 2. 动态代理：在内存中形成代理类                    * 实现步骤：                        1. 代理对象和真实对象实现相同的接口                        2. 代理对象 = Proxy.newProxyInstance();                        3. 使用代理对象调用方法。                        4. 增强方法                    * 增强方式：                        1. 增强参数列表                        2. 增强返回值类型                        3. 增强方法体执行逻辑    </code></pre><h1 id="监听器：Listener"><a href="#监听器：Listener" class="headerlink" title="监听器：Listener"></a>监听器：Listener</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* web的三大组件之一。</span><br><span class="line">    * 事件监听基址：</span><br><span class="line">        * 事件：一件事情</span><br><span class="line">        * 监听源：事件发生的地方</span><br><span class="line">        * 监听器：一个对象</span><br><span class="line">        * 注册监听：将事件、事件源、监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码。</span><br></pre></td></tr></table></figure><h2 id="2-ServletContextListener："><a href="#2-ServletContextListener：" class="headerlink" title="2. ServletContextListener："></a>2. ServletContextListener：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* ServletContextListener:监听ServletContext对象的创建和销毁</span><br><span class="line">    * 方法：</span><br><span class="line">        * void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法</span><br><span class="line">        * void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line">    1.定义一个类，实现ServletContextListener接口</span><br><span class="line">    2.复写方法</span><br><span class="line">    3.配置：</span><br><span class="line">        1.web.xml</span><br><span class="line">            &lt;listener&gt;</span><br><span class="line">            &lt;listener-class&gt;com.nlxj.listener.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">              &lt;&#x2F;listener&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.注解：</span><br><span class="line">    * WebListener</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nlxj.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-01 12:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听ServletContext对象创建的，ServletContext对象服务器启动后自动创建</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在服务器启动后自动调用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载资源文件</span></span><br><span class="line">        <span class="comment">//1.获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = sce.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加载资源文件</span></span><br><span class="line">        String contextConfigLocation = servletContext.getInitParameter(<span class="string">&quot;contextConfigLocation&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取真实路径</span></span><br><span class="line">        String realPath = servletContext.getRealPath(contextConfigLocation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.加载进内存</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">            System.out.println(fis);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext对象被创建了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在服务器关闭后，ServletContext对象被销毁。当服务器正常关闭后该方法被调用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext对象被销毁了。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    配置监听器</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;listener&gt;</span></span><br><span class="line"><span class="comment">    &lt;listener-class&gt;com.nlxj.listener.ContextLoaderListener&lt;/listener-class&gt;</span></span><br><span class="line"><span class="comment">  &lt;/listener&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  指定初始化参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 过滤器 </tag>
            
            <tag> 监听器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的学习</title>
      <link href="/2020/08/28/redis/"/>
      <url>/2020/08/28/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="redis："><a href="#redis：" class="headerlink" title="redis："></a>redis：</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">概念： redis是一款高性能的NOSQL系列的非关系型数据库</span><br></pre></td></tr></table></figure><pre><code>1.1.什么是NOSQL    NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。    随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。    1.1.1.    NOSQL和关系型数据库比较        优点：            1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。            2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。            3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。            4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。        缺点：            1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。            2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。            3）不提供关系型数据库对事务的处理。    1.1.2.    非关系型数据库的优势：        1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。        2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。    1.1.3.    关系型数据库的优势：        1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。        2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。    1.1.4.    总结        关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，        让NoSQL数据库对关系型数据库的不足进行弥补。        一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据1.2.主流的NOSQL产品    •    键值(Key-Value)存储数据库            相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB            典型应用： 内容缓存，主要用于处理大量数据的高访问负载。             数据模型： 一系列键值对            优势： 快速查询            劣势： 存储的数据缺少结构化    •    列存储数据库            相关产品：Cassandra, HBase, Riak            典型应用：分布式的文件系统            数据模型：以列簇式存储，将同一列数据存在一起            优势：查找速度快，可扩展性强，更容易进行分布式扩展            劣势：功能相对局限    •    文档型数据库            相关产品：CouchDB、MongoDB            典型应用：Web应用（与Key-Value类似，Value是结构化的）            数据模型： 一系列键值对            优势：数据结构要求不严格            劣势： 查询性能不高，而且缺乏统一的查询语法    •    图形(Graph)数据库            相关数据库：Neo4J、InfoGrid、Infinite Graph            典型应用：社交网络            数据模型：图结构            优势：利用图结构相关算法。            劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。1.3 什么是Redis    Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：        1) 字符串类型 string        2) 哈希类型 hash        3) 列表类型 list        4) 集合类型 set        5) 有序集合类型 sortedset    1.3.1 redis的应用场景        •    缓存（数据查询、短连接、新闻内容、商品内容等等）        •    聊天室的在线好友列表        •    任务队列。（秒杀、抢购、12306等等）        •    应用排行榜        •    网站访问统计        •    数据过期处理（可以精确到毫秒        •    分布式集群架构中的session分离</code></pre><h2 id="2-下载安装："><a href="#2-下载安装：" class="headerlink" title="2. 下载安装："></a>2. 下载安装：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 官网：https:&#x2F;&#x2F;redis.io</span><br><span class="line">    2. 中文网：http:&#x2F;&#x2F;www.redis.net.cn&#x2F;</span><br><span class="line">    3. 解压直接可以使用：</span><br><span class="line">        * redis.windows.conf：配置文件</span><br><span class="line">        * redis-cli.exe：redis的客户端</span><br><span class="line">        * redis-server.exe：redis服务器端</span><br></pre></td></tr></table></figure><h2 id="3-命令操作："><a href="#3-命令操作：" class="headerlink" title="3. 命令操作："></a>3. 命令操作：</h2><h3 id="1-redis的数据结构："><a href="#1-redis的数据结构：" class="headerlink" title="1. redis的数据结构："></a>1. redis的数据结构：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* redis存储的是：key，value格式的数据，其中key都是字符串，value有5中不同的数据结构：</span><br><span class="line">    1.字符串类型    string</span><br><span class="line">    2.哈希类型 hash    ：map格式</span><br><span class="line">    3.列表类型    list ：linkedlist    链表</span><br><span class="line">    4.集合类型    set    不允许重复</span><br><span class="line">    5.有序集合类型：    sortedset    自动排序并且不允许 重复</span><br></pre></td></tr></table></figure><h3 id="2-字符串类型-String："><a href="#2-字符串类型-String：" class="headerlink" title="2. 字符串类型 String："></a>2. 字符串类型 String：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.存储：set key value</span><br><span class="line">2.获取：get key</span><br><span class="line">3.删除：del key</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set username zhangsan</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 23</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get username</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; del username</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; del age</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="3-哈希类型-hash："><a href="#3-哈希类型-hash：" class="headerlink" title="3. 哈希类型 hash："></a>3. 哈希类型 hash：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.存储：hset key field value</span><br><span class="line">2.获取：</span><br><span class="line">    * hget key field : 获取指定的field：获取指定的field对应的值</span><br><span class="line">    * hgetall key： 获取所有的field和value</span><br><span class="line">3.删除：hdel key field</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hset mysql username zhangsan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hset mysql age 23</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hget mysql username</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget mysql age</span><br><span class="line">&quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall mysql</span><br><span class="line">1) &quot;username&quot;</span><br><span class="line">2) &quot;zhangsan&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; hdel mysql username</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; hdel mysql age</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="4-列表类型-list："><a href="#4-列表类型-list：" class="headerlink" title="4. 列表类型 list："></a>4. 列表类型 list：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 可以添加一个元素到列表的头部(左边)或者尾部(右边)</span><br><span class="line">    1. 添加：</span><br><span class="line">        1.lpush key value:将元素加入列表左边</span><br><span class="line">        2.rpush key value：将元素加入列表右边</span><br><span class="line">    2.获取：</span><br><span class="line">        * lrange key start end    :范围获取</span><br><span class="line">    3.删除：</span><br><span class="line">        * lpop key : 删除列表最左边的元素，并将元素返回</span><br><span class="line">        * rpop key : 删除列表最右边的元素，并将元素返回</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpop name</span><br><span class="line">&quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop age</span><br><span class="line">&quot;23&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop gender</span><br><span class="line">&quot;nan&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpush mylist a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush mylist b</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; rpush mylist c</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">3) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 1</span><br><span class="line">1) &quot;b&quot;</span><br><span class="line">2) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 1 2</span><br><span class="line">1) &quot;a&quot;</span><br><span class="line">2) &quot;c&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop mylist</span><br><span class="line">&quot;b&quot;</span><br><span class="line">127.0.0.1:6379&gt; lpop mylist</span><br><span class="line">&quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop mylist</span><br><span class="line">&quot;c&quot;</span><br></pre></td></tr></table></figure><h3 id="5-集合类型-set：不允许重复元素"><a href="#5-集合类型-set：不允许重复元素" class="headerlink" title="5. 集合类型 set：不允许重复元素"></a>5. 集合类型 set：不允许重复元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.存储：sadd key value</span><br><span class="line">2.获取：smembers key：获取set集合中所有的值</span><br><span class="line">3.删除：srem key value：删除set集合中的某个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd myset a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset b</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset c</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers myset</span><br><span class="line">1) &quot;c&quot;</span><br><span class="line">2) &quot;b&quot;</span><br><span class="line">3) &quot;a&quot;</span><br><span class="line">127.0.0.1:6379&gt; srem myset a</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="6-有序集合类型：sortedset"><a href="#6-有序集合类型：sortedset" class="headerlink" title="6. 有序集合类型：sortedset"></a>6. 有序集合类型：sortedset</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 不允许重复元素，且会自动排序</span><br><span class="line">    1.存储：zadd key score value</span><br><span class="line">    2.获取：zrange key start end</span><br><span class="line">    3.删除：zrem key value</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd mysort 50 zhangsan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd mysort 20 lisi</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd mysort 30 wangwu</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange mysort 0 -1</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;wangwu&quot;</span><br><span class="line">3) &quot;zhangsan&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrange mysort 0 -1 withscores</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">3) &quot;wangwu&quot;</span><br><span class="line">4) &quot;30&quot;</span><br><span class="line">5) &quot;zhangsan&quot;</span><br><span class="line">6) &quot;50&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrem mysort wangwu</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange mysort 0 -1 withscores</span><br><span class="line">1) &quot;lisi&quot;</span><br><span class="line">2) &quot;20&quot;</span><br><span class="line">3) &quot;zhangsan&quot;</span><br><span class="line">4) &quot;50&quot;</span><br></pre></td></tr></table></figure><h3 id="7-通用命令："><a href="#7-通用命令：" class="headerlink" title="7. 通用命令："></a>7. 通用命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.keys * ：查询所有的键</span><br><span class="line">2.type key ： 获取键对应的value的类型</span><br><span class="line">3.del key：删除指定的key value</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;mysort&quot;</span><br><span class="line">2) &quot;myset&quot;</span><br><span class="line">127.0.0.1:6379&gt; type mysort</span><br><span class="line">zset</span><br><span class="line">127.0.0.1:6379&gt; type myset</span><br><span class="line">set</span><br><span class="line">127.0.0.1:6379&gt; del myset</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;mysort&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h2 id="4-持久化："><a href="#4-持久化：" class="headerlink" title="4. 持久化："></a>4. 持久化：</h2><h3 id="1-概念：-1"><a href="#1-概念：-1" class="headerlink" title="1. 概念："></a>1. 概念：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</span><br></pre></td></tr></table></figure><h3 id="2-redis持久化机制："><a href="#2-redis持久化机制：" class="headerlink" title="2. redis持久化机制："></a>2. redis持久化机制：</h3><h4 id="1-RDB："><a href="#1-RDB：" class="headerlink" title="1. RDB："></a>1. RDB：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 默认方式，不需要进行配置，默认就使用这种机制</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 在一定的间隔时间中，检测key的变化情况，然后持久化数据</span><br><span class="line">            1. 编辑redis.windwos.conf文件</span><br><span class="line">                #   after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">                save 900 1</span><br><span class="line">                #   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line">                save 300 10</span><br><span class="line">                #   after 60 sec if at least 10000 keys changed</span><br><span class="line">                save 60 10000</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重新启动redis服务器，并指定配置文件名称</span><br><span class="line">    D:\JavaWeb2018\day23_redis\资料\redis\windows-64\redis-2.8.9&gt;redis-server.exe redis.windows.conf    </span><br></pre></td></tr></table></figure><h4 id="2-AOF："><a href="#2-AOF：" class="headerlink" title="2. AOF："></a>2. AOF：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编辑redis.windwos.conf文件</span><br><span class="line">                appendonly no（关闭aof） --&gt; appendonly yes （开启aof）</span><br><span class="line">                </span><br><span class="line">                # appendfsync always ： 每一次操作都进行持久化</span><br><span class="line">                appendfsync everysec ： 每隔一秒进行一次持久化</span><br><span class="line">                # appendfsync no     ： 不进行持久化</span><br></pre></td></tr></table></figure><h1 id="Jedis："><a href="#Jedis：" class="headerlink" title="Jedis："></a>Jedis：</h1><h2 id="1-概念：-2"><a href="#1-概念：-2" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Jedis：一款Java操作redis数据库的工具。</span><br></pre></td></tr></table></figure><h2 id="2-使用步骤："><a href="#2-使用步骤：" class="headerlink" title="2. 使用步骤："></a>2. 使用步骤：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.下载jedis的jar包，并导包</span><br><span class="line">2.使用：</span><br><span class="line">        &#x2F;&#x2F;1.获取连接</span><br><span class="line">        Jedis jedis &#x3D; new Jedis(&quot;localhost&quot;, 6379);</span><br><span class="line">        &#x2F;&#x2F;2.操作：</span><br><span class="line">        jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);</span><br><span class="line">        &#x2F;&#x2F;3.关闭连接</span><br><span class="line">        jedis.close();</span><br></pre></td></tr></table></figure><h2 id="3-操作String："><a href="#3-操作String：" class="headerlink" title="3. 操作String："></a>3. 操作String：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();<span class="comment">//如果使用空参，默认值为&quot;localhost&quot;,&quot;6379&quot;端口</span></span><br><span class="line">    <span class="comment">//2.操作：</span></span><br><span class="line">    <span class="comment">//存储</span></span><br><span class="line">    jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    String username = jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line">    <span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对，一般用于验证码</span></span><br><span class="line">    jedis.setex(<span class="string">&quot;activecode&quot;</span>,<span class="number">20</span>,<span class="string">&quot;hehe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-操作hash："><a href="#4-操作hash：" class="headerlink" title="4. 操作hash："></a>4. 操作hash：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//2.操作：</span></span><br><span class="line">    <span class="comment">//存储hash</span></span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;username&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;12&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;male&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取hash</span></span><br><span class="line">    String username = jedis.hget(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;username&quot;</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取map中所有的值</span></span><br><span class="line">    Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">        String value = user.get(key);</span><br><span class="line">        System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-操作list："><a href="#5-操作list：" class="headerlink" title="5. 操作list："></a>5. 操作list：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//操作list</span></span><br><span class="line">    <span class="comment">//存储数据 list</span></span><br><span class="line">    jedis.lpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    jedis.rpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//范围获取</span></span><br><span class="line">    List&lt;String&gt; mylist = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list 弹出</span></span><br><span class="line">    String lpop = jedis.lpop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">    System.out.println(lpop);</span><br><span class="line"></span><br><span class="line">    String rpop = jedis.rpop(<span class="string">&quot;mylist&quot;</span>);</span><br><span class="line">    System.out.println(rpop);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list 范围获取</span></span><br><span class="line">    List&lt;String&gt; lrange = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(lrange);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-操作set："><a href="#6-操作set：" class="headerlink" title="6. 操作set："></a>6. 操作set：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取连接：</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//操作：</span></span><br><span class="line">    <span class="comment">//存储数据 set</span></span><br><span class="line">    jedis.sadd(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;亚瑟&quot;</span>,<span class="string">&quot;后裔&quot;</span>,<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取set</span></span><br><span class="line">    Set&lt;String&gt; myset = jedis.smembers(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">    System.out.println(myset);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-操作-sortedset："><a href="#7-操作-sortedset：" class="headerlink" title="7. 操作 sortedset："></a>7. 操作 sortedset：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">    <span class="comment">//操作 sortedset</span></span><br><span class="line">    <span class="comment">//存储数据</span></span><br><span class="line">    jedis.zadd(<span class="string">&quot;mysort&quot;</span>,<span class="number">5</span>,<span class="string">&quot;后裔&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;mysort&quot;</span>,<span class="number">50</span>,<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line">    jedis.zadd(<span class="string">&quot;mysort&quot;</span>,<span class="number">25</span>,<span class="string">&quot;露娜&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据 sortedset</span></span><br><span class="line">    Set&lt;String&gt; mysort = jedis.zrange(<span class="string">&quot;mysort&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(mysort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Jedis-连接池："><a href="#8-Jedis-连接池：" class="headerlink" title="8. Jedis_连接池："></a>8. Jedis_连接池：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//0.创建一个配置对象</span></span><br><span class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">    config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//1.创建连接池对象</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config,<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取连接：</span></span><br><span class="line">    Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用</span></span><br><span class="line">    jedis.set(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;19&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.关闭：归还到连接池中</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-jedis详细配置-properties"><a href="#9-jedis详细配置-properties" class="headerlink" title="9. jedis详细配置.properties"></a>9. jedis详细配置.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#最大活动对象数     </span></span><br><span class="line"><span class="meta">redis.pool.maxTotal</span>=<span class="string">1000    </span></span><br><span class="line"><span class="comment">#最大能够保持idel状态的对象数      </span></span><br><span class="line"><span class="meta">redis.pool.maxIdle</span>=<span class="string">100  </span></span><br><span class="line"><span class="comment">#最小能够保持idel状态的对象数   </span></span><br><span class="line"><span class="meta">redis.pool.minIdle</span>=<span class="string">50    </span></span><br><span class="line"><span class="comment">#当池内没有返回对象时，最大等待时间    </span></span><br><span class="line"><span class="meta">redis.pool.maxWaitMillis</span>=<span class="string">10000    </span></span><br><span class="line"><span class="comment">#当调用borrow Object方法时，是否进行有效性检查    </span></span><br><span class="line"><span class="meta">redis.pool.testOnBorrow</span>=<span class="string">true    </span></span><br><span class="line"><span class="comment">#当调用return Object方法时，是否进行有效性检查    </span></span><br><span class="line"><span class="meta">redis.pool.testOnReturn</span>=<span class="string">true  </span></span><br><span class="line"><span class="comment">#“空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1.  </span></span><br><span class="line"><span class="meta">redis.pool.timeBetweenEvictionRunsMillis</span>=<span class="string">30000  </span></span><br><span class="line"><span class="comment">#向调用者输出“链接”对象时，是否检测它的空闲超时；  </span></span><br><span class="line"><span class="meta">redis.pool.testWhileIdle</span>=<span class="string">true  </span></span><br><span class="line"><span class="comment"># 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3.  </span></span><br><span class="line"><span class="meta">redis.pool.numTestsPerEvictionRun</span>=<span class="string">50  </span></span><br><span class="line"><span class="comment">#redis服务器的IP    </span></span><br><span class="line"><span class="meta">redis.ip</span>=<span class="string">xxxxxx  </span></span><br><span class="line"><span class="comment">#redis服务器的Port    </span></span><br><span class="line"><span class="meta">redis1.port</span>=<span class="string">6379   </span></span><br></pre></td></tr></table></figure><h2 id="10-jedis连接池工具类："><a href="#10-jedis连接池工具类：" class="headerlink" title="10. jedis连接池工具类："></a>10. jedis连接池工具类：</h2><ul><li><p>工具类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     JedisPool工具类</span></span><br><span class="line"><span class="comment">     加载配置文件，配置连接池的参数</span></span><br><span class="line"><span class="comment">     提供获取连接的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream is = JedisUtils.class.getClassLoader().getResourceAsStream(&quot;jedis.properties&quot;);</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据,设置到JedisPoolConfig中</span></span><br><span class="line">        JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxTotal&quot;</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxIdle&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(config, pro.getProperty(<span class="string">&quot;host&quot;</span>), Integer.parseInt(pro.getProperty(<span class="string">&quot;port&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *   获取连接方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>jedis.properties</p></li><li><p>```properties<br>host=127.0.0.1<br>port=6379<br>maxTotal=50<br>maxIdle=10</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 调用工具类：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">    public void test8() &#123;</span><br><span class="line">        &#x2F;&#x2F;通过连接池工具类获取</span><br><span class="line">        Jedis jedis &#x3D; JedisUtils.getJedis();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;使用</span><br><span class="line">        jedis.set(&quot;opop&quot;,&quot;vivi&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;关闭：归还到连接池中</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery的学习</title>
      <link href="/2020/08/28/JQuery/"/>
      <url>/2020/08/28/JQuery/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery基础："><a href="#JQuery基础：" class="headerlink" title="JQuery基础："></a>JQuery基础：</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 一个JavaScript框架，简化JS开发。</span><br><span class="line"></span><br><span class="line">* jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。</span><br><span class="line"></span><br><span class="line">* JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已。</span><br></pre></td></tr></table></figure><h2 id="2-步骤："><a href="#2-步骤：" class="headerlink" title="2. 步骤："></a>2. 步骤：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.下载JQuery</span><br><span class="line">    目前jQuery有三个大版本：</span><br><span class="line">    1.x：兼容ie678,使用最为广泛的，官方只做BUG维护，</span><br><span class="line">         功能不再新增。因此一般项目来说，使用1.x版本就可以了，</span><br><span class="line">         最终版本：1.12.4 (2016年5月20日)</span><br><span class="line">    2.x：不兼容ie678，很少有人使用，官方只做BUG维护，</span><br><span class="line">         功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，</span><br><span class="line">         最终版本：2.2.4 (2016年5月20日)</span><br><span class="line">    3.x：不兼容ie678，只支持最新的浏览器。除非特殊要求，</span><br><span class="line">         一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。</span><br><span class="line">         目前该版本是官方主要更新维护的版本。最新版本：3.2.1（2017年3月20日）</span><br><span class="line">        </span><br><span class="line">    * jquery-xxx.js 与 jquery-xxx.min.js区别：</span><br><span class="line">            1. jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</span><br><span class="line">            2. jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</span><br><span class="line">            </span><br><span class="line">2.导入JQuery的js文件：导入min.js文件</span><br><span class="line">3.使用</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--导入JQuery的js文件--&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;div1...&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div2&quot;</span>&gt;div2...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//使用JQuery获取元素对象</span></span><br><span class="line">    <span class="keyword">var</span> div1 = $(<span class="string">&quot;#div1&quot;</span>);</span><br><span class="line">    alert(div1.html())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> div2 = $(<span class="string">&quot;#div2&quot;</span>);</span><br><span class="line">    alert(div2.html());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="3-JQuery对象和JS对象区别与转换："><a href="#3-JQuery对象和JS对象区别与转换：" class="headerlink" title="3. JQuery对象和JS对象区别与转换："></a>3. JQuery对象和JS对象区别与转换：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.JQuery对象在操作时，更加方便；</span><br><span class="line">2.JQuery对象和JS对象方法不通用；</span><br><span class="line"></span><br><span class="line">3.两者相互转换：</span><br><span class="line">    * JQuery --&gt; JS : JQuery对象[索引] 或者 JQuery对象.get(索引)</span><br><span class="line">    * JS --&gt; JQuery ： $(JS对象)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;div1...&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div2&quot;</span>&gt;div2...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.通过js方式来获取名称叫做div的所有html元素对象</span></span><br><span class="line">    <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    alert(divs.length);<span class="comment">//可以将其当做数组来使用</span></span><br><span class="line">    <span class="comment">//对divs 中所有的div让其标签体内容变为&quot;aaa&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class="line">        <span class="comment">// divs[i].innerHTML = &quot;aaa&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//JS --&gt; JQuery ： $(JS对象)</span></span><br><span class="line">        <span class="comment">// $(divs).html(&quot;fff&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.通过JQuery方式来获取名称叫做div的所有html对象</span></span><br><span class="line">    <span class="keyword">var</span> $divs = $(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    alert($divs.length);<span class="comment">//可以将其当做数组来使用</span></span><br><span class="line">    <span class="comment">//对$divs 中所有的div让其标签体内容变为&quot;bbb&quot;</span></span><br><span class="line">    <span class="comment">// $divs.html(&quot;bbb&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// JQuery --&gt; JS : JQuery对象[索引] 或者 JQuery对象.get(索引)</span></span><br><span class="line">    $divs[<span class="number">0</span>].innerHTML = <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line">    $divs.get(<span class="number">1</span>).innerHTML = <span class="string">&quot;ddd&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-事件绑定："><a href="#4-事件绑定：" class="headerlink" title="4. 事件绑定："></a>4. 事件绑定：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;事件绑定&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;b1&quot;</span> value=<span class="string">&quot;点我&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//给b1按钮添加单击事件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取b1按钮</span></span><br><span class="line">    $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-入口函数："><a href="#5-入口函数：" class="headerlink" title="5. 入口函数："></a>5. 入口函数：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;入口函数&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">/*window.onload = function () &#123;</span></span><br><span class="line"><span class="comment">            //给b1按钮添加单击事件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //1.获取b1按钮</span></span><br><span class="line"><span class="comment">            $(&quot;#b1&quot;).click(function () &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;abc&quot;)</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//JQuery入口函数(dom文档加载完成之后执行该函数中的代码)</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//1.获取b1按钮</span></span><br><span class="line">            $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   window.onload 和 $(function) 区别：</span></span><br><span class="line"><span class="comment">        *       * window.onload 只能定义一次，如果定义多次，后边的会将前面的覆盖掉</span></span><br><span class="line"><span class="comment">        *       * $(function) 可以定义多次</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;b1&quot;</span> value=<span class="string">&quot;点我&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="6-样式控制："><a href="#6-样式控制：" class="headerlink" title="6. 样式控制："></a>6. 样式控制：</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;样式控制&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//改变div1背景颜色</span></span><br><span class="line">            <span class="comment">// $(&quot;#div1&quot;).css(&quot;background-color&quot;,&quot;red&quot;);//方式1</span></span><br><span class="line">            $(<span class="string">&quot;#div1&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);<span class="comment">//方式2，这种可以检测单词是否拼写正确</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;div1...&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div2&quot;</span>&gt;div2...&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="7-选择器："><a href="#7-选择器：" class="headerlink" title="7. 选择器："></a>7. 选择器：</h2><h3 id="1-基本选择器："><a href="#1-基本选择器：" class="headerlink" title="1. 基本选择器："></a>1. 基本选择器：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 标签选择器（元素选择器）</span><br><span class="line">        * 语法： $(&quot;html标签名&quot;) 获得所有匹配标签名称的元素</span><br><span class="line">2. id选择器 </span><br><span class="line">        * 语法： $(&quot;#id的属性值&quot;) 获得与指定id属性值匹配的元素</span><br><span class="line">3. 类选择器</span><br><span class="line">        * 语法： $(&quot;.class的属性值&quot;) 获得与指定的class属性值匹配的元素</span><br><span class="line">4. 并集选择器：</span><br><span class="line">        * 语法： $(&quot;选择器1,选择器2....&quot;) 获取多个选择器选中的所有元素</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">   // <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;改变 id 为 one 的元素的背景色为 红色&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span>/&gt;</span></span><br><span class="line">   $(&quot;#b1&quot;).click(function () &#123;</span><br><span class="line">          $(&quot;#one&quot;).css(&quot;backgroundColor&quot;, &quot;pink&quot;);</span><br><span class="line">   &#125;);</span><br><span class="line">   // <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot; 改变元素名为 &lt;div&gt; 的所有元素的背景色为 红色&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;b2&quot;</span>/&gt;</span></span><br><span class="line">   $(&quot;#b2&quot;).click(function () &#123;</span><br><span class="line">          $(&quot;div&quot;).css(&quot;backgroundColor&quot;, &quot;pink&quot;);</span><br><span class="line">   &#125;);</span><br><span class="line">   // <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot; 改变 class 为 mini 的所有元素的背景色为 红色&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;b3&quot;</span>/&gt;</span></span><br><span class="line">   $(&quot;#b3&quot;).click(function () &#123;</span><br><span class="line">          $(&quot;.mini&quot;).css(&quot;backgroundColor&quot;, &quot;pink&quot;);</span><br><span class="line">   &#125;);</span><br><span class="line">   // <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot; 改变所有的&lt;span&gt;元素和 id 为 two 的元素的背景色为红色&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;b4&quot;</span>/&gt;</span></span><br><span class="line">   $(&quot;#b4&quot;).click(function () &#123;</span><br><span class="line">          $(&quot;span,#two&quot;).css(&quot;backgroundColor&quot;,&quot;pink&quot;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-层级选择器："><a href="#2-层级选择器：" class="headerlink" title="2. 层级选择器："></a>2. 层级选择器：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 后代选择器</span><br><span class="line">        * 语法： $(&quot;A B &quot;) 选择A元素内部的所有B元素        </span><br><span class="line">2. 子选择器</span><br><span class="line">        * 语法： $(&quot;A &gt; B&quot;) 选择A元素内部的所有B子元素</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">         //<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot; 改变 &lt;body&gt; 内所有 &lt;div&gt; 的背景色为红色&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;body div&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="handlebars"><span class="xml">         //<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot; 改变 &lt;body&gt; 内子 &lt;div&gt; 的背景色为 红色&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;b2&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;#b2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;body &gt; div&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span></span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-属性选择器："><a href="#3-属性选择器：" class="headerlink" title="3. 属性选择器："></a>3. 属性选择器：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 属性名称选择器 </span><br><span class="line">        * 语法： $(&quot;A[属性名]&quot;) 包含指定属性的选择器</span><br><span class="line">2. 属性选择器</span><br><span class="line">        * 语法： $(&quot;A[属性名&#x3D;&#39;值&#39;]&quot;) 包含指定属性等于指定值的选择器</span><br><span class="line">3. 复合属性选择器</span><br><span class="line">        * 语法： $(&quot;A[属性名&#x3D;&#39;值&#39;][]...&quot;) 包含多个属性条件的选择器</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 含有属性title 的div元素背景色为红色&quot;  id=&quot;b1&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div[title]&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 属性title值等于test的div元素背景色为红色&quot;  id=&quot;b2&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div[title=&#x27;test&#x27;]&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 属性title值不等于test的div元素(没有属性title的也将被选中)背景色为红色&quot;  id=&quot;b3&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b3&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div[title!=&#x27;test&#x27;]&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 属性title值 以te开始 的div元素背景色为红色&quot;  id=&quot;b4&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b4&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div[title ^=&#x27;te&#x27;]&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 属性title值 以est结束 的div元素背景色为红色&quot;  id=&quot;b5&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b5&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div[title $=&#x27;est&#x27;]&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot;属性title值 含有es的div元素背景色为红色&quot;  id=&quot;b6&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b6&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div[title *= &#x27;es&#x27;]&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot;选取有属性id的div元素，然后在结果中选取属性title值含有“es”的 div 元素背景色为红色&quot;  id=&quot;b7&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b7&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div[id][title *= &#x27;es&#x27;]&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-过滤选择器："><a href="#4-过滤选择器：" class="headerlink" title="4. 过滤选择器："></a>4. 过滤选择器：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 首元素选择器 </span><br><span class="line">        * 语法： :first 获得选择的元素中的第一个元素</span><br><span class="line">2. 尾元素选择器 </span><br><span class="line">        * 语法： :last 获得选择的元素中的最后一个元素</span><br><span class="line">3. 非元素选择器</span><br><span class="line">        * 语法： :not(selector) 不包括指定内容的元素</span><br><span class="line">4. 偶数选择器</span><br><span class="line">        * 语法： :even 偶数，从 0 开始计数</span><br><span class="line">5. 奇数选择器</span><br><span class="line">        * 语法： :odd 奇数，从 0 开始计数</span><br><span class="line">6. 等于索引选择器</span><br><span class="line">        * 语法： :eq(index) 指定索引元素</span><br><span class="line">7. 大于索引选择器 </span><br><span class="line">        * 语法： :gt(index) 大于指定索引元素</span><br><span class="line">8. 小于索引选择器 </span><br><span class="line">        * 语法： :lt(index) 小于指定索引元素</span><br><span class="line">. 标题选择器</span><br><span class="line">        * 语法： :header 获得标题（h1~h6）元素，固定写法</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">   </span><br><span class="line">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变第一个 div 元素的背景色为 红色&quot;  id=&quot;b1&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div:first&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变最后一个 div 元素的背景色为 红色&quot;  id=&quot;b2&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div:last&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变class不为 one 的所有 div 元素的背景色为 红色&quot;  id=&quot;b3&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b3&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div:not(.one)&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变索引值为偶数的 div 元素的背景色为 红色&quot;  id=&quot;b4&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b4&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div:even&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变索引值为奇数的 div 元素的背景色为 红色&quot;  id=&quot;b5&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b5&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div:odd&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变索引值为大于 3 的 div 元素的背景色为 红色&quot;  id=&quot;b6&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b6&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div:gt(3)&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变索引值为等于 3 的 div 元素的背景色为 红色&quot;  id=&quot;b7&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b7&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div:eq(3)&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变索引值为小于 3 的 div 元素的背景色为 红色&quot;  id=&quot;b8&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b8&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;div:lt(3)&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">         <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 改变所有的标题元素的背景色为 红色&quot;  id=&quot;b9&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b9&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;:header&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;pink&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="5-表单过滤选择器："><a href="#5-表单过滤选择器：" class="headerlink" title="5. 表单过滤选择器："></a>5. 表单过滤选择器：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 可用元素选择器 </span><br><span class="line">        * 语法： :enabled 获得可用元素</span><br><span class="line">2. 不可用元素选择器 </span><br><span class="line">        * 语法： :disabled 获得不可用元素</span><br><span class="line">3. 选中选择器 </span><br><span class="line">        * 语法： :checked 获得单选&#x2F;复选框选中的元素</span><br><span class="line">4. 选中选择器 </span><br><span class="line">        * 语法： :selected 获得下拉框选中的元素</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 利用 jQuery 对象的 val() 方法改变表单内可用 &lt;input&gt; 元素的值&quot;  id=&quot;b1&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;input[type=&#x27;text&#x27;]:enabled&quot;</span>).val(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 利用 jQuery 对象的 val() 方法改变表单内不可用 &lt;input&gt; 元素的值&quot;  id=&quot;b2&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;input[type=&#x27;text&#x27;]:disabled&quot;</span>).val(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 利用 jQuery 对象的 length 属性获取复选框选中的个数&quot;  id=&quot;b3&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b3&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         alert($(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]:checked&quot;</span>).length);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 利用 jQuery 对象的 length 属性获取下拉框选中的个数&quot;  id=&quot;b4&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b4&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         alert($(<span class="string">&quot;#job &gt; option:selected&quot;</span>).length);</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="8-DOM操作："><a href="#8-DOM操作：" class="headerlink" title="8. DOM操作："></a>8. DOM操作：</h2><h3 id="1-内容操作："><a href="#1-内容操作：" class="headerlink" title="1. 内容操作："></a>1. 内容操作：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.html():获取&#x2F;设置元素的标签体内容</span><br><span class="line">2.text()：获取&#x2F;设置元素的标签体纯文本内容</span><br><span class="line">3.val():获取&#x2F;设置元素的value属性值</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取myinput 的value值</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> val = $(<span class="string">&quot;#myinput&quot;</span>).val();</span></span><br><span class="line">      alert(val);</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> val2 = $(<span class="string">&quot;#myinput&quot;</span>).val(<span class="string">&quot;王五&quot;</span>);<span class="comment">//设置标签体内容</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取mydiv的标签体内容</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> html = $(<span class="string">&quot;#mydiv&quot;</span>).html();</span></span><br><span class="line">      alert(html);</span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;#mydiv&quot;</span>).html(<span class="string">&quot;&lt;p&gt;好好学习&lt;/p&gt;&quot;</span>)<span class="comment">//设置标签体内容</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取mydiv文本内容</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> text = $(<span class="string">&quot;#mydiv&quot;</span>).text();</span></span><br><span class="line">      alert(text);</span><br><span class="line"><span class="javascript">      $(<span class="string">&quot;#mydiv&quot;</span>).text(<span class="string">&quot;天天向上&quot;</span>);</span></span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-属性操作："><a href="#2-属性操作：" class="headerlink" title="2. 属性操作："></a>2. 属性操作：</h3><h4 id="1-通用属性操作："><a href="#1-通用属性操作：" class="headerlink" title="1. 通用属性操作："></a>1. 通用属性操作：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.attr():获取&#x2F;设置元素的属性</span><br><span class="line">2.removeAttr():删除属性</span><br><span class="line">3.prop():获取&#x2F;设置元素的属性</span><br><span class="line">4.removeProp():删除属性</span><br><span class="line"></span><br><span class="line">* attr和prop区别：</span><br><span class="line">    1.如果操作的是元素的固有属性，则建议使用pro；</span><br><span class="line">    2.如果操作的是元素自定义的属性，则建议使用attr</span><br><span class="line">    </span><br><span class="line">    * 复选框状态checked 和 下拉表列中selected 必须用 prop 获取</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//获取北京节点的name属性值</span></span><br><span class="line">      <span class="keyword">var</span> name = $(<span class="string">&quot;#bj&quot;</span>).attr(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">      alert(name);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//设置北京节点的name属性的值为dabeijing</span></span><br><span class="line">      $(<span class="string">&quot;#bj&quot;</span>).attr(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;dabeijing&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//新增北京节点的discription属性 属性值是didu</span></span><br><span class="line">      $(<span class="string">&quot;#bj&quot;</span>).attr(<span class="string">&quot;discription&quot;</span>,<span class="string">&quot;didu&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//删除北京节点的name属性并检验name属性是否存在</span></span><br><span class="line">      $(<span class="string">&quot;#bj&quot;</span>).removeAttr(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获得hobby的的选中状态</span></span><br><span class="line">      <span class="keyword">var</span> prop = $(<span class="string">&quot;#hobby&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>);</span><br><span class="line">      alert(prop);</span><br><span class="line"></span><br><span class="line">   &#125;)</span><br><span class="line">   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-对class属性操作："><a href="#2-对class属性操作：" class="headerlink" title="2. 对class属性操作："></a>2. 对class属性操作：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.addClass():添加class属性值</span><br><span class="line">2.removeClass()：删除class属性值</span><br><span class="line">3.toggleClass():切换class属性</span><br><span class="line">    * toggleClass(&quot;one&quot;):</span><br><span class="line">        * 判断如果元素对象上存在class&#x3D;&quot;one&quot;,则将属性值one删除；</span><br><span class="line">        * 如果不存在，则添加。</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">   &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot;采用属性增加样式(改变id=one的样式)&quot;  id=&quot;b1&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;#one&quot;</span>).prop(<span class="string">&quot;class&quot;</span>,<span class="string">&quot;second&quot;</span>)</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; addClass&quot;  id=&quot;b2&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $(<span class="string">&quot;#one&quot;</span>).addClass(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot;removeClass&quot;  id=&quot;b3&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b3&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;#one&quot;</span>).removeClass(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 切换样式&quot;  id=&quot;b4&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b4&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;#one&quot;</span>).toggleClass(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 通过css()获得id为one背景颜色&quot;  id=&quot;b5&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b5&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">var</span> backgroundColor = $(<span class="string">&quot;#one&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>);</span><br><span class="line">         alert(backgroundColor);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//&lt;input type=&quot;button&quot; value=&quot; 通过css()设置id为one背景颜色为绿色&quot;  id=&quot;b6&quot;/&gt;</span></span><br><span class="line">       $(<span class="string">&quot;#b6&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         $(<span class="string">&quot;#one&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-CRUD操作："><a href="#3-CRUD操作：" class="headerlink" title="3.CRUD操作："></a>3.CRUD操作：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.append():父元素将子元素追加到末尾</span><br><span class="line">    * 对象1.append(对象2)：将对象2添加到对象1元素内部，并且在末尾</span><br><span class="line">2.prepend():父元素将子元素追加到开头</span><br><span class="line">    * 对象1.prepend(对象2)：将对象2添加到对象1元素内部，并且在开头</span><br><span class="line">3.appendTo():父元素将子元素追加到末尾</span><br><span class="line">    * 对象1.appendTo(对象2)：将对象1添加到对象2元素内部，并且在末尾</span><br><span class="line">4.prependTo():父元素将子元素追加到开头</span><br><span class="line">    * 对象1.prependTo(对象2)：将对象1添加到对象2元素内部，并且在开头</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5.after():添加元素到元素后边</span><br><span class="line">    * 对象1.after(对象2)：将对象2添加到对象1后边。两者是兄弟关系</span><br><span class="line">6.before():添加元素到元素前边</span><br><span class="line">    * 对象1.before(对象2)：将对象2添加到对象1前边。两者是兄弟关系</span><br><span class="line">7.insertAfter():添加元素到元素后边</span><br><span class="line">    * 对象1.insertAfter(对象2)：将对象1添加到对象2后边。两者是兄弟关系</span><br><span class="line">8.insertBefore():添加元素到元素前边</span><br><span class="line">    * 对象1.insertBefore(对象2)：将对象1添加到对象2前边。两者是兄弟关系</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9.remove():移除元素</span><br><span class="line">    * 对象.remove():将对象删除掉</span><br><span class="line">10.empty():清空元素的所有后代元素</span><br><span class="line">    * 对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// &lt;input type=&quot;button&quot; value=&quot;将反恐放置到city的后面&quot;  id=&quot;b1&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b1&quot;</span>).click(</span><br><span class="line">            <span class="comment">//append:</span></span><br><span class="line">            <span class="comment">// $(&quot;#city&quot;).append($(&quot;#fk&quot;))</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//appendTo:</span></span><br><span class="line">            $(<span class="string">&quot;#fk&quot;</span>).appendTo($(<span class="string">&quot;#city&quot;</span>))</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// &lt;input type=&quot;button&quot; value=&quot;将反恐放置到city的最前面&quot;  id=&quot;b2&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//prepend:</span></span><br><span class="line">            <span class="comment">// $(&quot;#city&quot;).prepend($(&quot;#fk&quot;))</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//prependTo:</span></span><br><span class="line">            $(<span class="string">&quot;#fk&quot;</span>).prependTo($(<span class="string">&quot;#city&quot;</span>))</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// &lt;input type=&quot;button&quot; value=&quot;将反恐插入到天津后面&quot;  id=&quot;b3&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b3&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">//insertAfter:</span></span><br><span class="line">         <span class="comment">// $(&quot;#fk&quot;).insertAfter($(&quot;#tj&quot;))</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//After:</span></span><br><span class="line">         $(<span class="string">&quot;#tj&quot;</span>).after($(<span class="string">&quot;#fk&quot;</span>))</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// &lt;input type=&quot;button&quot; value=&quot;将反恐插入到天津前面&quot;  id=&quot;b4&quot;/&gt;</span></span><br><span class="line">      $(<span class="string">&quot;#b4&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="comment">//before:</span></span><br><span class="line">         <span class="comment">// $(&quot;#tj&quot;).before($(&quot;#fk&quot;))</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//insertBefore:</span></span><br><span class="line">         $(<span class="string">&quot;#fk&quot;</span>).insertBefore($(<span class="string">&quot;#tj&quot;</span>))</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// &lt;input type=&quot;button&quot; value=&quot;删除&lt;li id=&#x27;bj&#x27; name=&#x27;beijing&#x27;&gt;北京&lt;/li&gt;&quot;  id=&quot;b1&quot;/&gt;</span></span><br><span class="line">   $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">&quot;#bj&quot;</span>).remove();</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// &lt;input type=&quot;button&quot; value=&quot;删除city所有的li节点   清空元素中的所有后代节点(不包含属性节点)&quot;  id=&quot;b2&quot;/&gt;</span></span><br><span class="line">   $(<span class="string">&quot;#b2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">&quot;#city&quot;</span>).empty();</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="JQuery高级："><a href="#JQuery高级：" class="headerlink" title="JQuery高级："></a>JQuery高级：</h1><h2 id="1-动画："><a href="#1-动画：" class="headerlink" title="1. 动画："></a>1. 动画：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.默认显示和隐藏方式：</span><br><span class="line">    1.show([speed,[easing],[fn]])</span><br><span class="line">    2.hide([speed,[easing],[fn]])</span><br><span class="line">    3.toggle([speed],[easing],[fn])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 参数：</span><br><span class="line">    1.speed:动画的速度。三个预定义的值(&quot;slow&quot;,&quot;normal&quot;,&quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)</span><br><span class="line">    2.easing：用来指定切换效果，默认是&quot;swing&quot;,可用参数&quot;linear&quot;</span><br><span class="line">            * swing:动画执行时效果是：先慢，中间快，最后又慢</span><br><span class="line">            * linear：动画执行时速度是匀速的</span><br><span class="line">    3.fn:在动画完成时执行的函数，每一个元素执行一次。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.滑动显示和隐藏方式：</span><br><span class="line">    1.slideDown([speed],[easing],[fn])</span><br><span class="line">    2.slideUp([speed,[easing],[fn]])</span><br><span class="line">    3.slideToggle([speed],[easing],[fn])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.淡入淡出显示和隐藏方式：</span><br><span class="line">    1.fadeIn([speed],[easing],[fn])</span><br><span class="line">    2.fadeOut([speed],[easing],[fn])</span><br><span class="line">    3.fadeToggle([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">//隐藏div</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">hideFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">/*$(&quot;#showDiv&quot;).hide(&quot;slow&quot;,&quot;swing&quot;,function() &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;隐藏了&quot;)</span></span><br><span class="line"><span class="comment">            &#125;);*/</span></span><br><span class="line">            <span class="comment">// $(&quot;#showDiv&quot;).hide(&quot;slow&quot;,&quot;swing&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//滑动</span></span><br><span class="line">            <span class="comment">// $(&quot;#showDiv&quot;).slideUp(&quot;slow&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//淡入淡出：</span></span><br><span class="line">            $(<span class="string">&quot;#showDiv&quot;</span>).fadeOut(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示div</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">showFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="comment">/* $(&quot;#showDiv&quot;).show(&quot;slow&quot;,&quot;swing&quot;,function () &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;显示了&quot;)</span></span><br><span class="line"><span class="comment">            &#125;);*/</span></span><br><span class="line">           <span class="comment">// $(&quot;#showDiv&quot;).show(&quot;slow&quot;,&quot;swing&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//滑动</span></span><br><span class="line">            <span class="comment">// $(&quot;#showDiv&quot;).slideDown(&quot;slow&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//淡入淡出：</span></span><br><span class="line">            $(<span class="string">&quot;#showDiv&quot;</span>).fadeIn(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//切换显示和隐藏div</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">toggleFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">/*// $(&quot;#showDiv&quot;).toggle(&quot;slow&quot;,&quot;swing&quot;);</span></span><br><span class="line"><span class="comment">            $(&quot;#showDiv&quot;).toggle(&quot;5000&quot;);*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//滑动：</span></span><br><span class="line">            <span class="comment">// $(&quot;#showDiv&quot;).slideToggle(&quot;slow&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//淡入淡出：</span></span><br><span class="line">            $(<span class="string">&quot;#showDiv&quot;</span>).fadeToggle(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-遍历："><a href="#2-遍历：" class="headerlink" title="2. 遍历："></a>2. 遍历：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.js的遍历方式；</span><br><span class="line">    * for(初始值;循环结束条件;步长)</span><br><span class="line">2.jq的遍历方式：</span><br><span class="line">    1.jq对象.each(callback)</span><br><span class="line">    2.$.each(object,[callback])</span><br><span class="line">    3.for..of:</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.js的遍历方式；</span></span><br><span class="line"><span class="comment">            * for(初始值;循环结束条件;步长)</span></span><br><span class="line"><span class="comment">        2.jq的遍历方式：</span></span><br><span class="line"><span class="comment">           1.jq对象.each(callback)</span></span><br><span class="line"><span class="comment">            2.$.each(object,[callback])</span></span><br><span class="line"><span class="comment">            3.for..of:</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//js的遍历方式；</span></span><br><span class="line">                <span class="comment">//* for(初始值;循环结束条件;步长)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取city下的所有li</span></span><br><span class="line">            <span class="keyword">var</span> citys = $(<span class="string">&quot;#city li&quot;</span>);</span><br><span class="line">            <span class="comment">//2.遍历</span></span><br><span class="line">           <span class="comment">/* for (var i = 0;i &lt; citys.length;i ++) &#123;</span></span><br><span class="line"><span class="comment">                if (&quot;上海&quot; == citys[i].innerHTML) &#123;</span></span><br><span class="line"><span class="comment">                    break;</span></span><br><span class="line"><span class="comment">                    //continue;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                alert(i + &quot;:&quot; + citys[i].innerHTML)</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">/* 2.jq的遍历方式：</span></span><br><span class="line"><span class="comment">               1.jq对象.each(callback)*/</span></span><br><span class="line">         citys.each(<span class="function"><span class="keyword">function</span> (<span class="params">index,element</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//2.1 获取li对象，第一种方式  this</span></span><br><span class="line">            <span class="comment">//  alert(this.innerHTML);</span></span><br><span class="line">             <span class="comment">//alert($(this).html());</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//2.2 获取li对象，第二种方式，在回调函数中定义参数     index(索引)    element(元素对象)</span></span><br><span class="line">             <span class="comment">//alert(index + &quot;:&quot; + element.innerHTML);</span></span><br><span class="line">             <span class="comment">//alert(index + &quot;:&quot; + $(element).html());</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//判断如果是上海，则结束循环</span></span><br><span class="line">           <span class="comment">/*  if (&quot;上海&quot; == $(element).html()) &#123;</span></span><br><span class="line"><span class="comment">                 //如果当前function返回为false，则结束循环(break)</span></span><br><span class="line"><span class="comment">                 //如果返回为true，则结束本次循环，继续下次循环(continue)</span></span><br><span class="line"><span class="comment">                 //return false;</span></span><br><span class="line"><span class="comment">                 return true;</span></span><br><span class="line"><span class="comment">             &#125;</span></span><br><span class="line"><span class="comment">             alert(index + &quot;:&quot; + $(element).html())*/</span></span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.$.each(object,[callback])</span></span><br><span class="line">            <span class="comment">/*$.each(citys,function () &#123;</span></span><br><span class="line"><span class="comment">                alert($(this).html());</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            <span class="comment">//3.for..of:    jquery3.0 之后提供的</span></span><br><span class="line">            <span class="keyword">for</span> (li <span class="keyword">of</span> citys) &#123;</span><br><span class="line">                alert($(li).html())</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-事件绑定："><a href="#3-事件绑定：" class="headerlink" title="3. 事件绑定："></a>3. 事件绑定：</h2><h3 id="1-jquery标准的绑定方式："><a href="#1-jquery标准的绑定方式：" class="headerlink" title="1. jquery标准的绑定方式："></a>1. jquery标准的绑定方式：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* jq对象.事件方法(回调函数);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取name对象，绑定事件</span></span><br><span class="line">            <span class="comment">/*$(&quot;#name&quot;).click(function () &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;我被点击了。。。&quot;)</span></span><br><span class="line"><span class="comment">            &#125;);*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//给name绑定鼠标移动到元素之上事件。绑定鼠标移出事件</span></span><br><span class="line">           <span class="comment">/* $(&quot;#name&quot;).mouseover(function () &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;鼠标来啦。。。&quot;)</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">            $(&quot;#name&quot;).mouseout(function () &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;鼠标走了。。。&quot;)</span></span><br><span class="line"><span class="comment">            &#125;);*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//简化操作，链式编程</span></span><br><span class="line">            <span class="comment">/*$(&quot;#name&quot;).mouseover(function () &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;鼠标来啦。。。&quot;)</span></span><br><span class="line"><span class="comment">            &#125;).mouseout(function () &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;鼠标走啦。。。&quot;)</span></span><br><span class="line"><span class="comment">            &#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            alert(<span class="string">&quot;我要获得焦点啦。。。&quot;</span>);</span><br><span class="line">            $(<span class="string">&quot;#name&quot;</span>).focus();<span class="comment">//让文本框获得焦点</span></span><br><span class="line">            <span class="comment">//表单对象.submit();//让表单提交</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-on绑定事件-off接触绑定"><a href="#2-on绑定事件-off接触绑定" class="headerlink" title="2. on绑定事件/off接触绑定"></a>2. on绑定事件/off接触绑定</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* jq对象.on(&quot;事件名称&quot;,回调函数)</span><br><span class="line">* jq对象.off(&quot;事件名称&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//给btn绑定点击事件</span></span><br><span class="line">        $(<span class="string">&quot;#btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;我被点击了。。。&quot;</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//点击btn2，接触btn的点击事件</span></span><br><span class="line">        $(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// $(&quot;#btn&quot;).off(&quot;click&quot;);</span></span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).off();<span class="comment">//如果不填参数，则将btn上面所有的参数都删除掉</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-事件切换：toggle"><a href="#3-事件切换：toggle" class="headerlink" title="3. 事件切换：toggle"></a>3. 事件切换：toggle</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* jq对象.toggle(fn1,fn2...)</span><br><span class="line">        * 当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2.....</span><br><span class="line">            </span><br><span class="line">        * 注意：1.9版本 .toggle() 方法删除,jQuery Migrate（迁移）插件可以恢复此功能。</span><br><span class="line">             &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;jquery-migrate-1.0.0.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;jquery-3.3.1.min.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;..&#x2F;js&#x2F;jquery-migrate-1.0.0.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    $(function () &#123;</span><br><span class="line">        &#x2F;&#x2F;获取按钮，调用toggle方法</span><br><span class="line">        $(&quot;#btn&quot;).toggle(function () &#123;</span><br><span class="line">            &#x2F;&#x2F;改变div背景色为 green</span><br><span class="line">            $(&quot;#myDiv&quot;).css(&quot;backgroundColor&quot;,&quot;green&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;,function () &#123;</span><br><span class="line">            &#x2F;&#x2F;改变div背景色为pink</span><br><span class="line">            $(&quot;#myDiv&quot;).css(&quot;backgroundColor&quot;,&quot;pink&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-案例："><a href="#4-案例：" class="headerlink" title="4. 案例："></a>4. 案例：</h2><h3 id="1-广告显示和隐藏："><a href="#1-广告显示和隐藏：" class="headerlink" title="1. 广告显示和隐藏："></a>1. 广告显示和隐藏：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;广告的自动显示与隐藏&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #content&#123;width:100%;height:500px;background:#999&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--引入jquery--&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求：</span></span><br><span class="line"><span class="comment">            1. 当页面加载完，3秒后。自动显示广告</span></span><br><span class="line"><span class="comment">            2. 广告显示5秒后，自动消失。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            分析：</span></span><br><span class="line"><span class="comment">            1. 使用定时器来完成。setTimeout (执行一次定时器)</span></span><br><span class="line"><span class="comment">            2. 分析发现JQuery的显示和隐藏动画效果其实就是控制display</span></span><br><span class="line"><span class="comment">            3. 使用  show/hide方法来完成广告的显示</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//入口函数，在页面加载完成之后，定义定时器，调用这两个方法</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//定义定时器，调用adshow方法，3秒后执行一次</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(adshow,<span class="number">3000</span>);</span><br><span class="line">            <span class="comment">//定义定时器，调用adhidden方法，8秒后执行一次</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(adhide,<span class="number">8000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示广告</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">adshow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取广告div，调用显示方法</span></span><br><span class="line">            $(<span class="string">&quot;#ad&quot;</span>).show(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//隐藏广告</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">adhide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取广告div，调用隐藏方法</span></span><br><span class="line">            $(<span class="string">&quot;#ad&quot;</span>).hide(<span class="string">&quot;slow&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 整体的DIV --&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- 广告DIV --&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;ad&quot;</span> style=<span class="string">&quot;display: none;&quot;</span>&gt;</span><br><span class="line">        &lt;img style=<span class="string">&quot;width:100%&quot;</span> src=<span class="string">&quot;../img/adv.jpg&quot;</span> /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 下方正文部分 --&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">        正文部分</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="2-抽奖："><a href="#2-抽奖：" class="headerlink" title="2. 抽奖："></a>2. 抽奖：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;jquery案例之抽奖&lt;/title&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/jquery-3.3.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            分析：</span></span><br><span class="line"><span class="comment">                1. 给开始按钮绑定单击事件</span></span><br><span class="line"><span class="comment">                    1.1 定义循环定时器</span></span><br><span class="line"><span class="comment">                    1.2 切换小相框的src属性</span></span><br><span class="line"><span class="comment">                        * 定义数组，存放图片资源路径</span></span><br><span class="line"><span class="comment">                        * 生成随机数。数组索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                2. 给结束按钮绑定单击事件</span></span><br><span class="line"><span class="comment">                    1.1 停止定时器</span></span><br><span class="line"><span class="comment">                    1.2 给大相框设置src属性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装所有照片为数组</span></span><br><span class="line">        <span class="keyword">var</span> imgs = [</span><br><span class="line">            <span class="string">&quot;../img/man00.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;../img/man01.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;../img/man02.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;../img/man03.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;../img/man04.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;../img/man05.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;../img/man06.jpg&quot;</span>,</span><br><span class="line">            ];</span><br><span class="line">        <span class="keyword">var</span> startID;<span class="comment">//开始定时器的id</span></span><br><span class="line">        <span class="keyword">var</span> index;<span class="comment">//随机角标</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//处理按钮是否可以使用的效果</span></span><br><span class="line">            $(<span class="string">&quot;#startID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">            $(<span class="string">&quot;#stopID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1. 给开始按钮绑定单击事件</span></span><br><span class="line">            $(<span class="string">&quot;#startID&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//1.1 定义循环定时器，每20秒执行一次</span></span><br><span class="line">                startID = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="comment">//处理按钮是否可以使用的效果</span></span><br><span class="line">                    $(<span class="string">&quot;#startID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">                    $(<span class="string">&quot;#stopID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">//1.2 生成随机脚标 0 ~ 6</span></span><br><span class="line">                    index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">7</span>);<span class="comment">//随机生成0.000 - 6.999，然后向下取整</span></span><br><span class="line">                    <span class="comment">//1.3 设置小相框的src属性</span></span><br><span class="line">                    $(<span class="string">&quot;#img1ID&quot;</span>).prop(<span class="string">&quot;src&quot;</span>,imgs[index]);</span><br><span class="line">                &#125;,<span class="number">20</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 给结束按钮绑定单击事件</span></span><br><span class="line">            $(<span class="string">&quot;#stopID&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//处理按钮是否可以使用的效果</span></span><br><span class="line">                $(<span class="string">&quot;#startID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">                $(<span class="string">&quot;#stopID&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//2.1 停止定时器</span></span><br><span class="line">                <span class="built_in">clearInterval</span>(startID);</span><br><span class="line">                <span class="comment">//2.2 给大相框设置src属性</span></span><br><span class="line">                $(<span class="string">&quot;#img2ID&quot;</span>).prop(<span class="string">&quot;src&quot;</span>,imgs[index]);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 小像框 --&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;border-style:dotted;width:160px;height:100px&quot;</span>&gt;</span><br><span class="line">    &lt;img id=<span class="string">&quot;img1ID&quot;</span> src=<span class="string">&quot;../img/man00.jpg&quot;</span> style=<span class="string">&quot;width:160px;height:100px&quot;</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 大像框 --&gt;</span><br><span class="line">&lt;div</span><br><span class="line">        style=<span class="string">&quot;border-style:double;width:800px;height:500px;position:absolute;left:500px;top:10px&quot;</span>&gt;</span><br><span class="line">    &lt;img id=<span class="string">&quot;img2ID&quot;</span> src=<span class="string">&quot;../img/man00.jpg&quot;</span> width=<span class="string">&quot;800px&quot;</span> height=<span class="string">&quot;500px&quot;</span>/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 开始按钮 --&gt;</span><br><span class="line">&lt;input</span><br><span class="line">        id=<span class="string">&quot;startID&quot;</span></span><br><span class="line">        type=<span class="string">&quot;button&quot;</span></span><br><span class="line">        value=<span class="string">&quot;点击开始&quot;</span></span><br><span class="line">        style=<span class="string">&quot;width:150px;height:150px;font-size:22px&quot;</span></span><br><span class="line">        onclick=<span class="string">&quot;imgStart()&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 停止按钮 --&gt;</span><br><span class="line">&lt;input</span><br><span class="line">        id=<span class="string">&quot;stopID&quot;</span></span><br><span class="line">        type=<span class="string">&quot;button&quot;</span></span><br><span class="line">        value=<span class="string">&quot;点击停止&quot;</span></span><br><span class="line">        style=<span class="string">&quot;width:150px;height:150px;font-size:22px&quot;</span></span><br><span class="line">        onclick=<span class="string">&quot;imgStop()&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script language=<span class="string">&#x27;javascript&#x27;</span> type=<span class="string">&#x27;text/javascript&#x27;</span>&gt;</span><br><span class="line">    <span class="comment">//准备一个一维数组，装用户的像片路径</span></span><br><span class="line">    <span class="keyword">var</span> imgs = [</span><br><span class="line">        <span class="string">&quot;../img/man00.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;../img/man01.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;../img/man02.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;../img/man03.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;../img/man04.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;../img/man05.jpg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;../img/man06.jpg&quot;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-插件：增强JQuery的功能"><a href="#5-插件：增强JQuery的功能" class="headerlink" title="5. 插件：增强JQuery的功能"></a>5. 插件：增强JQuery的功能</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实现方式：</span><br><span class="line">        1. $.fn.extend(object) </span><br><span class="line">            * 增强通过Jquery获取的对象的功能  $(&quot;#id&quot;)</span><br><span class="line">        2. $.extend(object)</span><br><span class="line">            * 增强JQeury对象自身的功能  $&#x2F;jQuery</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        <span class="comment">//使用jquery插件 给jq对象添加2个方法 check()选中所有复选框，uncheck()取消选中所有复选框</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义jquery对象插件：</span></span><br><span class="line">        $.fn.extend(&#123;</span><br><span class="line">            <span class="comment">//定义一个check()方法，所有的jq对象都可以调用</span></span><br><span class="line">            check:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//让复选框选中</span></span><br><span class="line">                <span class="built_in">this</span>.prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            uncheck:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//让复选框不选中</span></span><br><span class="line">                <span class="built_in">this</span>.prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//获取按钮</span></span><br><span class="line">            <span class="comment">// $(&quot;#btn-check&quot;).check();</span></span><br><span class="line">            <span class="comment">//复选框对象.check();</span></span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#btn-check&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).check();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#btn-uncheck&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).uncheck();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//对全局方法扩展2个方法，扩展min方法：求2个值的最小值；扩展max方法：求2个值最大值</span></span><br><span class="line">    $.extend( &#123;</span><br><span class="line">        max:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a &gt;= b ? a : b;</span><br><span class="line">        &#125;,</span><br><span class="line">        min:<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a &lt;= b ? a : b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用全局方法</span></span><br><span class="line">    <span class="keyword">var</span> max = $.max(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    alert(max);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> min = $.min(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    alert(min);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html &amp; CSS &amp; JavaScript的学习</title>
      <link href="/2020/08/12/html+css+JavaScript/"/>
      <url>/2020/08/12/html+css+JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是最基础的网页开发语言</span><br><span class="line">* Hyper Text Markup Language 超文本标记语言</span><br><span class="line">    * 超文本：</span><br><span class="line">        * 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本。</span><br><span class="line">    * 标记语言：</span><br><span class="line">        * 由标签构成的语言。&lt;标签名称&gt; 如 html，xml</span><br><span class="line">        * 标记语言不是编程语言</span><br></pre></td></tr></table></figure><h2 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2. 快速入门："></a>2. 快速入门：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：</span><br><span class="line">    1. html文档后缀名为.html或者 .htm</span><br><span class="line">    2. 标签分为：</span><br><span class="line">        1. 围堵标签：有开始标签和结束标签。如 &lt;html&gt;&lt;&#x2F;html&gt;</span><br><span class="line">        2. 自闭和标签：开始标签和结束标签在一起。如&lt;br&#x2F;&gt;</span><br><span class="line">    3. 标签可以嵌套：</span><br><span class="line">        需要正确嵌套，不能你中有我，我中有你</span><br><span class="line">        错误：&lt;a&gt;&lt;b&gt;&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;</span><br><span class="line">        正确：&lt;a&gt;&lt;b&gt;&lt;&#x2F;b&gt;&lt;&#x2F;a&gt;</span><br><span class="line">    4. 在开始标签中可以定义属性。属性时由键值对构成，值需要用引号(单双都可)引起来</span><br><span class="line">    5. html的标签不区分大小写，但是建议使用小写。</span><br></pre></td></tr></table></figure><h2 id="3-标签："><a href="#3-标签：" class="headerlink" title="3. 标签："></a>3. 标签：</h2><h3 id="1-文件标签："><a href="#1-文件标签：" class="headerlink" title="1. 文件标签："></a>1. 文件标签：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* 文件标签：构成html最基本的标签</span><br><span class="line">* html：html文档的根标签</span><br><span class="line">* head：头标签。用于指定html文档的一些属性。引入外部的资源</span><br><span class="line">* title：标题标签</span><br><span class="line">* body：体标签</span><br><span class="line">* <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>：html5中定义该文档是html文档</span><br></pre></td></tr></table></figure><h3 id="2-文本标签："><a href="#2-文本标签：" class="headerlink" title="2. 文本标签："></a>2. 文本标签：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* 和文本有关的内容</span><br><span class="line">* 注释：<span class="comment">&lt;!-- 注释内容 --&gt;</span></span><br><span class="line">* <span class="tag">&lt;<span class="name">h1</span>&gt;</span>to<span class="tag">&lt;<span class="name">h6</span>&gt;</span>：标题标签</span><br><span class="line">    * h1~h6：字体大小逐渐递减</span><br><span class="line">* <span class="tag">&lt;<span class="name">p</span>&gt;</span>：段落标签</span><br><span class="line">* <span class="tag">&lt;<span class="name">br</span>&gt;</span>：换行标签</span><br><span class="line">* <span class="tag">&lt;<span class="name">hr</span>&gt;</span>：展示一条水平线</span><br><span class="line">    * 属性：</span><br><span class="line">        * color：颜色</span><br><span class="line">        * width：宽度</span><br><span class="line">        * size：高度</span><br><span class="line">        * align：对其方式</span><br><span class="line">            * center：居中</span><br><span class="line">            * left：左对齐</span><br><span class="line">            * right：右对齐</span><br><span class="line">* <span class="tag">&lt;<span class="name">b</span>&gt;</span>：字体加粗</span><br><span class="line">* <span class="tag">&lt;<span class="name">i</span>&gt;</span>：字体斜体</span><br><span class="line">* <span class="tag">&lt;<span class="name">font</span>&gt;</span>：字体标签</span><br><span class="line">* <span class="tag">&lt;<span class="name">center</span>&gt;</span>：文本居中</span><br><span class="line">    * 属性：</span><br><span class="line">        * color：颜色</span><br><span class="line">        * size：大小</span><br><span class="line">        * face：字体</span><br><span class="line">    </span><br><span class="line"> * 属性定义：</span><br><span class="line">    * color：</span><br><span class="line">        1.英文档次：red,green,blue</span><br><span class="line">        2.rgb(值1，值2，值3)：值的范围：0~255    如：rgb(0,0,225)</span><br><span class="line">        3.#值1值2值3：值的范围：00~FF之间。如：#FF00FF</span><br><span class="line">    * width：</span><br><span class="line">        1.数值：width=&#x27;20&#x27;,数值的单位，默认是(像素)</span><br><span class="line">        2.数值%：占比相当于父元素的比例(屏幕)</span><br></pre></td></tr></table></figure><ul><li><p>案例简介：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>公司简介<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;#ffcc66&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span>”中关村黑马程序员训练营”<span class="tag">&lt;/<span class="name">font</span>&gt;</span>是由<span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>传智播客<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>联合中关村软件园、CSDN ,并委托传智播客进行教学实施的软件开发高端培训机构,致力于服务各大软件企业,解决当前软件开发技术飞速发</span><br><span class="line">展，而企业招不到优秀人才的困扰。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">目前，&quot;中关村黑 马程序员训练营&quot;已成长为行业”学员质量好、课程内容深、企业满意&quot;的移动开发高端训练基地,并被评为中关村软件园重点扶持人才企业。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">黑马程序员的学员多为大学毕业后,有理想、有梦想,想从事IT行业,而没有环境和机遇改变自己命运的年轻人。黑马程序员的学员筛选制度,远比现在90%以上的企业招聘流程更为严</span><br><span class="line">格。任何-名学员想成功入学”黑马程序员” ,必须经历长达2个月的面试流程,这些流程中不仅包括严格的技术测试、自学能力测试,还包括性格测试、压力测试、品德测试等等测试。</span><br><span class="line">毫不夸张地说.黑马程序员训练营所有学员都是精挑细选出来的。百里挑- -的残酷筛选制度确保学员质量,并降低企业的用人风险。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">中关村黑马程序员训练营不仅着重培养学员的基础理论知识,更注重培养项目实施管理能力，并密切关注技术革新,不断引入先进的技术,研发更新技术课程,确保学员进入企业后不仅能独</span><br><span class="line">立从事开发工作,更能给企业带来新的技术体系和理念。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">一直以来,黑马程序员以技术视角关注IT产业发展,以深度分享推进产业技术成长,致力于弘扬技术创新,倡导分享、开放和协作,努力打造高质量的IT人才服务平台。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">&quot;#ffcc66&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">color</span>=<span class="string">&quot;gray&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">        江苏传智播客教育科技股份有限公司<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        版权所有Copyright<span class="symbol">&amp;copy;</span>2006-2018, All Rights Reserved苏ICP备16007882</span><br><span class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果图展示：</p><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\NiuLinXuan\AppData\Roaming\Typora\typora-user-images\image-20200413131944958.png" alt="image-20200413131944958"></p></li></ul><h3 id="3-图片标签："><a href="#3-图片标签：" class="headerlink" title="3. 图片标签："></a>3. 图片标签：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* img:展示图片</span><br><span class="line"></span><br><span class="line">* 相对路径</span><br><span class="line">    * 以.开头的路径</span><br><span class="line">        * ./:代表当前目录    ./image/1.jpg</span><br><span class="line">        * ../：代表上一级目录  ../image/2.jpg</span><br><span class="line">        </span><br><span class="line">eg:<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/img100.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-列表标签："><a href="#4-列表标签：" class="headerlink" title="4. 列表标签："></a>4. 列表标签：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* 有序列表：</span><br><span class="line">    * ol：有序</span><br><span class="line">    * li：列表项</span><br><span class="line">  * 代码示例：</span><br><span class="line">    </span><br><span class="line">**    早上起床做的事情</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;A&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>睁眼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>看手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>穿衣服<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        **</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">* 无序列表：</span><br><span class="line">    * ul：</span><br><span class="line">    * li：</span><br><span class="line">   * 代码示例：</span><br><span class="line">    早上起床做的事情</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;disc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>睁眼<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>看手机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>穿衣服<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-链接标签："><a href="#5-链接标签：" class="headerlink" title="5. 链接标签："></a>5. 链接标签：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* a：定义一个超链接</span><br><span class="line">    * 属性：</span><br><span class="line">        * href：指定访问资源的URL(统一资源定位符)</span><br><span class="line">        * target：指定打开资源的方式</span><br><span class="line">            * _self：默认值，在当前页面打开</span><br><span class="line">            * _blank：在空白页面打开</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>链接标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--超链接标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>在空白窗口打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>默认值，在当前页面打开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;5_列表标签.html&quot;</span>&gt;</span>跳转本地链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;maileto:308619965@qq.com&quot;</span>&gt;</span>联系我们，自动打开本地邮箱工具<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 点击图片跳转链接--&gt;</span></span><br><span class="line">&lt;a href=&quot;http://www.baidu.com&quot;&gt;&lt;img src=&quot;../image/img100.jpg&quot;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-块标签：div和span"><a href="#6-块标签：div和span" class="headerlink" title="6. 块标签：div和span"></a>6. 块标签：div和span</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* div：每一个div占满一整行。块级标签</span><br><span class="line">* span:文本信息在一行展示。行内标签，内联标签</span><br></pre></td></tr></table></figure><h3 id="7-语义化标签："><a href="#7-语义化标签：" class="headerlink" title="7. 语义化标签："></a>7. 语义化标签：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* html5中为了提高程序的可读性，提供了一些标签。</span><br><span class="line">    1.&lt;header&gt;</span><br><span class="line">    2.&lt;footer&gt;</span><br></pre></td></tr></table></figure><h3 id="8-表格标签："><a href="#8-表格标签：" class="headerlink" title="8. 表格标签："></a>8. 表格标签：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* table：定义表格</span><br><span class="line">    * width:宽度</span><br><span class="line">    * border:边框</span><br><span class="line">    * cellpadding：定义内容和单元格的距离</span><br><span class="line">    * cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条</span><br><span class="line">    * bgcolor：背景色</span><br><span class="line">    * align：对齐方式</span><br><span class="line">* tr：定义行</span><br><span class="line">* td：定义单元格</span><br><span class="line">    ** colspan：合并列</span><br><span class="line">    ** rowspan:合并行</span><br><span class="line">* th：定义表头单元格，有居中效果</span><br><span class="line">* <span class="tag">&lt;<span class="name">caption</span>&gt;</span>：表格标题</span><br><span class="line">* <span class="tag">&lt;<span class="name">thead</span>&gt;</span>：表示表格的头部分</span><br><span class="line">* <span class="tag">&lt;<span class="name">tbody</span>&gt;</span>：表示表格的体部分</span><br><span class="line">* <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>：表示表格的脚部分</span><br><span class="line"></span><br><span class="line">-- - -----------------------------------------------------</span><br><span class="line">* 代码示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;gray&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td&gt;序号&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td&gt;姓名&lt;/td&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;td&gt;成绩&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>鲁臭臭<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>牛胖胖<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>合并单元格示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;gray&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生成绩表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--合并行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span>            </span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>鲁臭臭<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 合并列--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>牛胖胖<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="9-表单标签："><a href="#9-表单标签：" class="headerlink" title="9. 表单标签："></a>9. 表单标签：</h3><h4 id="1-基本操作："><a href="#1-基本操作：" class="headerlink" title="1. 基本操作："></a>1. 基本操作：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：用于采集用户输入的数据的。用于和服务器进行交互。</span><br><span class="line">* form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围。</span><br><span class="line">    * 属性：</span><br><span class="line">        * action：提交指定数据的URL(地址)</span><br><span class="line">        * method:指定提交方式</span><br><span class="line">            * 分类：一共7种，2种比较常用</span><br><span class="line">                * get：</span><br><span class="line">                    1.请求参数会在地址栏中显示。会封装到请求行中(HTTP协议后讲解)</span><br><span class="line">                    2.请求参数大小是有限制的</span><br><span class="line">                    3.不太安全。</span><br><span class="line">                * post：</span><br><span class="line">                    1.请求参数不会在地址栏中显示，会封装在请求体中(HTTP协议后讲解)</span><br><span class="line">                    2.请求参数的大小没有限制</span><br><span class="line">                    3.较为安全。</span><br><span class="line">                    </span><br><span class="line">    * 表单项中的数据要想被提交：必须制定其name属性</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;form action=&quot;#&quot; method=&quot;get&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结果展示：</p><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\NiuLinXuan\AppData\Roaming\Typora\typora-user-images\image-20200414090501231.png" alt="image-20200414090501231"></p></li></ul><hr><h4 id="2-表单项标签input"><a href="#2-表单项标签input" class="headerlink" title="2. 表单项标签input"></a>2. 表单项标签input</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* input：可以通过type属性值，改变元素展示的样式；</span><br><span class="line">    * type属性：</span><br><span class="line">        * text：文本输入框，默认值</span><br><span class="line">            * placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息；</span><br><span class="line">        * password：密码输入框</span><br><span class="line">        * radio：单选框</span><br><span class="line">            * 注意：</span><br><span class="line">                1.要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一致；</span><br><span class="line">                2.一般会给每一个单选框提供value属性，指定其被选中后提交的值；</span><br><span class="line">                3.checked属性，可以指定默认值。</span><br><span class="line">        *checkbox：复选框：</span><br><span class="line">            * 注意：</span><br><span class="line">                1.一般会给每一个单选框提供value属性，指定其被选中后提交的值；</span><br><span class="line">                2.checked属性，可以指定默认值</span><br><span class="line">        * label：指定输入项的文字描述信息</span><br><span class="line">            * 注意</span><br><span class="line">                * label的for属性一般会和input的id属性值对应。如果对应了，则点击label区域，会让input输入框获取焦点。</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">        * file:文件选择框</span><br><span class="line">        * hidden：隐藏域，用于提交一些信息</span><br><span class="line">        * 按钮：</span><br><span class="line">            * submit：提交按钮，可以提交表单</span><br><span class="line">            * button：普通按钮</span><br><span class="line">            * image：图片提交按钮</span><br><span class="line">                * src属性指定图片的路径</span><br><span class="line">                </span><br><span class="line">** 示例中再展示一些属性，或参考文档            </span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">lable</span>&gt;</span>：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;women&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    爱好:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>游戏</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>Java</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;singing&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span>唱歌</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;单纯的一个按钮&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../image/hot_tel.jpg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    文档选择框：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    隐藏域：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    取色器：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    生日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    时间(精确到时分)：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-select：下拉列表"><a href="#3-select：下拉列表" class="headerlink" title="3. select：下拉列表"></a>3. select：下拉列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* 下拉列表</span><br><span class="line">    * 子元素：option，指定列表项</span><br><span class="line">    </span><br><span class="line">-- - ------------------------------------------</span><br><span class="line">* 代码示例：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--请输入地区--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>西安<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-textarea：文本域"><a href="#4-textarea：文本域" class="headerlink" title="4. textarea：文本域"></a>4. textarea：文本域</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* cols：指定列数，每一行有多少个字符</span><br><span class="line">* rows：默认多少行。</span><br><span class="line">    * 行数不够的话会自动增长</span><br><span class="line">-- ----------------------------------------------</span><br><span class="line">* 代码示例：</span><br><span class="line">    自我描述：<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span> <span class="attr">name</span>=<span class="string">&quot;des&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注册页面案例："><a href="#注册页面案例：" class="headerlink" title="注册页面案例："></a>注册页面案例：</h5><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\NiuLinXuan\AppData\Roaming\Typora\typora-user-images\image-20200414221211617.png" alt="image-20200414221211617"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;tel&quot;</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>男</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">id</span>=<span class="string">&quot;birthday&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;des&quot;</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;des&quot;</span> <span class="attr">id</span>=<span class="string">&quot;des&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;des&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/verify_code.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;注册&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="二、CSS：页面美化和布局控制"><a href="#二、CSS：页面美化和布局控制" class="headerlink" title="二、CSS：页面美化和布局控制"></a>二、CSS：页面美化和布局控制</h1><h2 id="1-概念：Cascading-Style-Sheets-层叠样式表"><a href="#1-概念：Cascading-Style-Sheets-层叠样式表" class="headerlink" title="1. 概念：Cascading Style Sheets 层叠样式表"></a>1. 概念：Cascading Style Sheets 层叠样式表</h2><ul><li>层叠：多个样式可以作用在同一个html的元素上，同时生效</li></ul><h2 id="2-好处："><a href="#2-好处：" class="headerlink" title="2. 好处："></a>2. 好处：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.功能强大；</span><br><span class="line">2.将内容展示和样式控制分离</span><br><span class="line">    * 降低耦合度。解耦</span><br><span class="line">    * 让分工协作更容易</span><br><span class="line">    * 提高开发效率</span><br></pre></td></tr></table></figure><h2 id="3-css的使用：css与html结合方式"><a href="#3-css的使用：css与html结合方式" class="headerlink" title="3. css的使用：css与html结合方式"></a>3. css的使用：css与html结合方式</h2><h3 id="1-内联样式："><a href="#1-内联样式：" class="headerlink" title="1. 内联样式："></a>1. 内联样式：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* 在标签内使用style属性指定css代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-内部样式："><a href="#2-内部样式：" class="headerlink" title="2. 内部样式："></a>2. 内部样式：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* 在head标签内，定义style标签，style标签的标签体内容就是css代码</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内联<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            color: gold;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-外部样式："><a href="#3-外部样式：" class="headerlink" title="3. 外部样式："></a>3. 外部样式：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.定义css资源文件；</span><br><span class="line">2.在head标签内，定义link标签，引入外部的资源文件；</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>内联<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    调用方式一--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/a.css&quot;&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    调用方式二--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="keyword">@import</span> <span class="string">&quot;css/a.css&quot;</span>;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="* 注意："></a>* 注意：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 1、2、3种方式，css作用的范围越来越大</span><br><span class="line">* 1方式不常用，后期常用2,3</span><br></pre></td></tr></table></figure><h2 id="4-css语法"><a href="#4-css语法" class="headerlink" title="4. css语法"></a>4. css语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 格式：</span><br><span class="line">    选择器&#123;</span><br><span class="line">        属性名1：属性值1；</span><br><span class="line">        属性名2：属性值2；</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">* 选择器：筛选具有相似特征的元素</span><br><span class="line">* 注意：</span><br><span class="line">    * 每一对属性需要使用;隔开，最后一对属性可以不加;</span><br></pre></td></tr></table></figure><h2 id="5-选择器：筛选具有相似特征的元素"><a href="#5-选择器：筛选具有相似特征的元素" class="headerlink" title="5. 选择器：筛选具有相似特征的元素"></a>5. 选择器：筛选具有相似特征的元素</h2><h3 id="1-基础选择器"><a href="#1-基础选择器" class="headerlink" title="1. 基础选择器"></a>1. 基础选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">* 调用选择器使用时都是在style里面</span><br><span class="line"></span><br><span class="line">1.id选择器：选择具体的id属性值的元素</span><br><span class="line">    * 语法：#id属性值&#123;&#125;</span><br><span class="line">    * 注意：建议在一个html页面中id值唯一</span><br><span class="line">2.元素选择器：选择具有相同标签名称的元素</span><br><span class="line">    * 语法：标签名称&#123;&#125;</span><br><span class="line">    * 注意：id选择器优先级高于元素选择器</span><br><span class="line">3.类选择器：选择具有相同的class属性值元素</span><br><span class="line">    * 语法：.class属性值&#123;&#125;</span><br><span class="line">    * 注意：类选择器优先级高于元素选择器</span><br><span class="line">-- ---------------------------------------------------</span><br><span class="line">* 代码示例：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基础选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-id">#one</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&#123;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.class</span>&#123;</span></span><br><span class="line">            color: gold;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;one&quot;</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>世界你好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;class&quot;</span>&gt;</span>世界你好啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-扩展选择器："><a href="#2-扩展选择器：" class="headerlink" title="2. 扩展选择器："></a>2. 扩展选择器：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.选择所有元素：</span><br><span class="line">    * 语法：*&#123;&#125;</span><br><span class="line">2.并集选择器：</span><br><span class="line">    * 选择器1，选择器2&#123;&#125;</span><br><span class="line">3.子选择器：筛选选择器1元素下的选择器2元素</span><br><span class="line">    * 选择器1 选择器2&#123;&#125;</span><br><span class="line">4.父选择器：筛选选择器2的父元素选择器1</span><br><span class="line">    * 语法：选择器1 &gt; 选择2&#123;&#125;</span><br><span class="line">5.属性选择器：选择元素名称，属性名=属性值的元素</span><br><span class="line">    * 语法：元素名称[属性名=&quot;属性值&quot;]&#123;&#125;</span><br><span class="line">    </span><br><span class="line">6.伪类选择器：选择一些元素具有的状态</span><br><span class="line">    * 语法：元素：状态&#123;&#125;</span><br><span class="line">    * 如：<span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">        * 状态：</span><br><span class="line">            * link：初始化的状态</span><br><span class="line">            * visited：被访问过的状态</span><br><span class="line">            * active:正在访问状态</span><br><span class="line">            * hover：鼠标悬浮状态</span><br><span class="line"></span><br><span class="line">-- --------------------------------------------------------</span><br><span class="line">* 示例：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基础选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div p&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &gt; p &#123;</span><br><span class="line">            border: 1px solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span> &#123;</span></span><br><span class="line">            border: 3px solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line">            color: gold;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line">            color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好呀世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>世界你好呀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>传智播客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-属性："><a href="#6-属性：" class="headerlink" title="6. 属性："></a>6. 属性：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.字体、文本</span><br><span class="line">    * font-size：字体大小</span><br><span class="line">    * color：文本颜色</span><br><span class="line">    * text-align：对齐方式</span><br><span class="line">    * line-height：行高</span><br><span class="line">2.背景：</span><br><span class="line">    * background</span><br><span class="line">        也可以添加图片</span><br><span class="line">3.边框：</span><br><span class="line">    * border：设置边框，符合属性</span><br><span class="line">4.尺寸：</span><br><span class="line">    * width：宽度</span><br><span class="line">    * height：高度</span><br><span class="line">5.盒子模型：</span><br><span class="line">    * margin：外边距</span><br><span class="line">    * padding：内边距</span><br><span class="line">        * 默认情况下内边距会影响整个盒子的大小</span><br><span class="line">        * box-sizing：border-box; 设置盒子的属性，让width和height就是最终盒子的大小</span><br><span class="line">        </span><br><span class="line">        * float：浮动</span><br><span class="line">            * left</span><br><span class="line">            * right</span><br></pre></td></tr></table></figure><ul><li><p>示例1：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        p&#123;</span><br><span class="line">            font-size: 2px;</span><br><span class="line">            color: aqua;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 20px;</span><br><span class="line"></span><br><span class="line">            border: 1px solid gold;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&#123;</span><br><span class="line">            border: 1px deeppink solid;</span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line">            height: 100px;</span><br><span class="line"></span><br><span class="line">            background: url(&quot;../image/icon_3.jpg&quot;) no-repeat center;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>世界你好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>示例2：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            width: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line"><span class="css">            <span class="selector-tag">padding</span><span class="selector-pseudo">:50px</span>;</span></span><br><span class="line">            box-sizing: border-box;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="comment">/*margin: 50px;*/</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div4</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.div5</span>&#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div4&quot;</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div5&quot;</span>&gt;</span>ccccc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>案例：注册界面</p><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\NiuLinXuan\AppData\Roaming\Typora\typora-user-images\image-20200415223227939.png" alt="image-20200415223227939"></p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0px;</span><br><span class="line">            padding: 0px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        body&#123;</span><br><span class="line">            background: url(&quot;img/register_bg.png&quot;) center no-repeat;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.rg_layout</span>&#123;</span></span><br><span class="line">            width: 900px;</span><br><span class="line">            height: 500px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#EEEEEE</span>;</span></span><br><span class="line">            background-color: white;</span><br><span class="line">            margin: auto;</span><br><span class="line">            padding: 15px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.rg_left</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.rg_left</span> &gt;<span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#FFD026</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.rg_left</span> &gt; <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#A6A6A6</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.rg_center</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 450px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.td_left</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            text-align: right;</span><br><span class="line">            height: 45px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.td_right</span>&#123;</span></span><br><span class="line">            padding-left: 50px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#username</span>,<span class="selector-id">#password</span>,<span class="selector-id">#name</span>,<span class="selector-id">#birthday</span>,<span class="selector-id">#email</span>,<span class="selector-id">#tel</span>,<span class="selector-id">#des</span>&#123;</span></span><br><span class="line">            width: 251px;</span><br><span class="line">            height: 32px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#A6A6A6</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/*    设置边框圆角*/</span></span></span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            padding-left: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#des</span>&#123;</span></span><br><span class="line">            width: 110px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#img_des</span>&#123;</span></span><br><span class="line">            height: 32px;</span><br><span class="line">            vertical-align: middle;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#sub</span>&#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#FFD026</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#FFD026</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.rg_right</span>&#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">            font-size: 15px;</span><br><span class="line">            margin: 15px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.rg_right</span> &gt; <span class="selector-tag">p</span> &gt; <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rg_layout&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rg_left&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>新用户注册<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>USER REGISTER<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rg_center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;tel&quot;</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_left&quot;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>男</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span>出生日期<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">id</span>=<span class="string">&quot;birthday&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;des&quot;</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">lable</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;td_right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;des&quot;</span> <span class="attr">id</span>=<span class="string">&quot;des&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/verify_code.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img_des&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;注册&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rg_right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>已有账号?<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>  &gt;</span>立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="三、JavaScript"><a href="#三、JavaScript" class="headerlink" title="三、JavaScript"></a>三、JavaScript</h1><h2 id="1-概念和功能："><a href="#1-概念和功能：" class="headerlink" title="1. 概念和功能："></a>1. 概念和功能：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：一门客户端脚本语言</span><br><span class="line">    * 运行在客户端浏览器中的，每一个浏览器都有JavaScript的解析引擎</span><br><span class="line">    * 脚本语言：不需要编译，直接就可以被浏览器解析执行了</span><br><span class="line">    </span><br><span class="line">* 功能：</span><br><span class="line">    * 可以来增强用户和html页面的交互过程，可以来控制html。让页面有一些动态的效果，增强用户的体验。</span><br></pre></td></tr></table></figure><h2 id="2-JavaScript发展史："><a href="#2-JavaScript发展史：" class="headerlink" title="2. JavaScript发展史："></a>2. JavaScript发展史：</h2><blockquote><p>1.1992年， Nombase公司，开发出第一-门 ]客户端脚本语言，专门用于表单的校验。命名为: C– ，后来更名为: ScriptEase<br>2.1995年，Netscape(网景)公司,开发了一门客户端脚本语言: Livescript。后来,请来SUN公司的专家,修改LiveScript, 命名为JavaScript<br>3.1996年，微软抄袭JavaScript开发出JScript语言<br>4.1997年，ECMA( 欧洲计算机制造商协会)，ECMAScript, 就是所有客户端脚本语言的标准。</p></blockquote><ul><li>JavaScript = ECMAScript + JavaScript自己特有的东西。</li></ul><hr><h2 id="3-基本语法："><a href="#3-基本语法：" class="headerlink" title="3. 基本语法："></a>3. 基本语法：</h2><h3 id="1-与html结合方式："><a href="#1-与html结合方式：" class="headerlink" title="1. 与html结合方式："></a>1. 与html结合方式：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1. 内部JS：</span><br><span class="line">    * 定义<span class="tag">&lt;<span class="name">script</span>&gt;</span>,标签体内容就是js代码</span><br><span class="line">    </span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&quot;hello world&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. 外部JS：</span><br><span class="line">    * 定义<span class="tag">&lt;<span class="name">script</span>&gt;</span>,通过src属性引入外部的js文件</span><br><span class="line">    一般将js文件创建在js目录下，所以先创建js目录</span><br><span class="line">    </span><br><span class="line">* 注意：</span><br><span class="line"><span class="handlebars"><span class="xml">    1.<span class="tag">&lt;<span class="name">script</span>&gt;</span>可以定义在html页面的任何地方，但是定义的位置会影响执行顺序</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    2.<span class="tag">&lt;<span class="name">script</span>&gt;</span>可以定义多个</span></span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\NiuLinXuan\AppData\Roaming\Typora\typora-user-images\image-20200416114457516.png" alt="image-20200416114457516"></p><ul><li>调用外部js文件：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-注释："><a href="#2-注释：" class="headerlink" title="2. 注释："></a>2. 注释：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.单行注释：&#x2F;&#x2F;注释内容</span><br><span class="line"></span><br><span class="line">2.多行注释：&#x2F;*注释内容*&#x2F;</span><br></pre></td></tr></table></figure><h3 id="3-数据类型："><a href="#3-数据类型：" class="headerlink" title="3. 数据类型："></a>3. 数据类型：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.原始数据类型（基本数据类型）：</span><br><span class="line">    1.number：数字。整数&#x2F;小数&#x2F;NaN(not a number 一个不是数字的数字类型)</span><br><span class="line">    2.string：字符串。    &quot;abc&quot; &quot;c&quot; &#39;abc&#39;</span><br><span class="line">    3.boolean：true和false</span><br><span class="line">    4.null：一个对象为空的占位符</span><br><span class="line">    5.underfined：未定义。如果一个变量没有给初始化值，则会默认赋值为underfined</span><br><span class="line">    </span><br><span class="line">2.引用数据类型：对象</span><br></pre></td></tr></table></figure><h3 id="4-变量："><a href="#4-变量：" class="headerlink" title="4. 变量："></a>4. 变量：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* 变量：一小块存储数据的内存空间</span><br><span class="line">* Java语言是强类型语言，而JavaScript是弱类型语言。</span><br><span class="line">    * 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据；</span><br><span class="line">    * 弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</span><br><span class="line">    </span><br><span class="line">* 语法：</span><br><span class="line">    * <span class="keyword">var</span> 变量名 = 初始化值;</span><br><span class="line">    </span><br><span class="line">-- --------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;变量&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//定义number类型</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> num2 = <span class="number">1.2</span>;</span><br><span class="line">        <span class="keyword">var</span> num3 = <span class="literal">NaN</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出在页面上</span></span><br><span class="line">        <span class="built_in">document</span>.write(num + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(num2 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(num3 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义String类型</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str2 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> str3 = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(str + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(str2 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(str3 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义boolean类型</span></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(flag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义null，undefined</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> obj2 = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">var</span> obj3 ;</span><br><span class="line">        <span class="built_in">document</span>.write(obj+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(obj2+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(obj3+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-变量-typeof："><a href="#5-变量-typeof：" class="headerlink" title="5. 变量-typeof："></a>5. 变量-typeof：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* <span class="keyword">typeof</span>运算符：获取变量的类型</span><br><span class="line">    * 注：<span class="literal">null</span>运算后得到的是object</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;变量&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">//定义number类型</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> num2 = <span class="number">1.2</span>;</span><br><span class="line">        <span class="keyword">var</span> num3 = <span class="literal">NaN</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出在页面上</span></span><br><span class="line">        <span class="built_in">document</span>.write(num + <span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(num)+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(num2 + <span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(num2)+ <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(num3 +<span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(num3)+  <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义String类型</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> str2 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> str3 = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(str +<span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(str)+  <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(str2 +<span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(str2)+   <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(str3 +<span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(str3)+   <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义boolean类型</span></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(flag+<span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(flag)+ <span class="string">&quot;&lt;br&gt;&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义null，undefined</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> obj2 = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="keyword">var</span> obj3 ;</span><br><span class="line">        <span class="built_in">document</span>.write(obj+<span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(obj)+  <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(obj2+<span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(obj2)+  <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(obj3+<span class="string">&quot;---&quot;</span>+<span class="keyword">typeof</span>(obj3)+  <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="6-运算符："><a href="#6-运算符：" class="headerlink" title="6. 运算符："></a>6. 运算符：</h3><h4 id="1-一元运算符：只有一个运算数的运算符"><a href="#1-一元运算符：只有一个运算数的运算符" class="headerlink" title="1. 一元运算符：只有一个运算数的运算符"></a>1. 一元运算符：只有一个运算数的运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">++,--, +(正号),-(负号)</span><br><span class="line">    * ++,-- :自增(自减)</span><br><span class="line">         * ++(--)：在前，先自增(自减)，再运算</span><br><span class="line">         * ++(--):在后，先运算，再自增(自减)</span><br><span class="line">         </span><br><span class="line">    * +(-):正负号</span><br><span class="line">    * 注意：在JS中，如果运算数不是运算符所要求的的类型，那么js引擎会自动的将运算数进行类型转换。</span><br><span class="line">        * 其它类型转number：</span><br><span class="line">            * string转number：按照字面值转换，如果字面值不是数字，则转为<span class="literal">NaN</span>(不是数字的数字)</span><br><span class="line">            * boolean转number：<span class="literal">true</span>转为<span class="number">1</span>,<span class="literal">false</span>转为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">-- --------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;一元运算符&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">var</span> a = ++ num;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(num);<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">document</span>.write(a);<span class="comment">//4</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> f1 = + <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">var</span> f2 = + <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(f1);<span class="comment">//1</span></span><br><span class="line">        <span class="built_in">document</span>.write(f2);<span class="comment">//0</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="keyword">typeof</span> (f1));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> a = +<span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(a);</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="keyword">typeof</span> (a));</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-算数运算符"><a href="#2-算数运算符" class="headerlink" title="2. 算数运算符"></a>2. 算数运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+ - * &#x2F; %            和Java一样</span><br></pre></td></tr></table></figure><h4 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3. 赋值运算符"></a>3. 赋值运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D; +&#x3D; -&#x3D;             和Java一样</span><br></pre></td></tr></table></figure><h4 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4. 比较运算符"></a>4. 比较运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt;     &lt;    &gt;=    &lt;=    ==    ===(全等于)</span><br><span class="line"></span><br><span class="line">* 比较方式：</span><br><span class="line">    <span class="number">1.</span>类型相同：直接比较</span><br><span class="line">        * 字符串：按照字典顺序比较，按位逐一比较，知道得出大小为止</span><br><span class="line">    <span class="number">2.</span>类型不同：先进行类型转换，再比较</span><br><span class="line">        * ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回<span class="literal">false</span>。</span><br></pre></td></tr></table></figure><h4 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5. 逻辑运算符"></a>5. 逻辑运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp;:与(短路)</span><br><span class="line">||：或(短路)</span><br><span class="line">!:非</span><br><span class="line">    * 其他类型转boolean：</span><br><span class="line">        <span class="number">1.</span> number：<span class="number">0</span>或<span class="literal">NaN</span>为假，其他为真；</span><br><span class="line">        <span class="number">2.</span> string：除了空字符串(<span class="string">&quot;&quot;</span>)，其他都是<span class="literal">true</span>；</span><br><span class="line">        <span class="number">3.</span> <span class="literal">null</span>&amp;&amp;<span class="literal">undefined</span>：都是<span class="literal">false</span>；</span><br><span class="line">        <span class="number">4.</span> 对象：所有对象都是<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">-- ------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;逻辑运算符&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(flag + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(!flag + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;hr&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//number:</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">var</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> num3 = <span class="literal">NaN</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(!num + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(!num2 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(!num3 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;hr&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//null&amp;undefined:</span></span><br><span class="line">        <span class="keyword">var</span> f1 = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> f2 = <span class="literal">undefined</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(!f1 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(!f2 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;hr&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象</span></span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="built_in">document</span>.write(!obj + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        obj = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="literal">null</span> &amp;&amp; obj.length &gt; <span class="number">0</span>) &#123;<span class="comment">//防止空指针异常</span></span><br><span class="line">            alert(<span class="number">111</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//js中可以这样定义，简单书写</span></span><br><span class="line">        <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">            alert(<span class="number">123</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="6-三元运算符"><a href="#6-三元运算符" class="headerlink" title="6. 三元运算符"></a>6. 三元运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* 语法：</span><br><span class="line">    * 表达式 ? 值<span class="number">1</span> ： 值<span class="number">2</span>;</span><br><span class="line">    * 判断表达式的值，如果是<span class="literal">true</span>则取值<span class="number">1</span>，如果是<span class="literal">false</span>则取值<span class="number">2</span>；</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;三元运算符&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> c = a &gt; b ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        alert(c)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="7-流程控制"><a href="#7-流程控制" class="headerlink" title="7. 流程控制"></a>7. 流程控制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span><span class="keyword">if</span>...else...</span><br><span class="line"><span class="number">2.</span><span class="keyword">switch</span>:</span><br><span class="line">    * 在Java中，<span class="keyword">switch</span>语句可以接受的数据类型：byte,int ,shor,char,枚举(<span class="number">1.5</span>),<span class="built_in">String</span>(<span class="number">1.7</span>)</span><br><span class="line">    * 在JS中，<span class="keyword">switch</span>语句可以接受任意的原始数据类型</span><br><span class="line">    </span><br><span class="line">    * 语法：<span class="keyword">switch</span>(变量):</span><br><span class="line">                <span class="keyword">case</span> 值:</span><br><span class="line">                语句;</span><br><span class="line"><span class="number">3.</span><span class="keyword">while</span></span><br><span class="line"><span class="number">4.</span><span class="keyword">do</span>...while</span><br><span class="line"><span class="number">5.</span><span class="keyword">for</span></span><br></pre></td></tr></table></figure><h3 id="8-特殊语法："><a href="#8-特殊语法：" class="headerlink" title="8. 特殊语法："></a>8. 特殊语法：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.语句以;结尾，如果一行只有一条语句，则;可以省略(不建议)</span><br><span class="line">2.变量的定义使用var关键字，也可以不使用</span><br><span class="line">    * 用：定义的变量是局部变量；</span><br><span class="line">    * 不用：定义的变量是全局变量(不建议)。</span><br><span class="line">            *可以在方法外定义变量。*</span><br></pre></td></tr></table></figure><h3 id="练习：99乘法表"><a href="#练习：99乘法表" class="headerlink" title="练习：99乘法表"></a>练习：99乘法表</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="number">99</span>乘法表&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        td&#123;</span><br><span class="line">            border: <span class="number">1</span>px solid;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;table align=&#x27;center&#x27;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">&quot;&lt;tr&gt;&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="built_in">document</span>.write(<span class="string">&quot;&lt;td&gt;&quot;</span>)</span><br><span class="line">                <span class="built_in">document</span>.write(i + <span class="string">&quot;*&quot;</span> + j + <span class="string">&quot;=&quot;</span> + (i * j) + <span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>)</span><br><span class="line">                <span class="built_in">document</span>.write(<span class="string">&quot;&lt;/td&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">&quot;&lt;/tr&gt;&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;/table&gt;&quot;</span>)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="4-基本对象："><a href="#4-基本对象：" class="headerlink" title="4. 基本对象："></a>4. 基本对象：</h2><h3 id="1-Function："><a href="#1-Function：" class="headerlink" title="1. Function："></a>1. Function：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>：函数(方法)对象</span><br><span class="line">  *    <span class="number">1.</span>创建：</span><br><span class="line">        <span class="number">1.</span> <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(形式参数列表,方法体);<span class="comment">//不建议使用</span></span><br><span class="line">        <span class="number">2.</span><span class="keyword">function</span> 方法名称(形式参数列表) &#123;</span><br><span class="line">            方法体</span><br><span class="line">          &#125;</span><br><span class="line">         <span class="number">3.</span><span class="keyword">var</span> 方法名 = <span class="function"><span class="keyword">function</span>(<span class="params">形式参数列表</span>)</span>&#123;</span><br><span class="line">             方法体</span><br><span class="line">          &#125;</span><br><span class="line">    <span class="number">2.</span>方法：</span><br><span class="line">    <span class="number">3.</span>属性：</span><br><span class="line">        * length：代表形参的个数</span><br><span class="line">    <span class="number">4.</span>特点：</span><br><span class="line">        <span class="number">1.</span>方法定义是，形参的类型不用写，返回值类型也不写；</span><br><span class="line">        <span class="number">2.</span>方法是一个对象，如果定义名称相同方法，会覆盖；</span><br><span class="line">        <span class="number">3.</span>在JS中，方法的调用只与方法的名称有关，和参数列表无关；</span><br><span class="line">        <span class="number">4.</span>在方法声明中有一个隐藏的内置对象(数组)，argument,封装所有的实际参数。</span><br><span class="line">    <span class="number">5.</span>调用：</span><br><span class="line">        * 方法名称(实际参数列表)</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="built_in">Function</span>&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建方式1</span></span><br><span class="line">        <span class="comment">// var fun = new Function(&quot;a&quot;,&quot;b&quot;,&quot;alert(a+b);&quot;);</span></span><br><span class="line">        <span class="comment">// fun(1,2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建方式2</span></span><br><span class="line">        <span class="comment">/*              function fun2(a,b) &#123;</span></span><br><span class="line"><span class="comment">                          alert(a+b);</span></span><br><span class="line"><span class="comment">              &#125;*/</span></span><br><span class="line">        <span class="comment">// fun(1,2)</span></span><br><span class="line">        <span class="comment">// alert(fun.length);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建方式3</span></span><br><span class="line">        <span class="comment">/*        var fun = function(a,b)&#123;</span></span><br><span class="line"><span class="comment">                    alert(a+b);</span></span><br><span class="line"><span class="comment">                &#125;*/</span></span><br><span class="line">        <span class="comment">// fun(1,2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//相当于覆盖重写fun2</span></span><br><span class="line">        <span class="comment">/*        fun2 = function (a,b) &#123;</span></span><br><span class="line"><span class="comment">                    alert(a-b);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                fun2(1,2);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// var fun = function (a, b) &#123;</span></span><br><span class="line">        <span class="comment">//     alert(a);</span></span><br><span class="line">        <span class="comment">//     alert(b);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// fun(1,2);</span></span><br><span class="line">        <span class="comment">// fun(1);</span></span><br><span class="line">        <span class="comment">// fun();//未传参返回undefined</span></span><br><span class="line">        <span class="comment">// fun(1,2,3);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 求两个数的和</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">/*        function fun(a,b)&#123;</span></span><br><span class="line"><span class="comment">                    return a+b;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                var sun =fun(1,2);</span></span><br><span class="line"><span class="comment">                alert(sun);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 求任意数的和*/</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> sun = fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">        alert(sun);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Array-数组对象"><a href="#2-Array-数组对象" class="headerlink" title="2. Array:数组对象"></a>2. Array:数组对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建：</span><br><span class="line">    <span class="number">1.</span><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(元素列表);</span><br><span class="line">    <span class="number">2.</span><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(默认长度);</span><br><span class="line">    <span class="number">3.</span><span class="keyword">var</span> arr = [元素列表];</span><br><span class="line"><span class="number">2.</span>方法：</span><br><span class="line">    jion(参数)：将数组中的元素按照指定的分隔符拼接为字符串；未指定打印逗号</span><br><span class="line">    push()：向数组的末尾添加一个或更多元素，并返回新的长度；</span><br><span class="line"><span class="number">3.</span>属性：</span><br><span class="line">    length:数组的长度</span><br><span class="line"><span class="number">4.</span>特点：</span><br><span class="line">    <span class="number">1.</span>JS中，数组元素的类型可变的；</span><br><span class="line">    <span class="number">2.</span>JS中，数组长度可变的。</span><br><span class="line"></span><br><span class="line">-- --------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="built_in">Array</span>&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建方式</span></span><br><span class="line">        <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="string">&quot;abc&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">//未赋值默认打印逗号（,）</span></span><br><span class="line">        <span class="keyword">var</span> arr3 = [<span class="number">1</span>, <span class="literal">false</span>, <span class="string">&quot;aa&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(arr + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(arr2 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(arr3 + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(arr.join(<span class="string">&quot;--&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="3-Date：日期对象"><a href="#3-Date：日期对象" class="headerlink" title="3. Date：日期对象"></a>3. Date：日期对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建：</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="number">2.</span>方法：</span><br><span class="line">    toLocaleString:返回当前date对应的时间本地字符串格式</span><br><span class="line">    getTime():获取毫秒值。返回当前如期对象描述的时间描述的时间到<span class="number">1970</span>年<span class="number">1</span>月<span class="number">1</span>日零点的毫秒值差</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="built_in">Date</span>&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">document</span>.write(date + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(date.toLocaleString() + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(date.getTime() + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="4-Math-数学对象"><a href="#4-Math-数学对象" class="headerlink" title="4. Math:数学对象"></a>4. Math:数学对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建：</span><br><span class="line">    * 特点：<span class="built_in">Math</span>对象不用创建，直接使用。    <span class="built_in">Math</span>.方法名();</span><br><span class="line"><span class="number">2.</span>方法：</span><br><span class="line">    random():返回<span class="number">0</span>~<span class="number">1</span>之间的随机数。含<span class="number">0</span>不含<span class="number">1</span></span><br><span class="line">    ceil(x)：对数进行上舍入</span><br><span class="line">    floor(x):对数进行下舍入</span><br><span class="line">    round(x):把数四舍五入为最接近的整数</span><br><span class="line"><span class="number">3.</span>属性：</span><br><span class="line">    PI:圆周率</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="built_in">Math</span>&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">Math</span>.PI + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">Math</span>.random() + <span class="string">&quot;&lt;br&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="number">3.14</span>) + <span class="string">&quot;&lt;br&gt;&quot;</span>);<span class="comment">//向上</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">Math</span>.floor(<span class="number">3.14</span>) + <span class="string">&quot;&lt;br&gt;&quot;</span>);<span class="comment">//向下</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">Math</span>.round(<span class="number">3.14</span>) + <span class="string">&quot;&lt;br&gt;&quot;</span>);<span class="comment">//四舍五入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 练习：取1~100之间的随机数</span></span><br><span class="line"><span class="comment">        *   1. Math. random()产生随机数:范围(0,1]小数</span></span><br><span class="line"><span class="comment">            2.乘以100 --&gt; [0,99.9999] 小数</span></span><br><span class="line"><span class="comment">            3.舍弃小数部分: floor --&gt; [0,99]整数</span></span><br><span class="line"><span class="comment">            4. +1 --&gt;[0,99] 整数[1, 100]</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">Math</span>.random()*<span class="number">100</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">Math</span>.floor(num) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-RegExp：正则表达式对象"><a href="#5-RegExp：正则表达式对象" class="headerlink" title="5. RegExp：正则表达式对象"></a>5. RegExp：正则表达式对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>正则表达式：定义字符串的组成规则：</span><br><span class="line">    <span class="number">1.</span>单个字符：[]</span><br><span class="line">        如：[a]    [ab]:a或者b    [a-zA-Z0<span class="number">-9</span>_]</span><br><span class="line">        * 特殊符号代表特殊含义的单个字符：</span><br><span class="line">            \d:单个数字字符[<span class="number">0</span><span class="number">-9</span>]</span><br><span class="line">            \w:单个单词字符：[a-zA-Z0<span class="number">-9</span>_]</span><br><span class="line">    <span class="number">2.</span>量词符号：</span><br><span class="line">        ?：表示出现<span class="number">0</span>次或<span class="number">1</span>次</span><br><span class="line">        *：表示出现<span class="number">0</span>次或多次</span><br><span class="line">        +：出现<span class="number">1</span>次或多次</span><br><span class="line">        &#123;m,n&#125;:表示 m&lt;= 数量    &lt;= n</span><br><span class="line">            * m如果缺省：&#123;,n&#125;：最多n次</span><br><span class="line">            * n如果缺省：&#123;m,&#125;:最少m</span><br><span class="line">    <span class="number">3.</span>开始结束符号：</span><br><span class="line">        ^ :开始</span><br><span class="line">        $ :结束</span><br><span class="line"><span class="number">2.</span>正则对象：</span><br><span class="line">    <span class="number">1.</span>创建：</span><br><span class="line">        <span class="number">1.</span><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>);</span><br><span class="line">        <span class="number">2.</span><span class="keyword">var</span> reg = <span class="regexp">/正则表达式/</span>;</span><br><span class="line">     <span class="number">2.</span>方法：</span><br><span class="line">         test(参数)：验证指定的字符串是否符合正则定义的规范。</span><br><span class="line"> ----------------------------------------------------------</span><br><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;<span class="built_in">RegExp</span>&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;^\\w&#123;6,12&#125;$&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> reg2 = <span class="regexp">/^\w&#123;6,12&#125;$/</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*   alert(reg);</span></span><br><span class="line"><span class="comment">        alert(reg2);*/</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">var</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">     <span class="keyword">var</span> flag = reg2.test(name);</span><br><span class="line">     alert(flag);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="6-Global"><a href="#6-Global" class="headerlink" title="6. Global:"></a>6. Global:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。    方法名();</span><br><span class="line"><span class="number">2.</span>方法：</span><br><span class="line">    <span class="built_in">encodeURI</span>()：url编码</span><br><span class="line">    <span class="built_in">decodeURI</span>()：url编码</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">encodeURIComponent</span>():url编码，编码的字符更多</span><br><span class="line">    <span class="built_in">decodeURIComponent</span>():url解码</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">parseInt</span>():将字符串转为数字</span><br><span class="line">        * 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转换为number;</span><br><span class="line">    <span class="built_in">isNaN</span>():判断一个值是否是<span class="literal">NaN</span></span><br><span class="line">        * <span class="literal">NaN</span>六亲不认，连自己都不认。<span class="literal">NaN</span>参与的==比较全部为<span class="literal">false</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">eval</span>():将JavaScript字符串，并把它作为脚本代码来执行</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>URL编码：</span><br><span class="line">    传智播客 = %E4%BC%A0%E6%<span class="number">99</span>%BA%E6%<span class="number">92</span>%AD%E5%AE%A2</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Global&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&quot;传智播客&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> encode = <span class="built_in">encodeURI</span>(str);</span><br><span class="line">        <span class="built_in">document</span>.write(encode + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> str2 = <span class="built_in">decodeURI</span>(encode);</span><br><span class="line">        <span class="built_in">document</span>.write(str2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s = <span class="string">&quot;123abc&quot;</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">parseInt</span>(s));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s1 = <span class="string">&quot;999&quot;</span>;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="built_in">isNaN</span>(s1));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s2 = <span class="string">&quot;alert(123)&quot;</span>;</span><br><span class="line">        <span class="built_in">eval</span>(s2);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="5-BOM"><a href="#5-BOM" class="headerlink" title="5.BOM:"></a>5.BOM:</h2><h3 id="1-概念：-1"><a href="#1-概念：-1" class="headerlink" title="1. 概念："></a>1. 概念：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Browser Object Model 浏览器对象模型</span><br><span class="line">    * 将浏览器的各个组成部分封装成对象</span><br></pre></td></tr></table></figure><h3 id="2-组成"><a href="#2-组成" class="headerlink" title="2. 组成"></a>2. 组成</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* window：窗口对象</span><br><span class="line">* Navigator：浏览器对象</span><br><span class="line">* Screen：显示器屏幕对象</span><br><span class="line">* History：历史记录对象</span><br><span class="line">* Location：地址栏对象</span><br></pre></td></tr></table></figure><h3 id="3-Window：窗口对象"><a href="#3-Window：窗口对象" class="headerlink" title="3.Window：窗口对象"></a>3.Window：窗口对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建</span><br><span class="line"><span class="number">2.</span>方法</span><br><span class="line">    * <span class="number">1.</span>与弹出框有关的方法：</span><br><span class="line">        alert()：显示有一段消息和一个确认按钮的警告框；</span><br><span class="line">        confirm():显示带有一段消息以及确认按钮和取消按钮的对话框：</span><br><span class="line">            * 如果用户点击确定按钮，则方法返回<span class="literal">true</span>；</span><br><span class="line">            * 如果用户点击取消按钮，则方法返回<span class="literal">false</span>。</span><br><span class="line">        prompt():显示可提示用户输入的对话框：</span><br><span class="line">            * 返回值：获取用户输入的值</span><br><span class="line">    ---------------------------------------------------</span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        alert(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="string">&quot;hello w&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*var flag = window.confirm(&quot;您确定要退出吗？&quot;);</span></span><br><span class="line"><span class="comment">        if (flag) &#123;</span></span><br><span class="line"><span class="comment">            //true,退出操作</span></span><br><span class="line"><span class="comment">            alert(&quot;欢迎再次光临！&quot;)</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">            //false,取消操作</span></span><br><span class="line"><span class="comment">            alert(&quot;手别抖！&quot;)</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*   var name = prompt(&quot;请输入用户名&quot;);</span></span><br><span class="line"><span class="comment">    alert(&quot;用户&quot;+name+&quot;成功登陆！&quot;);*/</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">    * <span class="number">2.</span>与打开关闭有关的方法：</span><br><span class="line">    close():关闭浏览器窗口</span><br><span class="line">        * 谁调用我，我关谁，因此要指明谁调用</span><br><span class="line">    open():打开一个新的浏览器窗口</span><br><span class="line">        * 返回新的<span class="built_in">window</span>对象</span><br><span class="line">    </span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;openBtn&quot;</span> value=<span class="string">&quot;打开窗口&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;closeBtn&quot;</span> value=<span class="string">&quot;关闭刚才打开的窗口&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> openBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;openBtn&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> newWindow;</span><br><span class="line">    openBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       newWindow = open(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> closeBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;closeBtn&quot;</span>);</span><br><span class="line">    closeBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        newWindow.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">    * <span class="number">3.</span>与定时器有关的方式：</span><br><span class="line">    <span class="built_in">setTimeout</span>()：在指定的毫秒数后调用函数或计算表达式；</span><br><span class="line">        * 参数：</span><br><span class="line">            <span class="number">1.</span>js代码或者方法对象；</span><br><span class="line">            <span class="number">2.</span>毫秒值</span><br><span class="line">        * 返回值：唯一标识，用于取消定时器</span><br><span class="line">        <span class="built_in">clearTimeout</span>():取消由<span class="built_in">setTimeout</span>()方法设置的timeout。</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">setInterval</span>():按照指定的周期(以毫秒计)来调用函数或计算表达式</span><br><span class="line">        <span class="built_in">clearInterval</span>():取消由<span class="built_in">setInterval</span>()设置的timeout</span><br><span class="line">        </span><br><span class="line">        &lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一次性定时器</span></span><br><span class="line">    <span class="comment">// setTimeout(&quot;alert(&#x27;beng~~~&#x27;);&quot;,2000);</span></span><br><span class="line">    <span class="comment">// setTimeout(&quot;fun();&quot;,2000);</span></span><br><span class="line"> <span class="comment">/*   var id = setTimeout(fun,2000);*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;beng~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/* //关闭计时器</span></span><br><span class="line"><span class="comment">    clearTimeout(id);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环计时器</span></span><br><span class="line">    <span class="keyword">var</span> id = <span class="built_in">setInterval</span>(fun,<span class="number">2000</span>);</span><br><span class="line">    <span class="built_in">clearInterval</span>(id);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>属性</span><br><span class="line">    <span class="number">1.</span>获取其他BOM对象：</span><br><span class="line">        history：历史记录对象</span><br><span class="line">        location：地址栏对象</span><br><span class="line">        Navigator：浏览器对象</span><br><span class="line">        Screen：显示器屏幕对象</span><br><span class="line">    <span class="number">2.</span>获取DOM对象</span><br><span class="line">        <span class="built_in">document</span></span><br><span class="line">        </span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id = name value=<span class="string">&quot;你好&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取history</span></span><br><span class="line">    <span class="keyword">var</span> v1 = <span class="built_in">window</span>.history;</span><br><span class="line">    <span class="keyword">var</span> v2 = history;</span><br><span class="line"></span><br><span class="line">    alert(v1);</span><br><span class="line">    alert(v2);</span><br><span class="line">    <span class="comment">//其他几个类似方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取document对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> text = <span class="built_in">window</span>.document.getElementById(id);</span><br><span class="line">    alert(text);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>特点：</span><br><span class="line">    * Window对象不需要创建就可以直接使用<span class="built_in">window</span>；    <span class="built_in">window</span>.方法名()</span><br><span class="line">    * <span class="built_in">window</span>引用可以省略。        方法名();</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="4-案例：轮播图"><a href="#4-案例：轮播图" class="headerlink" title="4. 案例：轮播图"></a>4. 案例：轮播图</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;轮播图&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;img/banner_1.jpg&quot;</span> id=<span class="string">&quot;img&quot;</span> width=<span class="string">&quot;100%&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  1.在页面上使用img标签展示图片</span></span><br><span class="line"><span class="comment">        2.定义一个方法，修改图片对象的src属性</span></span><br><span class="line"><span class="comment">        3.定义一个定时器，每隔3秒调用方法一次。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改图片src属性</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num ++;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            num = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取图片对象</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">        <span class="comment">//替换</span></span><br><span class="line">        img.src=<span class="string">&quot;img/banner_&quot;</span>+num+<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">    <span class="built_in">setInterval</span>(fun,<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-Location：地址栏对象"><a href="#5-Location：地址栏对象" class="headerlink" title="5.Location：地址栏对象"></a>5.Location：地址栏对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建：(获取)</span><br><span class="line">    <span class="number">1.</span><span class="built_in">window</span>.location</span><br><span class="line">    <span class="number">2.</span>location</span><br><span class="line"><span class="number">2.</span>方法：</span><br><span class="line">    * reload()：重新加载当前文档，刷新。</span><br><span class="line"><span class="number">3.</span>属性：</span><br><span class="line">    * href：设置或返回完整的URL</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Location&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;刷新&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;gobaidu&quot;</span> value=<span class="string">&quot;去百度&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    <span class="comment">//创建单击事件</span></span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//刷新页面</span></span><br><span class="line">        location.reload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    -----------------------------------------</span></span><br><span class="line">    <span class="keyword">var</span> gobaidu = <span class="built_in">document</span>.getElementById(<span class="string">&quot;gobaidu&quot;</span>);</span><br><span class="line">    gobaidu.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        location.href(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="6-案例：自动跳转首页"><a href="#6-案例：自动跳转首页" class="headerlink" title="6. 案例：自动跳转首页"></a>6. 案例：自动跳转首页</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;自动跳转首页&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">        p&#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        span&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--分析:</span><br><span class="line">        <span class="number">1.</span>显示页面效果&lt;p&gt;</span><br><span class="line">        <span class="number">2.</span>倒计时读秒效果实现</span><br><span class="line">            <span class="number">2.1</span>定义一个方法，获取span标签，修改span标签体内容，时间--</span><br><span class="line">            <span class="number">2.2</span>定义一一个定时器，<span class="number">1</span>秒执行一-次该方法</span><br><span class="line">        <span class="number">3.</span>在方法中判断时间如果&lt;= <span class="number">0</span>，则跳转到首页</span><br><span class="line">        --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;span id=<span class="string">&quot;time&quot;</span>&gt;<span class="number">5</span>&lt;/span&gt;秒之后，自动跳转到首页...</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="comment">//定义一个方法，获取span标签，修改span标签体内容，时间--</span></span><br><span class="line">            <span class="keyword">var</span> second = <span class="number">5</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                second --;</span><br><span class="line">                <span class="keyword">if</span> (second &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    location.href(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                time.innerHTML = second + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//定义一一个定时器，1秒执行一-次该方法</span></span><br><span class="line">            <span class="built_in">setInterval</span>(fun,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="7-history：历史记录对象"><a href="#7-history：历史记录对象" class="headerlink" title="7. history：历史记录对象"></a>7. history：历史记录对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>创建(获取)：</span><br><span class="line">    <span class="number">1.</span><span class="built_in">window</span>.history</span><br><span class="line">    <span class="number">2.</span>history</span><br><span class="line"><span class="number">2.</span>方法：</span><br><span class="line">    * back():加载history列表中的前一个URL</span><br><span class="line">    * forward():加载history列表中的下一个URL</span><br><span class="line">    * go(参数)：加载history列表中的某个具体页面</span><br><span class="line">        * 参数：</span><br><span class="line">            * 正数：前进几个历史记录</span><br><span class="line">            * 负数：后退几个历史记录</span><br><span class="line"><span class="number">3.</span>属性：</span><br><span class="line">    * length：返回当前窗口历史列表中的URL数量。</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">代码<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;history历史记录对象&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;获取历史记录个数&quot;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;11_history历史记录对象2.html&quot;</span>&gt;<span class="number">11</span>页面&lt;/a&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;forward&quot;</span> value=<span class="string">&quot;前进&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取按钮</span></span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">    <span class="comment">//绑定单击事件</span></span><br><span class="line">    btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> length = history.length;</span><br><span class="line">        alert(length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前进操作</span></span><br><span class="line">    <span class="comment">//获取按钮</span></span><br><span class="line">    <span class="keyword">var</span> forward = <span class="built_in">document</span>.getElementById(<span class="string">&quot;forward&quot;</span>);</span><br><span class="line">    <span class="comment">//绑定单击事件</span></span><br><span class="line">    forward.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//前进</span></span><br><span class="line">        <span class="comment">// history.forward();</span></span><br><span class="line">        history.go(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line">代码<span class="number">2</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;轮播图&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;img/banner_1.jpg&quot;</span> id=<span class="string">&quot;img&quot;</span> width=<span class="string">&quot;100%&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;back&quot;</span> value=<span class="string">&quot;后退&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*  1.在页面上使用img标签展示图片</span></span><br><span class="line"><span class="comment">        2.定义一个方法，修改图片对象的src属性</span></span><br><span class="line"><span class="comment">        3.定义一个定时器，每隔3秒调用方法一次。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改图片src属性</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">3</span>) &#123;</span><br><span class="line">            num = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取图片对象</span></span><br><span class="line">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">        <span class="comment">//替换</span></span><br><span class="line">        img.src = <span class="string">&quot;img/banner_&quot;</span> + num + <span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定时器</span></span><br><span class="line">    <span class="built_in">setInterval</span>(fun, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//后退操作</span></span><br><span class="line">    <span class="comment">//获取连接对象</span></span><br><span class="line">    <span class="keyword">var</span> back = <span class="built_in">document</span>.getElementById(<span class="string">&quot;back&quot;</span>);</span><br><span class="line">    <span class="comment">//创建单击事件</span></span><br><span class="line">    back.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// history.back();</span></span><br><span class="line">        history.go(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="6-DOM"><a href="#6-DOM" class="headerlink" title="6.DOM:"></a>6.DOM:</h2><h3 id="1-DOM简单学习："><a href="#1-DOM简单学习：" class="headerlink" title="1. DOM简单学习："></a>1. DOM简单学习：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* 功能：控制html文档的内容；</span><br><span class="line">* 代码：获取页面标签(元素)对象    Element</span><br><span class="line">    * <span class="built_in">document</span>.getElementById(<span class="string">&quot;id值&quot;</span>):通过元素的id获取元素对象</span><br><span class="line">    </span><br><span class="line">* 操作Element对象：</span><br><span class="line">    <span class="number">1.</span>修改属性值：</span><br><span class="line">        <span class="number">1.</span>明确获取的对象是哪一个？</span><br><span class="line">        <span class="number">2.</span>插卡API文档，找其中有哪些属性可以设置</span><br><span class="line">    <span class="number">2.</span>修改标签体内容：</span><br><span class="line">        * 属性：innerHTML</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;简单学习DOM&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;img id=<span class="string">&quot;light&quot;</span> src=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span><br><span class="line">&lt;h1 id=<span class="string">&quot;title&quot;</span>&gt;悔创阿里杰克马&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//通过id获取元素对象</span></span><br><span class="line"><span class="comment">/*    var light = document.getElementById(&quot;light&quot;);</span></span><br><span class="line"><span class="comment">    alert(&quot;我要换图片了。。。&quot;);</span></span><br><span class="line"><span class="comment">    light.src = &quot;img/on.gif&quot;;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//1.获取h1标签对象</span></span><br><span class="line">      <span class="keyword">var</span> title = <span class="built_in">document</span>.getElementById(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">      alert(<span class="string">&quot;我要换内容了。。。&quot;</span>);</span><br><span class="line">      <span class="comment">//2.修改内容</span></span><br><span class="line">      title.innerHTML = <span class="string">&quot;不识妻美刘强东&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-事件简单学习："><a href="#2-事件简单学习：" class="headerlink" title="2. 事件简单学习："></a>2. 事件简单学习：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* 功能：某些组建被执行了某些操作后，触发某些代码的执行。</span><br><span class="line">    * 造句：    XXX被XXX,我就XXX</span><br><span class="line">        如：我方水晶被摧毁后，我就责备队友。</span><br><span class="line">            敌方水晶被摧毁后，我就夸奖自己。</span><br><span class="line">* 如何绑定事件：</span><br><span class="line">    <span class="number">1.</span>直接在html标签上，指定事件的属性(操作),属性就是js代码；</span><br><span class="line">        事件：onclick---单击事件</span><br><span class="line">        </span><br><span class="line">    <span class="number">2.</span>通过js获取元素对象，指定事件属性，设置一个函数</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;事件绑定&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;我被点了&#x27;);&quot;</span>&gt;</span>--&gt;</span></span><br><span class="line">&lt;!--&lt;img src=&quot;img/off.gif&quot; id=&quot;light&quot; onclick=&quot;fun();&quot;&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;img/off.gif&quot; id=&quot;light2&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    &lt;!--1.获取light2对象--&gt;</span><br><span class="line">    var light2 = document.getElementById(&quot;light2&quot;);</span><br><span class="line">    // 2.绑定事件</span><br><span class="line">    light2.onclick = fun2;</span><br><span class="line">    </span><br><span class="line">    function fun() &#123;</span><br><span class="line">        alert(&quot;我被点了&quot;)</span><br><span class="line">        alert(&quot;我又被点了&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function fun2() &#123;</span><br><span class="line">        alert(&quot;咋老点我&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="3-案例：电灯开关"><a href="#3-案例：电灯开关" class="headerlink" title="3. 案例：电灯开关"></a>3. 案例：电灯开关</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;电灯开关&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--        <span class="number">1.</span>获取图片对象</span><br><span class="line">            <span class="number">2.</span>绑定单击事件</span><br><span class="line">            <span class="number">3.</span>每次点击切换图片</span><br><span class="line">                *规则:</span><br><span class="line">                *如果灯是开的on,切换图片为off</span><br><span class="line">                如果灯是关的off,切换图片为on</span><br><span class="line">                使用标记flag来完成</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">&quot;img/off.gif&quot;</span> id=<span class="string">&quot;light&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取图片对象</span></span><br><span class="line">    <span class="keyword">var</span> light = <span class="built_in">document</span>.getElementById(<span class="string">&quot;light&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;<span class="comment">//假设false时灯为灭的。  off图片</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.绑定单击事件</span></span><br><span class="line">    light.onclick = <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123; <span class="comment">//如果灯是开的，则灭掉</span></span><br><span class="line">            light.src = <span class="string">&quot;img/off.gif&quot;</span>;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    <span class="comment">//如果是灭的，则打开</span></span><br><span class="line">            light.src = <span class="string">&quot;img/on.gif&quot;</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="4-DOM概述："><a href="#4-DOM概述：" class="headerlink" title="4.DOM概述："></a>4.DOM概述：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：Document Object Model 文档对象模型</span><br><span class="line">    * 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</span><br><span class="line"></span><br><span class="line">* W3C DOM 标准被分为3个不同的部分：</span><br><span class="line">    * 核心DOM：针对任何结构化文档的标准模型：</span><br><span class="line">        * Document：文档对象</span><br><span class="line">        * Element：元素对象</span><br><span class="line">        * Attribute：属性对象</span><br><span class="line">        * Text：文本对象</span><br><span class="line">        * Comment：注释对象</span><br><span class="line">        </span><br><span class="line">        * Node：节点对象，其他5个的父对象</span><br><span class="line">    * XML DOM:针对XML文档的标准模型</span><br><span class="line">    * HTML DOM：针对HTML文档的标准模型</span><br></pre></td></tr></table></figure><h3 id="5-Dociment-文档对象—获取Element和创建DOM"><a href="#5-Dociment-文档对象—获取Element和创建DOM" class="headerlink" title="5. Dociment:文档对象—获取Element和创建DOM"></a>5. Dociment:文档对象—获取Element和创建DOM</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.创建(获取)：在html dom模型中可以使用window对象来获取</span><br><span class="line">    1.window.document</span><br><span class="line">    2.document</span><br><span class="line">2.方法：</span><br><span class="line">    1.获取Element对象：</span><br><span class="line">        1.getElementById():根据id属性值获取元素对象。id属性值一般唯一</span><br><span class="line">        2.getElementsByTagName():根据元素名称获取元素对象们，返回值是一个数组</span><br><span class="line">        3.getElementsByClassName():根据Class属性值获取元素对象们，返回值是一个数组</span><br><span class="line">        4.getElementsByName():根据name属性值获取元素对象们，返回值是一个数组</span><br><span class="line">    2.创建其他DOM对象</span><br><span class="line">        createAttribute(name)</span><br><span class="line">        createComment()</span><br><span class="line">        createElement()</span><br><span class="line">        createTextNode()</span><br><span class="line">3.属性</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Element&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div2&quot;</span>&gt;div2&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;div3&quot;</span>&gt;div3&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cla1&quot;</span>&gt;cla1&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cla1&quot;</span>&gt;cla2&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div name=<span class="string">&quot;name&quot;</span>&gt;name&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.getElementsByTagName():根据元素名称获取元素对象们，返回值是一个数组</span></span><br><span class="line">    <span class="keyword">var</span> divs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    alert(divs.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.getElementsByClassName():根据Class属性值获取元素对象们，返回值是一个数组</span></span><br><span class="line">    <span class="keyword">var</span> clas = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;cla1&quot;</span>);</span><br><span class="line">    alert(clas.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.getElementsByName():根据name属性值获取元素对象们，返回值是一个数组</span></span><br><span class="line">    <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementsByName(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    alert(username.length);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-Element：元素对象"><a href="#6-Element：元素对象" class="headerlink" title="6. Element：元素对象"></a>6. Element：元素对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>获取/创建：通过<span class="built_in">document</span>来获取和创建</span><br><span class="line"><span class="number">2.</span>方法：</span><br><span class="line">    <span class="number">1.</span>removeAttribute()：删除属性</span><br><span class="line">    <span class="number">2.</span>setAttribute():设置属性</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Element&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a&gt;点我一下试试&lt;/a&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;设置属性&quot;</span> id=<span class="string">&quot;setBtn&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;删除属性&quot;</span> id=<span class="string">&quot;clearBtn&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="keyword">var</span> setBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;setBtn&quot;</span>);</span><br><span class="line">    <span class="comment">//设置单击事件</span></span><br><span class="line">    setBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取a标签</span></span><br><span class="line">        <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        element.setAttribute(<span class="string">&quot;href&quot;</span>,<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="keyword">var</span> clearBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;clearBtn&quot;</span>);</span><br><span class="line">    <span class="comment">//设置单击事件</span></span><br><span class="line">    clearBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取a标签</span></span><br><span class="line">        <span class="keyword">var</span> elementsClear = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        elementsClear.removeAttribute(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="7-Node：节点对象，其它5个的父对象"><a href="#7-Node：节点对象，其它5个的父对象" class="headerlink" title="7. Node：节点对象，其它5个的父对象"></a>7. Node：节点对象，其它5个的父对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* 特点：所有dom对象都可以被认为是一个节点</span><br><span class="line">* 方法：</span><br><span class="line">    * CRUD dom树：(增删改查)</span><br><span class="line">        * appendChild():向节点的子节点列表的结尾添加新的子节点；</span><br><span class="line">        * removeChild():删除(并返回)当前节点的指定子节点；</span><br><span class="line">        * replaceChild():用新节点替换一个子节点</span><br><span class="line">* 属性：</span><br><span class="line">    * parentNode:返回节点的父节点。</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Node&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line"></span><br><span class="line">        div&#123;</span><br><span class="line"></span><br><span class="line">            border: <span class="number">1</span>px solid red;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        #div1&#123;</span><br><span class="line">            width: <span class="number">200</span>px;</span><br><span class="line">            height: <span class="number">200</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #div2&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        #div3&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;div2&lt;/div&gt;</span><br><span class="line">    div1</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">&quot;JavaScript:void(0)&quot;</span> id=<span class="string">&quot;del&quot;</span>&gt;删除子节点&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:void(0)&quot;</span> id=<span class="string">&quot;add&quot;</span>&gt;添加子节点&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取超链接</span></span><br><span class="line">    <span class="keyword">var</span> del = <span class="built_in">document</span>.getElementById(<span class="string">&quot;del&quot;</span>);</span><br><span class="line">    <span class="comment">//2.绑定单击事件</span></span><br><span class="line">    del.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line">        <span class="comment">//调用div1里面的方法删除它的儿子div2</span></span><br><span class="line">        div1.removeChild(div2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> add = <span class="built_in">document</span>.getElementById(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">    add.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        <span class="comment">//给div1添加子节点</span></span><br><span class="line">        <span class="comment">//创建div子节点</span></span><br><span class="line">        <span class="keyword">var</span> div3 = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        div3.setAttribute(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;div3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        div1.appendChild(div3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        超链接功能：</span></span><br><span class="line"><span class="comment">            1.可以被点击：样式</span></span><br><span class="line"><span class="comment">            2.点击后跳转到href指定的url</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        需求：保留1功能，去掉2功能</span></span><br><span class="line"><span class="comment">        实现：href=&quot;javascript:void(0);&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回div2的父节点</span></span><br><span class="line">    <span class="keyword">var</span> div2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> parentNode = div2.parentNode;</span><br><span class="line">    alert(parentNode);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> html </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http &amp; request &amp; response的学习</title>
      <link href="/2020/08/12/http&amp;request&amp;response/"/>
      <url>/2020/08/12/http&amp;request&amp;response/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP："><a href="#HTTP：" class="headerlink" title="HTTP："></a>HTTP：</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Hyper Text Transfer Protocol 超文本传输协议</span><br><span class="line">    * 传输协议：定义了，客户端和服务器端通信时，发送数据的格式</span><br><span class="line">    * 特点：</span><br><span class="line">        1.基于TCP&#x2F;IP的高级协议</span><br><span class="line">        2.默认端口号：80</span><br><span class="line">        3.基于请求&#x2F;响应模型的：一次请求对应一次响应</span><br><span class="line">        4.无状态的：每次请求之间相互独立，不能交互数据</span><br><span class="line">* 历史版本：</span><br><span class="line">    * 1.0：每一次请求响应都会建立新的连接</span><br><span class="line">    * 1.1：复用连接</span><br></pre></td></tr></table></figure><h2 id="2-请求消息数据格式："><a href="#2-请求消息数据格式：" class="headerlink" title="2. 请求消息数据格式："></a>2. 请求消息数据格式：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 请求消息数据格式</span><br><span class="line">    1. 请求行</span><br><span class="line">        请求方式 请求url 请求协议&#x2F;版本</span><br><span class="line">        GET &#x2F;login.html    HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">        * 请求方式：</span><br><span class="line">            * HTTP协议有7中请求方式，常用的有2种</span><br><span class="line">                * GET：</span><br><span class="line">                    1. 请求参数在请求行中，在url后。</span><br><span class="line">                    2. 请求的url长度有限制的</span><br><span class="line">                    3. 不太安全</span><br><span class="line">                * POST：</span><br><span class="line">                    1. 请求参数在请求体中</span><br><span class="line">                    2. 请求的url长度没有限制的</span><br><span class="line">                    3. 相对安全</span><br><span class="line">    2. 请求头：客户端浏览器告诉服务器一些信息</span><br><span class="line">        请求头名称: 请求头值</span><br><span class="line">        * 常见的请求头：</span><br><span class="line">            1. User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</span><br><span class="line">                * 可以在服务器端获取该头的信息，解决浏览器的兼容性问题</span><br><span class="line"></span><br><span class="line">            2. Referer：http:&#x2F;&#x2F;localhost&#x2F;login.html</span><br><span class="line">                * 告诉服务器，我(当前请求)从哪里来？</span><br><span class="line">                    * 作用：</span><br><span class="line">                        1. 防盗链：</span><br><span class="line">                        2. 统计工作：</span><br><span class="line">    3. 请求空行</span><br><span class="line">        空行，就是用于分割POST请求的请求头，和请求体的。</span><br><span class="line">    4. 请求体(正文)：</span><br><span class="line">        * 封装POST请求消息的请求参数的</span><br><span class="line"></span><br><span class="line">    * 字符串格式：</span><br><span class="line">        POST &#x2F;login.html    HTTP&#x2F;1.1</span><br><span class="line">        Host: localhost</span><br><span class="line">        User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko&#x2F;20100101 Firefox&#x2F;60.0</span><br><span class="line">        Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">        Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">        Accept-Encoding: gzip, deflate</span><br><span class="line">        Referer: http:&#x2F;&#x2F;localhost&#x2F;login.html</span><br><span class="line">        Connection: keep-alive</span><br><span class="line">        Upgrade-Insecure-Requests: 1</span><br><span class="line">        </span><br><span class="line">        username&#x3D;zhangsan    </span><br></pre></td></tr></table></figure><h2 id="3-响应消息数据格式："><a href="#3-响应消息数据格式：" class="headerlink" title="3.  响应消息数据格式："></a>3.  响应消息数据格式：</h2><h3 id="1-响应行-—-状态码："><a href="#1-响应行-—-状态码：" class="headerlink" title="1. 响应行 — 状态码："></a>1. 响应行 — 状态码：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 数据格式：</span><br><span class="line">        1. </span><br><span class="line">            1. 组成：协议&#x2F;版本 响应状态码 状态码描述</span><br><span class="line">            2. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</span><br><span class="line">                1. 状态码都是3位数字 </span><br><span class="line">                2. 分类：</span><br><span class="line">                    1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</span><br><span class="line">                    2. 2xx：成功。代表：200</span><br><span class="line">                    3. 3xx：重定向。代表：302(重定向)，304(访问缓存)</span><br><span class="line">                    4. 4xx：客户端错误。</span><br><span class="line">                        * 代表：</span><br><span class="line">                            * 404（请求路径没有对应的资源） </span><br><span class="line">                            * 405：请求方式没有对应的doXxx方法</span><br><span class="line">                    5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</span><br></pre></td></tr></table></figure><h3 id="2-响应头："><a href="#2-响应头：" class="headerlink" title="2. 响应头："></a>2. 响应头：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 格式：头名称： 值</span><br><span class="line">            2. 常见的响应头：</span><br><span class="line">                1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</span><br><span class="line">                2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line">                    * 值：</span><br><span class="line">                        * in-line:默认值,在当前页面内打开</span><br><span class="line">                        * attachment;filename&#x3D;xxx：以附件形式打开响应体。文件下载</span><br></pre></td></tr></table></figure><h3 id="3-响应空行"><a href="#3-响应空行" class="headerlink" title="3.响应空行"></a>3.响应空行</h3><h3 id="4-响应体："><a href="#4-响应体：" class="headerlink" title="4. 响应体："></a>4. 响应体：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传输的数据</span><br></pre></td></tr></table></figure><pre><code>* 响应字符串格式    HTTP/1.1 200 OK    Content-Type: text/html;charset=UTF-8    Content-Length: 101    Date: Wed, 06 Jun 2018 07:08:42 GMT    &lt;html&gt;      &lt;head&gt;        &lt;title&gt;$Title$&lt;/title&gt;      &lt;/head&gt;      &lt;body&gt;      hello , response      &lt;/body&gt;    &lt;/html&gt;</code></pre><h1 id="Request："><a href="#Request：" class="headerlink" title="Request："></a>Request：</h1><h2 id="1-request对象和response对象的原理"><a href="#1-request对象和response对象的原理" class="headerlink" title="1. request对象和response对象的原理"></a>1. request对象和response对象的原理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.request和response对象是由服务器创建的，我们来使用它们；</span><br><span class="line">2.request对象是来获取请求消息，response对象是来设置响应对象</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="C:\Users\NiuLinXuan\AppData\Roaming\Typora\typora-user-images\image-20200423080454450.png" alt="image-20200423080454450"></p><h2 id="2-request对象继承体系结构："><a href="#2-request对象继承体系结构：" class="headerlink" title="2. request对象继承体系结构："></a>2. request对象继承体系结构：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ServletRequest        -- 接口</span><br><span class="line">    |    继承</span><br><span class="line">HttpServletRequest    --    接口</span><br><span class="line">    |    实现</span><br><span class="line">org.apache.catalina.connector.RequestFacade    类(由tomcat编写的)</span><br></pre></td></tr></table></figure><h2 id="3-request功能："><a href="#3-request功能：" class="headerlink" title="3. request功能："></a>3. request功能：</h2><h3 id="1-获取请求消息数据："><a href="#1-获取请求消息数据：" class="headerlink" title="1. 获取请求消息数据："></a>1. 获取请求消息数据：</h3><h4 id="1-获取请求行数据："><a href="#1-获取请求行数据：" class="headerlink" title="1. 获取请求行数据："></a>1. 获取请求行数据：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* GET &#x2F;day11&#x2F;demo1?name&#x3D;zhangsan HTTP&#x2F;1.1</span><br><span class="line">* 方法：</span><br><span class="line">    1.获取请求方式：GET</span><br><span class="line">        * String getMethod()</span><br><span class="line">    2.(重点)获取虚拟目录：&#x2F;day11</span><br><span class="line">        * String getContextPath()</span><br><span class="line">    3.获取Servlet路径：&#x2F;demo1</span><br><span class="line">        * String getServletPath()</span><br><span class="line">    4.获取get方式请求参数：name&#x3D;zhangsan</span><br><span class="line">        * String getQueryString()</span><br><span class="line">        </span><br><span class="line">    5.(重点)获取请求URI:&#x2F;day11&#x2F;demo1</span><br><span class="line">        * String getRequestURI():        &#x2F;day11&#x2F;demo1</span><br><span class="line">        * StringBuffer getRequestURL(): http:&#x2F;&#x2F;localhost&#x2F;day11&#x2F;demo1</span><br><span class="line">        </span><br><span class="line">        *URL：统一资源定位符：http:&#x2F;&#x2F;localhost&#x2F;day11&#x2F;demo1 中华人民共和国</span><br><span class="line">        *URI:统一资源标识符：&#x2F;day11&#x2F;demo1    共和国</span><br><span class="line">        </span><br><span class="line">    6.获取协议及版本：HTTP&#x2F;1.1</span><br><span class="line">        * String getProtocol()</span><br><span class="line">    7.获取客户机的IP地址：</span><br><span class="line">        * String getRemoteAddr()</span><br></pre></td></tr></table></figure><ul><li><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/RequestDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取请求方式：GET</span></span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        System.out.println(method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.(重点)获取虚拟目录：/day11</span></span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line">        System.out.println(contextPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取Servlet路径：/demo1</span></span><br><span class="line">        String servletPath = request.getServletPath();</span><br><span class="line">        System.out.println(servletPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.获取get方式请求参数：name=zhangsan</span></span><br><span class="line">        String queryString = request.getQueryString();</span><br><span class="line">        System.out.println(queryString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.(重点)获取请求URI:/day11/demo1</span></span><br><span class="line">        <span class="comment">//  * String getRequestURI():        /day11/demo1</span></span><br><span class="line">        <span class="comment">//   * StringBuffer getRequestURL(): http://localhost/day11/demo1</span></span><br><span class="line">        String requestURI = request.getRequestURI();</span><br><span class="line">        StringBuffer requestURL = request.getRequestURL();</span><br><span class="line">        System.out.println(requestURI);</span><br><span class="line">        System.out.println(requestURL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取协议及版本：HTTP/1.1</span></span><br><span class="line">        String protocol = request.getProtocol();</span><br><span class="line">        System.out.println(protocol);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.获取客户机的IP地址：</span></span><br><span class="line">        String remoteAddr = request.getRemoteAddr();</span><br><span class="line">        System.out.println(remoteAddr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-获取请求头数据："><a href="#2-获取请求头数据：" class="headerlink" title="2. 获取请求头数据："></a>2. 获取请求头数据：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 方法：</span><br><span class="line">    * (重点)String getHeader(String name):通过请求头的名称获取请求头的值</span><br><span class="line">    * Enumeration&lt;String&gt; getHeaderNames():获取所有的请求头名称</span><br></pre></td></tr></table></figure><h4 id="3-获取请求体数据："><a href="#3-获取请求体数据：" class="headerlink" title="3. 获取请求体数据："></a>3. 获取请求体数据：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数；</span><br><span class="line">* 步骤：</span><br><span class="line">    1.获取流对象：</span><br><span class="line">        * BufferedReader getReader():获取字符输入流，只能操作字符数据；</span><br><span class="line">        * ServletInputStream getInputStream():获取字节输入流，可以操作所有类型数据</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">* 代码示例：</span><br><span class="line">            --------------------------------------</span><br><span class="line">    * 文件名：regist.html    *</span><br><span class="line">    </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;regist&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;RequestDemo2&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;  placeholder&#x3D;&quot;请输入密码&quot; &gt;</span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">        --------------------------------------</span><br><span class="line"></span><br><span class="line">    * 文件名：RequestDemo2.java    *</span><br><span class="line">    </span><br><span class="line">package Request;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;RequestDemo2&quot;)</span><br><span class="line">public class RequestDemo2 extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;获取请求体---请求参数</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;1.获取字符流</span><br><span class="line">        BufferedReader reader &#x3D; request.getReader();</span><br><span class="line">        &#x2F;&#x2F;2.读取数据</span><br><span class="line">        String line &#x3D; null;</span><br><span class="line">        while ((line &#x3D; reader.readLine()) !&#x3D; null) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">            --------------------------------------</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    2.再从流对象中拿数据</span><br></pre></td></tr></table></figure><h3 id="2-其它功能：-都是重点"><a href="#2-其它功能：-都是重点" class="headerlink" title="2. 其它功能：(都是重点)"></a>2. 其它功能：(都是重点)</h3><h4 id="1-获取请求参数通用方式："><a href="#1-获取请求参数通用方式：" class="headerlink" title="1. 获取请求参数通用方式："></a>1. 获取请求参数通用方式：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.String getParameter(String name):根据参数名称获取参数值    username&#x3D;zs&amp;password&#x3D;123</span><br><span class="line">2.String[] getParameterValues(String name):根据参数名称获取参数值的数组    hobby&#x3D;study&amp;hobby&#x3D;game</span><br><span class="line">3.Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称</span><br><span class="line">4.Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><ul><li>request2.html</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>regist2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/RequestDemo3&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span>学习</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span>游戏</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>RequestDemo3.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/RequestDemo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.String getParameter(String name):根据参数名称获取参数值</span></span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(username);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.String[] getParameterValues(String name):根据参数名称获取参数值的数组</span></span><br><span class="line">        String[] hobbies = request.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        <span class="comment">/*for (String hobby :hobbies ) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(hobby);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class="line">     <span class="comment">/*   while (parameterNames.hasMoreElements())&#123;</span></span><br><span class="line"><span class="comment">            String nextElement = parameterNames.nextElement();</span></span><br><span class="line"><span class="comment">            System.out.println(nextElement);</span></span><br><span class="line"><span class="comment">            String parameter = request.getParameter(nextElement);</span></span><br><span class="line"><span class="comment">            System.out.println(parameter);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;==========&quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        Set&lt;String&gt; keySet = parameterMap.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String name : keySet) &#123;</span><br><span class="line">            <span class="comment">//获取键值对</span></span><br><span class="line">            String[] values = parameterMap.get(name);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            <span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">                System.out.println(value);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;==========&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//相同调用方法调用时，可以用这种形式调用</span></span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-请求转发："><a href="#2-请求转发：" class="headerlink" title="2. 请求转发："></a>2. 请求转发：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.步骤：</span><br><span class="line">    1.通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</span><br><span class="line">    2.使用RequestDispatcher对象来进行转发：forward(ServletRequest request,ServletResponse response)</span><br></pre></td></tr></table></figure><ul><li>代码和下面公用</li></ul><h4 id="3-共享数据："><a href="#3-共享数据：" class="headerlink" title="3. 共享数据："></a>3. 共享数据：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 域对象：一个有作用范围的对象，可以在范围内共享数据</span><br><span class="line">* request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</span><br><span class="line">* 方法：</span><br><span class="line">    1.void setAttribute(String name,Object obj):存储数据</span><br><span class="line">    2.Object getAttitude(String name):通过键获取值</span><br><span class="line">    3.void removeAttribute(String name):通过键移除键值对</span><br></pre></td></tr></table></figure><ul><li><p>代码示例：</p><ul><li><p>RequestDemo6</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo6</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;demo8888被访问了。。。&quot;</span>);</span><br><span class="line">        <span class="comment">//转发到demo9资源</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        RequestDispatcher requestDispatcher = request.getRequestDispatcher(&quot;/requestDemo9&quot;);</span></span><br><span class="line"><span class="comment">        requestDispatcher.forward(request,response);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储数据到request域中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转发资源</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/requestDemo7&quot;</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>RequestDemo7</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet(&quot;&#x2F;requestDemo7&quot;)</span><br><span class="line">public class RequestDemo7 extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取数据</span><br><span class="line">        Object msg &#x3D; request.getAttribute(&quot;msg&quot;);</span><br><span class="line">        System.out.println(msg);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;demo9999被访问了。。。&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4-获取ServletContext："><a href="#4-获取ServletContext：" class="headerlink" title="4. 获取ServletContext："></a>4. 获取ServletContext：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* <span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">** 此次课程略讲，下节课详讲</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">----------------------------------------------------------</span></span><br><span class="line"><span class="function">@<span class="title">WebServlet</span><span class="params">(<span class="string">&quot;/requestDemo8&quot;</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class RequestDemo8 extends HttpServlet </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        System.out.println(servletContext);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-中文乱码问题："><a href="#5-中文乱码问题：" class="headerlink" title="5. 中文乱码问题："></a>5. 中文乱码问题：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* get方式：tomcat 8 已经将get方式乱码问题解决了</span><br><span class="line">* post方式：会乱码</span><br><span class="line">    * 解决：在获取参数前，设置request的编码request.setCharacterEncoding(&quot;utf-8&quot;);</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p></li><li><p>```Java<br>package Request;</p><p>import javax.servlet.ServletException;<br>import javax.servlet.annotation.WebServlet;<br>import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.HttpServletResponse;<br>import java.io.IOException;</p><p>@WebServlet(“/RequestDemo4”)<br>public class RequestDemo4 extends HttpServlet {</p><pre><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;    //解决中文乱码    request.setCharacterEncoding(&quot;utf-8&quot;);    //根据参数名称获取参数值    String username = request.getParameter(&quot;username&quot;);    System.out.println(username);&#125;protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;&#125;</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 6.  BeanUtils工具类，简化数据封装</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>用于封装JavaBean的</p><pre><code>  1. JavaBean：标准的Java类      1. 要求：          1. 类必须被public修饰          2. 必须提供空参的构造器          3. 成员变量必须使用private修饰          4. 提供公共setter和getter方法      2. 功能：封装数据  2. 概念：      成员变量：      属性：setter和getter方法截取后的产物          例如：getUsername() --&gt; Username--&gt; username  3. 方法：      1. setProperty()      2. getProperty()      3. populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># Response：</span><br><span class="line"></span><br><span class="line">## 1. 功能：</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>功能：设置响应消息</p><ol><li><p>设置响应行：<br> 1.格式：HTTP/1.1 200 ok<br> 2.设置状态码：setStatus(int sc)</p></li><li><p>设置响应头：setHeader(String name,String value)</p></li><li><p>设置响应体：</p><ul><li><p>使用步骤：<br>  1.获取输出流：</p><pre><code>  * 字符输出流：PrintWriter getWriter()  * 字节输出流：ServletOutputStream getOutputStream()</code></pre><p>  2.使用输出流，将数据输出到客户端浏览器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 2. 重定向：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">* 重定向：资源跳转的方式</span><br><span class="line">* 代码实现：</span><br><span class="line">    &#x2F;&#x2F;方式1：</span><br><span class="line">            &#x2F;&#x2F;1.设置状态码：302</span><br><span class="line">        response.setStatus(302);</span><br><span class="line">            &#x2F;&#x2F;2.设置响应头：location</span><br><span class="line">        response.setHeader(&quot;location&quot;,&quot;&#x2F;responseDemo2&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;方式2：</span><br><span class="line">            &#x2F;&#x2F;简单的重定位方法：</span><br><span class="line">       response.sendRedirect(&quot;&#x2F;responseDemo2&quot;);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ul><h2 id="3-重定向和转发的特点及区别："><a href="#3-重定向和转发的特点及区别：" class="headerlink" title="3. 重定向和转发的特点及区别："></a>3. 重定向和转发的特点及区别：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 重定向的特点：redirect</span><br><span class="line">    1.地址栏发生变化；</span><br><span class="line">    2.重定向可以访问其他站点(服务器)的资源；</span><br><span class="line">    3.重定向是两次请求。不能使用request对象来共享数据</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 转发的特点：forward</span><br><span class="line">    1.转发地址栏路径不见；</span><br><span class="line">    2.转发只能访问当前服务器下的资源；</span><br><span class="line">    3.转发是一次请求，可以使用request对象来共享数据</span><br></pre></td></tr></table></figure><h2 id="4-路径写法："><a href="#4-路径写法：" class="headerlink" title="4. 路径写法："></a>4. 路径写法：</h2><h4 id="1-相对路径："><a href="#1-相对路径：" class="headerlink" title="1. 相对路径："></a>1. 相对路径：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 路径分类：</span><br><span class="line">    1.相对路径：通过 相对路径不可以确定唯一资源</span><br><span class="line">        * 如：.&#x2F;index.html</span><br><span class="line">        * 不以斜杠(&#x2F;)开头，以.开头路径</span><br><span class="line">        </span><br><span class="line">        * 规则：找到当前资源和目标资源之间的相对位置关系</span><br><span class="line">            * .&#x2F;：当前目录</span><br><span class="line">            * ..&#x2F;：后退一级目录</span><br></pre></td></tr></table></figure><h4 id="2-绝对路径："><a href="#2-绝对路径：" class="headerlink" title="2. 绝对路径："></a>2. 绝对路径：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span>绝对路径：通过绝对路径可以确定唯一资源</span><br><span class="line">        * 如：http:<span class="comment">//localhost/day15/responseDemo2    /day15/responseDemo2</span></span><br><span class="line">        * 以/开头的路径</span><br><span class="line">        </span><br><span class="line">        * 规则：判断定义的路径是给谁使用的？判断请求将来从哪儿发出</span><br><span class="line">            * 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)</span><br><span class="line">                * 建议虚拟目录动态获取：request.getContextPath()</span><br><span class="line">                * &lt;a&gt;,&lt;form&gt; 重定向...</span><br><span class="line">                </span><br><span class="line">        *代码示例：</span><br><span class="line">            <span class="comment">//动态获取虚拟目录</span></span><br><span class="line">        String contextPath = request.getContextPath();</span><br><span class="line">        response.sendRedirect(contextPath+<span class="string">&quot;/responseDemo2&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        ---------------------------------------------------------</span><br><span class="line">            *给服务器使用：不需要加虚拟目录</span><br><span class="line">                * 转发路径</span><br></pre></td></tr></table></figure><h2 id="5-服务器输出字符数据到浏览器"><a href="#5-服务器输出字符数据到浏览器" class="headerlink" title="5. 服务器输出字符数据到浏览器"></a>5. 服务器输出字符数据到浏览器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line">    &#x2F;&#x2F;1.获取字符输出流</span><br><span class="line">        PrintWriter pw &#x3D; response.getWriter();</span><br><span class="line">    &#x2F;&#x2F;2.输出数据</span><br><span class="line">        pw.write(&quot;&lt;h1&gt;hello response&lt;&#x2F;h1&gt;&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 注意：</span><br><span class="line">    * 乱码问题：</span><br><span class="line">        因为：PrintWriter pw &#x3D; response.getWriter();获取的流的默认编码是ISO-8859-1，因此需要我们设置该流的默认编码，告诉浏览器响应体使用的编码。</span><br><span class="line">        </span><br><span class="line">    &#x2F;&#x2F;设置编码，是在获取流之前设置</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 代码示例：</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置编码，是在获取流之前设置</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//1.获取字符输出流</span></span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line">        <span class="comment">//2.输出数据</span></span><br><span class="line">        pw.write(<span class="string">&quot;&lt;h1&gt;你好 response&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-服务器输出字节数据到浏览器："><a href="#6-服务器输出字节数据到浏览器：" class="headerlink" title="6. 服务器输出字节数据到浏览器："></a>6. 服务器输出字节数据到浏览器：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line"><span class="comment">//设置编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//1.获取字节输出流</span></span><br><span class="line">        ServletOutputStream sos= response.getOutputStream();</span><br><span class="line">        <span class="comment">//2.输出数据</span></span><br><span class="line">        sos.write(<span class="string">&quot;你好&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="7-验证码"><a href="#7-验证码" class="headerlink" title="7. 验证码"></a>7. 验证码</h2><h4 id="1-生成验证码"><a href="#1-生成验证码" class="headerlink" title="1. 生成验证码"></a>1. 生成验证码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/checkCodeServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个对象，在内存中图片(验证码图片对象)</span></span><br><span class="line">        <span class="keyword">int</span> wight = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(wight, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">// 2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色(默认黑色)</span></span><br><span class="line">        Graphics g = image.getGraphics();<span class="comment">//添加画笔对象</span></span><br><span class="line">        g.setColor(Color.PINK);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>, <span class="number">0</span>, wight, height);<span class="comment">//设置起始范围</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2画边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>, <span class="number">0</span>, wight - <span class="number">1</span>, height - <span class="number">1</span>);<span class="comment">//同上，因为边框本身有大小，因此需要-1，否则超出范围</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.3 写验证码</span></span><br><span class="line">        String s = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">        <span class="comment">//生成随机脚标</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = r.nextInt(s.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            g.drawString(c + <span class="string">&quot;&quot;</span>, wight / <span class="number">5</span> * i, height / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.4 画干扰线</span></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = r.nextInt(wight);</span><br><span class="line">            <span class="keyword">int</span> x2 = r.nextInt(wight);</span><br><span class="line">            <span class="keyword">int</span> y1 = r.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = r.nextInt(height);</span><br><span class="line">            g.drawLine(x1,x2,y1,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片输出在页面上</span></span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, response.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-点击图片切换不同验证码"><a href="#2-点击图片切换不同验证码" class="headerlink" title="2. 点击图片切换不同验证码"></a>2. 点击图片切换不同验证码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//1.获取图片对象</span></span><br><span class="line">            <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">&quot;checkCode&quot;</span>);</span><br><span class="line">            <span class="comment">//2.绑定单击事件</span></span><br><span class="line">            img.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">//加时间戳</span></span><br><span class="line">                <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">                img.src = <span class="string">&quot;/Response/checkCodeServlet?&quot;</span> + date;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;img  id=<span class="string">&quot;checkCode&quot;</span> src=<span class="string">&quot;/Response/checkCodeServlet&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;a id=<span class="string">&quot;change&quot;</span> href=<span class="string">&quot;&quot;</span>&gt;看不起？换一张&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="ServletContext-对象："><a href="#ServletContext-对象：" class="headerlink" title="ServletContext 对象："></a>ServletContext 对象：</h1><h2 id="1-概念：-1"><a href="#1-概念：-1" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 代表整个web应用，可以和程序的容器(服务器)来通信</span><br></pre></td></tr></table></figure><h2 id="2-获取ServletContext"><a href="#2-获取ServletContext" class="headerlink" title="2. 获取ServletContext:"></a>2. 获取ServletContext:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取方式1：</span><br><span class="line">            &#x2F;&#x2F;通过request对象获取：</span><br><span class="line">                &#x2F;&#x2F;request.getServletContext();</span><br><span class="line">        ServletContext context1 &#x3D; request.getServletContext();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取方式2：</span><br><span class="line">            &#x2F;&#x2F;通过HTTPServlet获取</span><br><span class="line">                &#x2F;&#x2F;this.getServletContext();</span><br><span class="line">        ServletContext context2 &#x3D; this.getServletContext();</span><br></pre></td></tr></table></figure><h2 id="3-获取MIME类型："><a href="#3-获取MIME类型：" class="headerlink" title="3. 获取MIME类型："></a>3. 获取MIME类型：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.获取MIME类型：</span><br><span class="line">    * MIME类型：在互联网通信过程中定义的一种文件数据类型</span><br><span class="line">        * 格式： 大类型&#x2F;小类型    text&#x2F;html        image&#x2F;jpg</span><br><span class="line">        </span><br><span class="line">        * 获取：String getMimeType(String file)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.通过HTTPServlet获取：</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//2.定义文件名称：</span></span><br><span class="line">        String fileName = <span class="string">&quot;a.jpg&quot;</span>;</span><br><span class="line"><span class="comment">//3.获取MIME类型：</span></span><br><span class="line">        String mimeType = context.getMimeType(fileName);</span><br><span class="line">        System.out.println(mimeType);</span><br></pre></td></tr></table></figure><h2 id="4-域对象：共享数据"><a href="#4-域对象：共享数据" class="headerlink" title="4. 域对象：共享数据"></a>4. 域对象：共享数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.setAttribute(String name,Object value)</span><br><span class="line">2.getAttribute(String name)</span><br><span class="line">3.removeAttributes(String name)</span><br><span class="line"></span><br><span class="line">* ServletContext对象范围：所有用户所有请求的数据</span><br><span class="line">    * 因此要慎重使用</span><br></pre></td></tr></table></figure><h2 id="5-获取文件的真实-服务器-路径"><a href="#5-获取文件的真实-服务器-路径" class="headerlink" title="5. 获取文件的真实(服务器)路径"></a>5. 获取文件的真实(服务器)路径</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法：String getRealPath(String path)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取ServletContext对象</span></span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件的服务器路径</span></span><br><span class="line">String b = context.getRealPath(<span class="string">&quot;/b.txt&quot;</span>);<span class="comment">//web下的资源访问</span></span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line">String c = context.getRealPath(<span class="string">&quot;/WEB-INF/c.txt&quot;</span>);<span class="comment">//WEB-INF目录下的资源访问</span></span><br><span class="line">System.out.println(c);</span><br><span class="line"></span><br><span class="line">String a = context.getRealPath(<span class="string">&quot;/WEB-INF/classes/a.txt&quot;</span>);<span class="comment">//src目录下的资源访问</span></span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure><h1 id="案例：文件下载"><a href="#案例：文件下载" class="headerlink" title="案例：文件下载"></a>案例：文件下载</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 文件下载需求：</span><br><span class="line">    1. 页面显示超链接</span><br><span class="line">    2. 点击超链接后弹出下载提示框</span><br><span class="line">    3. 完成图片文件下载</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 分析：</span><br><span class="line">    1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</span><br><span class="line">    2. 任何资源都必须弹出下载提示框</span><br><span class="line">    3. 使用响应头设置资源的打开方式：</span><br><span class="line">        * content-disposition:attachment;filename&#x3D;xxx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line">    1. 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</span><br><span class="line">    2. 定义Servlet</span><br><span class="line">        1. 获取文件名称</span><br><span class="line">        2. 使用字节输入流加载文件进内存</span><br><span class="line">        3. 指定response的响应头： content-disposition:attachment;filename&#x3D;xxx</span><br><span class="line">        4. 将数据写出到response输出流</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 问题：</span><br><span class="line">    * 中文文件问题</span><br><span class="line">        * 解决思路：</span><br><span class="line">            1. 获取客户端使用的浏览器版本信息</span><br><span class="line">            2. 根据不同的版本信息，设置filename的编码方式不同</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ServletContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/downloadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取请求参数，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">&quot;/img/&quot;</span> + filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>, mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.2设置响应头打开方式:content-disposition</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决中文文件名问题</span></span><br><span class="line">        <span class="comment">//1.获取user-agent请求头、</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename&quot;</span>+filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            sos.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> http </tag>
            
            <tag> request </tag>
            
            <tag> response </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax与Json的学习</title>
      <link href="/2020/08/11/Ajax%20&amp;%20jsion/"/>
      <url>/2020/08/11/Ajax%20&amp;%20jsion/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX:"></a>AJAX:</h1><h2 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Asynchronous Javascript And XML”（异步 JavaScript 和 XML）</span><br><span class="line">    * 异步和同步：客户端和服务器端相互通信的基础上</span><br><span class="line">        * 客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</span><br><span class="line">        * 客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</span><br><span class="line"></span><br><span class="line">        Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</span><br><span class="line">        通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</span><br><span class="line">        传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</span><br><span class="line"></span><br><span class="line">        提升用户的体验</span><br></pre></td></tr></table></figure><h2 id="2-JQeury实现方式："><a href="#2-JQeury实现方式：" class="headerlink" title="2. JQeury实现方式："></a>2. JQeury实现方式：</h2><h3 id="1-ajax"><a href="#1-ajax" class="headerlink" title="1. $.ajax()"></a>1. $.ajax()</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：$.ajax(&#123;键值对&#125;);</span><br><span class="line">             &#x2F;&#x2F;使用$.ajax()发送异步请求</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    url:&quot;ajaxServlet1111&quot; , &#x2F;&#x2F; 请求路径</span><br><span class="line">                    type:&quot;POST&quot; , &#x2F;&#x2F;请求方式</span><br><span class="line">                    &#x2F;&#x2F;data: &quot;username&#x3D;jack&amp;age&#x3D;23&quot;,&#x2F;&#x2F;请求参数</span><br><span class="line">                    data:&#123;&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23&#125;,</span><br><span class="line">                    success:function (data) &#123;</span><br><span class="line">                        alert(data);</span><br><span class="line">                    &#125;,&#x2F;&#x2F;响应成功后的回调函数</span><br><span class="line">                    error:function () &#123;</span><br><span class="line">                        alert(&quot;出错啦...&quot;)</span><br><span class="line">                    &#125;,&#x2F;&#x2F;表示如果请求响应出现错误，会执行的回调函数</span><br><span class="line">    </span><br><span class="line">                    dataType:&quot;text&quot;&#x2F;&#x2F;设置接受到的响应数据的格式</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/jquery-3.3.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//定义方法：</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//使用$.ajax()发送异步请求</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            url:<span class="string">&quot;servlet&quot;</span>,<span class="comment">//请求路径</span></span></span><br><span class="line"><span class="javascript">            type:<span class="string">&quot;POST&quot;</span>,<span class="comment">//请求方式</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//data:&quot;username=jack&amp;age=23&quot;,//请求参数</span></span></span><br><span class="line"><span class="javascript">            data:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;23&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                alert(data);</span><br><span class="line"><span class="javascript">            &#125;,<span class="comment">//响应成功后的回调函数</span></span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">             error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;出错啦。。。&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;,<span class="comment">//表示如果请求响应出现错误，会执行的回调函数</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">             dataType:<span class="string">&quot;text&quot;</span><span class="comment">//设置接受到的响应数据的格式</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-get-发送get请求"><a href="#2-get-发送get请求" class="headerlink" title="2. $.get():发送get请求"></a>2. $.get():发送get请求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：$.get(url, [data], [callback], [type])</span><br><span class="line">                * 参数：</span><br><span class="line">                    * url：请求路径</span><br><span class="line">                    * data：请求参数</span><br><span class="line">                    * callback：回调函数</span><br><span class="line">                    * type：响应结果的类型</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//定义方法：</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $.get(<span class="string">&quot;servlet&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;silent&quot;</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-post-：发送post请求"><a href="#3-post-：发送post请求" class="headerlink" title="3. $.post()：发送post请求"></a>3. $.post()：发送post请求</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：$.post(url, [data], [callback], [type])</span><br><span class="line">                * 参数：</span><br><span class="line">                    * url：请求路径</span><br><span class="line">                    * data：请求参数</span><br><span class="line">                    * callback：回调函数</span><br><span class="line">                    * type：响应结果的类型</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//定义方法：</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        $.post(<span class="string">&quot;servlet&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;silent&quot;</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON:"></a>JSON:</h1><h2 id="1-概念：-1"><a href="#1-概念：-1" class="headerlink" title="1. 概念："></a>1. 概念：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JavaScript Object Notation        JavaScript对象表示法</span><br><span class="line"></span><br><span class="line">* json现在多用于存储和交换文本信息的语法</span><br><span class="line">* 进行数据的传输</span><br><span class="line">* JSON 与 XML 更小、更快，更容易解析</span><br></pre></td></tr></table></figure><h2 id="2-语法："><a href="#2-语法：" class="headerlink" title="2. 语法："></a>2. 语法：</h2><h3 id="1-基本规则："><a href="#1-基本规则：" class="headerlink" title="1. 基本规则："></a>1. 基本规则：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 数据在名称&#x2F;值对中：json数据是由键值对构成的</span><br><span class="line">    * 键用引号(单双都可)引起来，也可以不适用引号</span><br><span class="line">    * 值得取值类型：</span><br><span class="line">        1.数字：(整数或浮点数)</span><br><span class="line">        2.字符串(在双引号中)</span><br><span class="line">        3.逻辑值(true 或 false)</span><br><span class="line">        4.数组：(在方括号中)    &#123;&quot;person&quot;:[&#123;&#125;,&#123;&#125;]&#125;</span><br><span class="line">        5.对象:(在花括号中)    &#123;&quot;address&quot;:&#123;&quot;province&quot;:&quot;陕西&quot;&#125;...&#125;</span><br><span class="line">        6.null</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//定义基本格式：</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// alert(person);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//嵌套格式： &#123;&#125; - []</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> persons = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;persons&quot;</span>: [&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    <span class="comment">// alert(persons);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//嵌套格式：[] - &#123;&#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ps = [&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">    ];</span><br><span class="line">    alert(ps);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-获取数据："><a href="#2-获取数据：" class="headerlink" title="2. 获取数据："></a>2. 获取数据：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. json对象.键名</span><br><span class="line">        2. json对象[&quot;键名&quot;]</span><br><span class="line">        3. 数组对象[索引]</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//定义基本格式：</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// alert(person);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//获取张三的值</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//var name = person.name;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name = person[<span class="string">&quot;name&quot;</span>];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// alert(name);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//嵌套格式： &#123;&#125; - []</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> persons = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;persons&quot;</span>: [&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;王五&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        <span class="comment">// alert(persons);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//获取王五的值</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> name1 = persons.persons[<span class="number">2</span>].name;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// alert(name1);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//嵌套格式：[] - &#123;&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ps = [&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">        ];</span><br><span class="line"><span class="javascript">        <span class="comment">// alert(ps);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取李四的值</span></span></span><br><span class="line">        alert(ps[1].name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-遍历："><a href="#3-遍历：" class="headerlink" title="3. 遍历："></a>3. 遍历：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//定义基本格式：</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//嵌套格式：[] - &#123;&#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ps = [&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;李四&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>, <span class="attr">age</span>: <span class="number">12</span>, <span class="attr">gender</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//遍历person</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//for in 循环换</span></span></span><br><span class="line">      /*  for (var key in person) &#123;</span><br><span class="line"><span class="javascript">            alert(key + <span class="string">&quot;:&quot;</span> + person[key]);</span></span><br><span class="line">        &#125;*/</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="comment">//遍历数组ps</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//循环嵌套</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; ps.length;i ++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> p = ps[i];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> p) &#123;</span></span><br><span class="line"><span class="javascript">                alert(key + <span class="string">&quot;:&quot;</span> + p[key]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Json数据和Java对象的相互转换："><a href="#3-Json数据和Java对象的相互转换：" class="headerlink" title="3. Json数据和Java对象的相互转换："></a>3. Json数据和Java对象的相互转换：</h2><h3 id="1-Json解析器："><a href="#1-Json解析器：" class="headerlink" title="1. Json解析器："></a>1. Json解析器：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 常见的解析器：</span><br><span class="line">    Jsonlib, Gson, fastjson, jackson</span><br></pre></td></tr></table></figure><h3 id="2-json转为Java对象："><a href="#2-json转为Java对象：" class="headerlink" title="2. json转为Java对象："></a>2. json转为Java对象：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 使用步骤：</span><br><span class="line">    1.导入Jackson的相关jar包</span><br><span class="line">    2.创建Jackson的核心对象    ObjectMapper</span><br><span class="line">    3.调用ObjectMapper的相关方法进行转换</span><br><span class="line">        * readValue(json字符串数据,Class)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.初始化json字符串</span></span><br><span class="line">    String json = <span class="string">&quot;&#123;\&quot;gender\&quot;:\&quot;男\&quot;,\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;age\&quot;:12&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建ObjectMapper对象</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.转换为Java对象，Person对象</span></span><br><span class="line">    Person person = mapper.readValue(json, Person.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Java对象转为json："><a href="#3-Java对象转为json：" class="headerlink" title="3. Java对象转为json："></a>3. Java对象转为json：</h3><h4 id="1-使用步骤"><a href="#1-使用步骤" class="headerlink" title="1. 使用步骤:"></a>1. 使用步骤:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 使用步骤：</span><br><span class="line">    1.导入Jackson的相关jar包</span><br><span class="line">    2.创建Jackson的核心对象    ObjectMapper</span><br><span class="line">    3.调用ObjectMapper的相关方法进行转换</span><br></pre></td></tr></table></figure><h4 id="2-转换方法："><a href="#2-转换方法：" class="headerlink" title="2. 转换方法："></a>2. 转换方法：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* WriteValue(参数1,obj):</span><br><span class="line">    * 参数1：</span><br><span class="line">        File：将obj对象转换为JSON字符串，并保存到指定的文件中</span><br><span class="line">        Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中</span><br><span class="line">        OutputStream：将obj对象转换为json字符串，并将json数据填充到字节输出流中</span><br><span class="line"></span><br><span class="line">* WritevalueAsString(obj):将对象转为json字符串</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentvoice.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentvoice.domain.Person;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-03 19:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Java对象转为JSON字符串</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建Person对象</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">12</span>);</span><br><span class="line">        person.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建jackson的核心对象   ObjectMapper</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.转换</span></span><br><span class="line">        String str = mapper.writeValueAsString(person);</span><br><span class="line"><span class="comment">//        System.out.println(str);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//writeValue    将数据写到d://a.txt文件中</span></span><br><span class="line">        mapper.writeValue(<span class="keyword">new</span> File(<span class="string">&quot;d://a.txt&quot;</span>),person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//writeValue.将数据关联到writer中</span></span><br><span class="line">        mapper.writeValue(<span class="keyword">new</span> FileWriter(<span class="string">&quot;d://b.txt&quot;</span>),person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-注解："><a href="#3-注解：" class="headerlink" title="3. 注解："></a>3. 注解：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. @JsonIgnore：排除属性</span><br><span class="line">2. @JsonFormat：属性值的格式化</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@JsonIgnore 排除属性</span></span><br><span class="line">   <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> birthday;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建Person对象</span></span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    person.setAge(<span class="number">12</span>);</span><br><span class="line">    person.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    person.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换：</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String str = mapper.writeValueAsString(person);</span><br><span class="line">    System.out.println(str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-复杂Java对象转换："><a href="#4-复杂Java对象转换：" class="headerlink" title="4. 复杂Java对象转换："></a>4. 复杂Java对象转换：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.List：数组</span><br><span class="line">2.Map：对象格式一致</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">    p1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    p1.setAge(<span class="number">23</span>);</span><br><span class="line">    p1.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">    p2.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    p2.setAge(<span class="number">23</span>);</span><br><span class="line">    p2.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Person p3 = <span class="keyword">new</span> Person();</span><br><span class="line">    p3.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    p3.setAge(<span class="number">23</span>);</span><br><span class="line">    p3.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建List对象</span></span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(p1);</span><br><span class="line">    list.add(p2);</span><br><span class="line">    list.add(p3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换</span></span><br><span class="line">    ObjectMapper listMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String str = listMapper.writeValueAsString(list);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Map对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">12</span>);</span><br><span class="line">    map.put(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换</span></span><br><span class="line">    ObjectMapper mapMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String str = mapMapper.writeValueAsString(map);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 校验用户名是否存在</span><br><span class="line">    1. 服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：</span><br><span class="line">        1. $.get(type):将最后一个参数type指定为&quot;json&quot;</span><br><span class="line">        2. 在服务器端设置MIME类型</span><br><span class="line">            response.setContentType(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;);</span><br></pre></td></tr></table></figure><ul><li><p>regist.html</p></li><li><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;regist&lt;/title&gt;    &lt;script src=&quot;js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        //在页面加载完成后        $(function () &#123;            //给username绑定blur事件            $(&quot;#username&quot;).blur(function () &#123;                //获取username文本框输入的值                var username = $(this).val();                //发送ajax请求                //期望服务器响应回的数据格式：&#123;&quot;userExsit&quot;:true,&quot;msg&quot;:&quot;此用户名太受欢迎,请更换一个&quot;&#125;                //                         &#123;&quot;userExsit&quot;:false,&quot;msg&quot;:&quot;用户名可用&quot;&#125;                $.get(&quot;findUserServlet&quot;,&#123;username:username&#125;,function (data) &#123;                        //判断userExsit键的值是否是true                    var span = $(&quot;#s_username&quot;);                    if (data.userExsit) &#123;                        //用户名存在                        span.css(&quot;color&quot;,&quot;red&quot;);                        span.html(data.msg);                    &#125; else &#123;                        //用户名不存在                        span.css(&quot;color&quot;,&quot;green&quot;);                        span.html(data.msg);                    &#125;                &#125;);            &#125;);        &#125;);    &lt;/script&gt;</code></pre></li></ul>  </head>  <body>  <form action="">      <input type="text" id="username" placeholder="请输入用户名" name="username">      <span id="s_username"></span>      <br>      <input type="password" id="password" name="password" placeholder="请输入密码">      <br>      <input type="submit" value="注册">  </form>  </body>  </html>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* FindUserServlet.java</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;java</span><br><span class="line">  import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">  </span><br><span class="line">  import javax.servlet.ServletException;</span><br><span class="line">  import javax.servlet.annotation.WebServlet;</span><br><span class="line">  import javax.servlet.http.HttpServlet;</span><br><span class="line">  import javax.servlet.http.HttpServletRequest;</span><br><span class="line">  import javax.servlet.http.HttpServletResponse;</span><br><span class="line">  import java.io.IOException;</span><br><span class="line">  import java.util.HashMap;</span><br><span class="line">  import java.util.Map;</span><br><span class="line">  </span><br><span class="line">  &#x2F;**</span><br><span class="line">   * Created by NiuLinXuan on 2020-05-03 22:23</span><br><span class="line">   *&#x2F;</span><br><span class="line">  @WebServlet(&quot;&#x2F;findUserServlet&quot;)</span><br><span class="line">  public class FindUserServlet extends HttpServlet &#123;</span><br><span class="line">      @Override</span><br><span class="line">      protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">  </span><br><span class="line">          &#x2F;&#x2F;1.获取用户名</span><br><span class="line">          String username &#x3D; request.getParameter(&quot;username&quot;);</span><br><span class="line">  </span><br><span class="line">          &#x2F;&#x2F;2.调用service层判断用户名是否存在</span><br><span class="line">  </span><br><span class="line">          &#x2F;&#x2F;期望服务器响应回的数据格式：&#123;&quot;userExsit&quot;:true,&quot;msg&quot;:&quot;此用户名太受欢迎,请更换一个&quot;&#125;</span><br><span class="line">          &#x2F;&#x2F;                         &#123;&quot;userExsit&quot;:false,&quot;msg&quot;:&quot;用户名可用&quot;&#125;</span><br><span class="line">  </span><br><span class="line">          &#x2F;&#x2F;设置响应的格式为json</span><br><span class="line">          response.setContentType(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;);</span><br><span class="line">  </span><br><span class="line">          Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;String,Object&gt;();</span><br><span class="line">          if (&quot;tom&quot;.equals(username)) &#123;</span><br><span class="line">              &#x2F;&#x2F;存在</span><br><span class="line">              map.put(&quot;userExsit&quot;,true);</span><br><span class="line">              map.put(&quot;msg&quot;,&quot;此用户名太受欢迎,请更换一个&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              &#x2F;&#x2F;不存在</span><br><span class="line">              map.put(&quot;userExsit&quot;,false);</span><br><span class="line">              map.put(&quot;msg&quot;,&quot;用户名可用&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">          &#x2F;&#x2F;将map转为json，并且传递给客户端</span><br><span class="line">          &#x2F;&#x2F;将map转换为json</span><br><span class="line">          ObjectMapper mapper &#x3D; new ObjectMapper();</span><br><span class="line">  </span><br><span class="line">          &#x2F;&#x2F;并且传递给客户端</span><br><span class="line">          mapper.writeValue(response.getWriter(),map);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      @Override</span><br><span class="line">      protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">          this.doPost(request, response);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 笔记 </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序之简单排序</title>
      <link href="/2020/08/09/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/08/09/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="简单排序"><a href="#简单排序" class="headerlink" title="简单排序"></a>简单排序</h1><h2 id="1-Comparable接口介绍"><a href="#1-Comparable接口介绍" class="headerlink" title="1. Comparable接口介绍"></a>1. <strong>Comparable</strong>接口介绍</h2><p>在元素之间进行比较，而Java提供了一个接口Comparable就是用来定义排序规则的。</p><p><strong>需求：</strong></p><p> 1.定义一个学生类Student，具有年龄age和姓名username两个属性，并通过Comparable接口提供比较规则；</p><p> 2.定义测试类Test，在测试类Test中定义测试方法Comparable getMax(Comparable c1,Comparable c2)完成测试。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.comparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学生类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/9 8:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义比较规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAge() - o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.comparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/9 8:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Student对象，并调用getMax方法，进行测试</span></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="number">15</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student(<span class="number">16</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Comparable max = getMax(stu1, stu2);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Comparable <span class="title">getMax</span><span class="params">(Comparable c1,Comparable c2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = c1.compareTo(c2);</span><br><span class="line">        <span class="comment">// 如果 result &lt; 0,则 c1 比 c2 小;</span></span><br><span class="line">        <span class="comment">// 如果 result = 0,则 c1 和 c2 相等;</span></span><br><span class="line">        <span class="comment">// 如果 result &gt; 0,则 c1 比 c2 大;</span></span><br><span class="line">        <span class="keyword">if</span> (result &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> c1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> c2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-冒泡排序"><a href="#2-冒泡排序" class="headerlink" title="2. 冒泡排序"></a>2. <strong>冒泡排序</strong></h2><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。</p><p><strong>需求：</strong></p><p>排序前：{4,5,6,3,2,1}</p><p>排序后：{1,2,3,4,5,6}</p><p><strong>排序原理：</strong></p><ol><li><p>比较相邻的元素。如果前一个元素比后一个元素大，就交换这两个元素的位置。</p></li><li><p>对每一对相邻元素做同样的工作，从开始第一对元素到结尾的最后一对元素。最终最后位置的元素就是最大值</p></li></ol><p><strong>冒泡排序</strong>API设计：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200809091058.png" alt="image-20200809090841377"></p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.comparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/9 9:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bubble</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对数组a中的元素进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (greater(a[j], a[j + <span class="number">1</span>])) &#123;</span><br><span class="line">                    exch(a, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较v元素是否大于w元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greater</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组元素i和j交换位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.comparable.Bubble;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/9 9:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        Bubble.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>冒泡排序的时间复杂度分析</strong> 冒泡排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码，所以，我们分析冒泡排序的时间复杂度，主要分析一下内层循环体的执行次数即可。</p><p>在最坏情况下，也就是假如要排序的元素为{6,5,4,3,2,1}逆序，那么：</p><p>元素比较的次数为：</p><p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>元素交换的次数为：</p><p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>总执行次数为：</p><p> (N^2/2-N/2)+(N^2/2-N/2)=N^2-N;</p><p>按照大O推导法则，保留函数中的最高阶项那么最终<strong>冒泡排序的时间复杂度为O(N^2).</strong></p><h2 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3. 选择排序"></a>3. 选择排序</h2><p>选择排序是一种更加简单直观的排序方法。</p><p><strong>需求：</strong></p><p>排序前：{4,6,8,7,9,2,10,1}</p><p>排序后：{1,2,4,5,7,8,9,10}</p><p><strong>排序原理：</strong></p><p> 1.每一次遍历的过程中，都假定第一个索引处的元素是最小值，和其他索引处的值依次进行比较，如果当前索引处的值大于其他某个索引处的值，则假定其他某个索引出的值为最小值，最后可以找到最小值所在的索引</p><p> 2.交换第一个索引处和最小值所在的索引处的值</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200809094046.png" alt="选择排序"></p><p><strong>选择排序</strong>API设计：</p><table><thead><tr><th align="right">类名</th><th>Selection</th></tr></thead><tbody><tr><td align="right">构造方法</td><td>Selection()：创建Selection对象</td></tr><tr><td align="right">成员方法</td><td>1.public static void sort(Comparable[] a)：对数组内的元素进行排序                                            2.private static boolean greater(Comparable v,Comparable w):判断v是否大于w                       3.private static void exch(Comparable[] a,int i,int j)：交换a数组中，索引i和索引j处的值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.comparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/9 12:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对数组a中的元素进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= a.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//假定本次遍历，最小值所在的索引是i</span></span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (greater(a[minIndex], a[j])) &#123;</span><br><span class="line">                    <span class="comment">//跟换最小值所在的索引</span></span><br><span class="line">                    minIndex=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//交换i索引处和minIndex索引处的值</span></span><br><span class="line">            exch(a, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较v元素是否大于w元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greater</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组元素i和j交换位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.comparable.Selection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/9 12:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] a = &#123;<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        Selection.sort(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>选择排序的时间复杂度分析：</strong></p><p>选择排序使用了双层for循环，其中外层循环完成了数据交换，内层循环完成了数据比较，所以我们分别统计数据交换次数和数据比较次数：</p><p>数据比较次数：</p><p> (N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>数据交换次数：</p><p> N-1</p><p>时间复杂度：N^2/2-N/2+（N-1）=N^2/2+N/2-1;</p><p>根据大O推导法则，保留最高阶项，去除常数因子，时间复杂度为O(N^2);</p><h2 id="4-插入排序"><a href="#4-插入排序" class="headerlink" title="4. 插入排序"></a>4. 插入排序</h2><p>插入排序（Insertion sort）是一种简单直观且稳定的排序算法</p><p><strong>需求：</strong></p><p>排序前：{4,3,2,10,12,1,5,6}</p><p>排序后：{1,2,3,4,5,6,10,12}</p><p><strong>排序原理：</strong></p><p>1.把所有的元素分为两组，已经排序的和未排序的；</p><p>2.找到未排序的组中的第一个元素，向已经排序的组中进行插入；</p><p>3.倒叙遍历已经排序的元素，依次和待插入的元素进行比较，直到找到一个元素小于等于待插入元素，那么就把待插入元素放到这个位置，其他的元素向后移动一位；</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200809151817.png" alt="插入排序"></p><p><strong>插入排序</strong>API设计：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200809151851.png" alt="插入api"></p><p><strong>插入排序代码实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.comparable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/9 15:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数组a中的元素进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="comment">//当前元素为a[i],依次和i前面的元素比较，找到一个小于等于a[i]的元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (greater(a[j - <span class="number">1</span>], a[j])) &#123;</span><br><span class="line">                    <span class="comment">// 交换元素</span></span><br><span class="line">                    exch(a, j - <span class="number">1</span>, j);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 找到了该元素，结束</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较v元素是否大于w元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">greater</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v.compareTo(w) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组元素i和j交换位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.comparable.Insertion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> silentCow</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/8/9 15:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        Insertion.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入排序的时间复杂度分析</strong></p><p>插入排序使用了双层for循环，其中内层循环的循环体是真正完成排序的代码，所以，我们分析插入排序的时间复杂度，主要分析一下内层循环体的执行次数即可。</p><p>最坏情况，也就是待排序的数组元素为{12,10,6,5,4,3,2,1}，那么：</p><p>比较的次数为：</p><p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>交换的次数为：</p><p>(N-1)+(N-2)+(N-3)+…+2+1=((N-1)+1)*(N-1)/2=N^2/2-N/2;</p><p>总执行次数为：</p><p>(N^2/2-N/2)+(N^2/2-N/2)=N^2-N;</p><p>按照大O推导法则，保留函数中的最高阶项那么最终<strong>插入排序的时间复杂度为O(N^2).</strong></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Leetcode】LCP-06-拿硬币</title>
      <link href="/2020/08/08/%E3%80%90LCP-06.-%E6%8B%BF%E7%A1%AC%E5%B8%81%E3%80%91/"/>
      <url>/2020/08/08/%E3%80%90LCP-06.-%E6%8B%BF%E7%A1%AC%E5%B8%81%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>桌上有 <code>n</code> 堆力扣币，每堆的数量保存在数组 <code>coins</code> 中。我们每次可以选择任意一堆，拿走其中的一枚或者两枚，求拿完所有力扣币的最少次数。</p><p>示例 1：</p><p>输入：[4,2,1]</p><p>输出：4</p><p>解释：第一堆力扣币最少需要拿 2 次，第二堆最少需要拿 1 次，第三堆最少需要拿 1 次，总共 4 次即可拿完。</p><p>示例 2：</p><p>输入：[2,3,10]</p><p>输出：8</p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><p>审题可得：任何数要么整除2，要么除2余1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCount</span><span class="params">(<span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : coins) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                res += i / <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res += i / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度与空间复杂度</title>
      <link href="/2020/08/08/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2020/08/08/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a><strong>时间复杂度分析</strong></h1><p>在计算机程序编写前，依据统计方法对算法进行估算，经过总结，我们发现一个高级语言编写的程序程序在计算机上运行所消耗的时间取决于下列因素：</p><p> 1.算法采用的策略和方案；</p><p> 2.编译产生的代码质量；</p><p> 3.问题的输入规模(所谓的问题输入规模就是输入量的多少)；</p><p> 4.机器执行指令的速度；</p><p><strong>由此可见，抛开这些与计算机硬件、软件有关的因素，一个程序的运行时间依赖于算法的好坏和问题的输入规模。如果算法固定，那么该算法的执行时间就只和问题的输入规模有关系了</strong>。</p><p><strong>举例：</strong>求和案例 — 计算1到100的和</p><p>第一种解法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果输入量为n为1，则需要计算1次；</span></span><br><span class="line"><span class="comment">// 如果输入量n为1亿，则需要计算1亿次；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次</span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;<span class="comment">//执行1次</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;<span class="comment">//执行了n+1次</span></span><br><span class="line">        sum += i;<span class="comment">//执行了n次 </span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种解法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果输入量为n为1，则需要计算1次； </span></span><br><span class="line"><span class="comment">// 如果输入量n为1亿，则需要计算1次； </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    sum = (n + <span class="number">1</span>) * n / <span class="number">2</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当输入规模为n时，第一种算法执行了1+1+(n+1)+n=2n+3次；第二种算法执行了1+1+1=3次。</p><p>如果我们把第一种算法的循环体看做是一个整体，忽略结束条件的判断，那么其实这两个算法运行时间的差距就是n和1的差距。</p><p>上面这个例子中，如果我们要精确的研究循环的条件执行了多少次，是一件很麻烦的事情，并且，由于真正计算和的代码是内循环的循环体，所以，在研究算法的效率时，我们只考虑核心代码的执行次数，这样可以简化分析。</p><p>我们研究算法复杂度，侧重的是当输入规模不断增大时，算法的增长量的一个抽象(规律)，而不是精确地定位需要执行多少次，因为如果是这样的话，我们又得考虑回编译期优化等问题，容易主次跌倒。</p><p>我们不关心编写程序所用的语言是什么，也不关心这些程序将跑在什么样的计算机上，我们只关心它所实现的算法。这样，不计那些循环索引的递增和循环终止的条件、变量声明、打印结果等操作，最终在分析程序的运行时间时，最重要的是把程序看做是独立于程序设计语言的算法或一系列步骤。我们分析一个算法的运行时间，最重要的就是把核心操作的次数和输入规模关联起来。</p><h2 id="大O记法"><a href="#大O记法" class="headerlink" title="大O记法"></a>大O记法</h2><p><strong>定义：</strong></p><p>在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数，进而分析T(n)随着n的变化情况并确定T(n)的量级。算法的时间复杂度，就是算法的时间量度，记作:T(n)=O(f(n))。它表示随着问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐近时间复杂度，简称时间复杂度，其中f(n)是问题规模n的某个函数。</p><p>在这里，我们需要明确一个事情：<strong>执行次数=执行时间</strong></p><p>用大写O()来体现算法时间复杂度的记法，我们称之为大O记法。一般情况下，随着输入规模n的增大，T(n)增长最慢的算法为最优算法。</p><p>下面我们使用大O表示法来表示一些求和算法的时间复杂度：</p><p>算法一：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    sum = (n + <span class="number">1</span>) * n / <span class="number">2</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法二：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        sum += i;<span class="comment">//执行了n次 </span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法三：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;<span class="comment">//执行1次 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            sum += i;<span class="comment">//执行n^2次 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果忽略判断条件的执行次数和输出语句的执行次数，那么当输入规模为n时，以上算法执行的次数分别为：</p><p>算法一：3次</p><p>算法二：n+3次</p><p>算法三：n^2+2次</p><p>如果用大O记法表示上述每个算法的时间复杂度，应该如何表示呢？基于我们对函数渐近增长的分析，推导大O阶的表示法有以下几个规则可以使用：</p><p><strong>1.用常数1取代运行时间中的所有加法常数；</strong></p><p><strong>2.在修改后的运行次数中，只保留高阶项；</strong></p><p><strong>3.如果最高阶项存在，且常数因子不为1，则去除与这个项相乘的常数；</strong></p><p>所以，上述算法的大O记法分别为：</p><p>算法一：O(1)</p><p>算法二：O(n)</p><p>算法三：O(n^2)</p><h2 id="常见的大O阶"><a href="#常见的大O阶" class="headerlink" title="常见的大O阶"></a>常见的大O阶</h2><h3 id="1-线性阶"><a href="#1-线性阶" class="headerlink" title="1.线性阶"></a>1.线性阶</h3><p>一般含有非嵌套循环涉及线性阶，线性阶就是随着输入规模的扩大，对应计算次数呈直线增长，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum=&quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，它的循环的时间复杂度为O(n),因为循环体中的代码需要执行n次</p><h3 id="2-平方阶"><a href="#2-平方阶" class="headerlink" title="2.平方阶"></a>2.平方阶</h3><p>一般嵌套循环属于这种时间复杂度</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，n=100，也就是说，外层循环每执行一次，内层循环就执行100次，那总共程序想要从这两个循环中出来，就需要执行100*100次，也就是n的平方次，所以这段代码的时间复杂度是O(n^2).</p><h3 id="3-立方阶"><a href="#3-立方阶" class="headerlink" title="3.立方阶"></a>3.立方阶</h3><p>一般三层嵌套循环属于这种时间复杂度</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>, n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码，n=100，也就是说，外层循环每执行一次，中间循环循环就执行100次，中间循环每执行一次，最内层循环需要执行100次，那总共程序想要从这三个循环中出来，就需要执行100<em>100</em>100次，也就是n的立方，所以这段代码的时间复杂度是O(n^3).</p><h3 id="4-对数阶"><a href="#4-对数阶" class="headerlink" title="4.对数阶"></a>4.对数阶</h3><p>对数，属于高中数学的内容，我们分析程序以程序为主，数学为辅，所以不用过分担心。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于每次i*2之后，就距离n更近一步，假设有x个2相乘后大于n，则会退出循环。由于是2^x=n,得到x=log(2)n,所以这个循环的时间复杂度为O(logn);</p><p>对于对数阶，由于随着输入规模n的增大，不管底数为多少，他们的增长趋势是一样的，所以我们会忽略底数。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200808202825.png" alt="image-20200808201051064"></p><h3 id="5-常数阶"><a href="#5-常数阶" class="headerlink" title="5.常数阶"></a>5.常数阶</h3><p>一般不涉及循环操作的都是常数阶，因为它不会随着n的增长而增加操作次数。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> i = n + <span class="number">2</span>;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码，不管输入规模n是多少，都执行2次，根据大O推导法则，常数用1来替换，所以上述代码的时间复杂度为O(1)</p><p>下面是对<strong>常见时间复杂度的一个总结：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200808202826.png" alt="image-20200808201220812"></p><p>他们的复杂程度从低到高依次为：</p><p> O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)</p><p>根据前面的折线图分析，我们会发现，从平方阶开始，随着输入规模的增大，时间成本会急剧增大，所以，我们的算法，尽可能的追求的是O(1),O(logn),O(n),O(nlogn)这几种时间复杂度，而如果发现算法的时间复杂度为平方阶、立方阶或者更复杂的，那我们可以分为这种算法是不可取的，需要优化。</p><h2 id="函数调用的时间复杂度分析"><a href="#函数调用的时间复杂度分析" class="headerlink" title="函数调用的时间复杂度分析"></a>函数调用的时间复杂度分析</h2><p>之前，我们分析的都是单个函数内，算法代码的时间复杂度，接下来我们分析函数调用过程中时间复杂度。</p><p><strong>案例一：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        show(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main方法中，有一个for循环，循环体调用了show方法，由于show方法内部只执行了一行代码，所以show方法的时间复杂度为O(1),那main方法的时间复杂度就是O(n)</p><p><strong>案例二：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        show(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main方法中，有一个for循环，循环体调用了show方法，由于show方法内部也有一个for循环，所以show方法的时间复杂度为O(n),那main方法的时间复杂度为O(n^2)</p><p><strong>案例三：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">    show(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        show(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200808202827.png" alt="image-20200808201745234"></p><h2 id="最坏情况"><a href="#最坏情况" class="headerlink" title="最坏情况"></a>最坏情况</h2><p>从心理学角度讲，每个人对发生的事情都会有一个预期，比如看到半杯水，有人会说：哇哦，还有半杯水哦！但也有人会说：天哪，只有半杯水了。一般人处于一种对未来失败的担忧，而在预期的时候趋向做最坏的打算，这样即使最糟糕的结果出现，当事人也有了心理准备，比较容易接受结果。假如最糟糕的结果并没有出现，当事人会很快乐。</p><p>算法分析也是类似，假如有一个需求：</p><p>有一个存储了n个随机数字的数组，请从中查找出指定的数字。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == arr[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最好情况：</strong></p><p>查找的第一个数字就是期望的数字，那么算法的时间复杂度为O(1)</p><p><strong>最坏情况：</strong></p><p>查找的最后一个数字，才是期望的数字，那么算法的时间复杂度为O(n)</p><p><strong>平均情况：</strong></p><p>任何数字查找的平均成本是O(n/2)</p><p>最坏情况是一种保证，在应用中，这是一种最基本的保障，即使在最坏情况下，也能够正常提供服务，所以，除非特别指定，我们提到的运行时间都指的是最坏情况下的运行时间。</p><h1 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a>空间复杂度分析</h1><p>计算机的软硬件都经历了一个比较漫长的演变史，作为为运算提供环境的内存，更是如此，从早些时候的512k,经历了1M，2M，4M…等，发展到现在的8G，甚至16G和32G，所以早期，算法在运行过程中对内存的占用情况也是一个经常需要考虑的问题。我么可以用算法的空间复杂度来描述算法对内存的占用。</p><h2 id="java中常见内存占用"><a href="#java中常见内存占用" class="headerlink" title="java中常见内存占用"></a>java中常见内存占用</h2><h3 id="基本数据类型内存占用情况："><a href="#基本数据类型内存占用情况：" class="headerlink" title="基本数据类型内存占用情况："></a>基本数据类型内存占用情况：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200808202828.png" alt="image-20200808202138602"></p><h3 id="计算机访问内存的方式都是一次一个字节"><a href="#计算机访问内存的方式都是一次一个字节" class="headerlink" title="计算机访问内存的方式都是一次一个字节"></a>计算机访问内存的方式都是一次一个字节</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200808202829.png" alt="image-20200808202308479"></p><h3 id="一个引用（机器地址）需要8个字节表示："><a href="#一个引用（机器地址）需要8个字节表示：" class="headerlink" title="一个引用（机器地址）需要8个字节表示："></a>一个引用（机器地址）需要8个字节表示：</h3><p>例如： Date date = new Date(),则date这个变量需要占用8个字节来表示</p><p>创建一个对象，比如new Date()，除了Date对象内部存储的数据(例如年月日等信息)占用的内存，该对象本身也有内存开销，每个对象的自身开销是16个字节，用来保存对象的头信息。</p><p>一般内存的使用，如果不够8个字节，都会被自动填充为8字节：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200808202830.png" alt="image-20200808202412971"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200808202831.png" alt="image-20200808202424408"></p><p>java中数组被被限定为对象，他们一般都会因为记录长度而需要额外的内存，一个原始数据类型的数组一般需要24字节的头信息(16个自己的对象开销，4字节用于保存长度以及4个填充字节)再加上保存值所需的内存。</p><blockquote><p>算法的空间复杂度计算公式记作：S(n)=O(f(n)),其中n为输入规模，f(n)为语句关于n所占存储空间的函数。</p></blockquote><p><strong>案例：</strong></p><p>对指定的数组元素进行反转，并返回反转的内容。</p><p>解法一：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse1(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;<span class="comment">//申请4个字节 </span></span><br><span class="line">    <span class="keyword">int</span> temp;<span class="comment">//申请4个字节 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>, end = n - <span class="number">1</span>; start &lt;= end; start++, end--) &#123;</span><br><span class="line">        temp = arr[start];</span><br><span class="line">        arr[start] = arr[end];</span><br><span class="line">        arr[end] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] reverse2(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;<span class="comment">//申请4个字节 </span></span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//申请n*4个字节+数组自身头信息开销24个字节 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        temp[n - <span class="number">1</span> - i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>忽略判断条件占用的内存，我们得出的内存占用情况如下：</p><p>算法一：</p><p>不管传入的数组大小为多少，始终额外申请4+4=8个字节；</p><p>算法二：</p><p>4+4n+24=4n+28;</p><p>根据大O推导法则，算法一的空间复杂度为O(1),算法二的空间复杂度为O(n),所以从空间占用的角度讲，算法一要优于算法二。</p><p>由于java中有内存垃圾回收机制，并且jvm对程序的内存占用也有优化（例如即时编译），我们无法精确的评估一个java程序的内存占用情况，但是了解了java的基本内存占用，使我们可以对java程序的内存占用情况进行估算。</p><p>由于现在的计算机设备内存一般都比较大，基本上个人计算机都是4G起步，大的可以达到32G，所以内存占用一般情况下并不是我们算法的瓶颈，普通情况下直接说复杂度，默认为算法的时间复杂度。但是，如果你做的程序是嵌入式开发，尤其是一些传感器设备上的内置程序，由于这些设备的内存很小，一般为几kb，这个时候对算法的空间复杂度就有要求了，但是一般做java开发的，基本上都是服务器开发，一般不存在这样的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BootStrap的学习与使用</title>
      <link href="/2020/08/06/BootStrap/"/>
      <url>/2020/08/06/BootStrap/</url>
      
        <content type="html"><![CDATA[<h1 id="BootStrap"><a href="#BootStrap" class="headerlink" title="BootStrap"></a>BootStrap</h1><h2 id="1-概述："><a href="#1-概述：" class="headerlink" title="1.概述："></a>1.概述：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 一个前端开发的框架，Bootstrap，来自Twitter，是目前很受欢迎的前端框架。Bootstrap是基于html，css，JavaScript的，它简洁灵活，使得web开发更加快捷。</span><br><span class="line">    * 框架：一个半成品，开发人员可以在框架基础上，再进行开发，简化编码。</span><br><span class="line">    * 好处：</span><br><span class="line">        1.定义了很多css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</span><br><span class="line">        2.响应式布局：</span><br><span class="line">            * 同一套页面可以兼容不同分辨率的设备。</span><br></pre></td></tr></table></figure><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h2><blockquote><p>1.下载Bootstrap</p><p>2.在项目中将这三个文件夹复制</p><p>3.创建html页面，引入必要的资源文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;HelloWorld&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary <span class="keyword">for</span> Bootstrap<span class="string">&#x27;s JavaScript plugins) --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1&gt;你好，世界！&lt;/h1&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-响应式布局："><a href="#3-响应式布局：" class="headerlink" title="3. 响应式布局："></a>3. 响应式布局：</h2><h3 id="1-栅格系统入门："><a href="#1-栅格系统入门：" class="headerlink" title="1. 栅格系统入门："></a>1. 栅格系统入门：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">* 同一套页面可以兼容不同分辨率的设备；</span><br><span class="line">* 实现：依赖于栅格系统：将一行平均分成<span class="number">12</span>个格子，可以指定元素占几个格子</span><br><span class="line">* 步骤：</span><br><span class="line">    <span class="number">1.</span>定义容器：相当于之前的table</span><br><span class="line">        * 容器分类：</span><br><span class="line">            <span class="number">1.</span>container：两边留白</span><br><span class="line">            <span class="number">2.</span>container-fluid：占满屏幕，宽度<span class="number">100</span>%</span><br><span class="line">    <span class="number">2.</span>定义行：相当于之前的tr        样式row</span><br><span class="line">    <span class="number">3.</span>定义元素。指定该元素在不同的设备上，所占的格子数目。    样式：col-设备代号-格子数目</span><br><span class="line">        * 设备代号：</span><br><span class="line">            <span class="number">1.</span>xs：超小屏幕，手机(<span class="xml"><span class="tag">&lt;<span class="name">768px):clo-xs-12</span></span></span></span><br><span class="line"><span class="xml">            2.sm：小屏幕，平板(≥768px)</span></span><br><span class="line"><span class="xml">            3.md：中等屏幕，桌面显示器(≥992px)</span></span><br><span class="line"><span class="xml">            4.lg：大屏幕 大桌面显示器(≥1200px)</span></span><br><span class="line"><span class="xml">-----------------------------------------------------------</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;栅格系统-入门&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary for Bootstrap&#x27;s JavaScript plugins) --&gt;</span><br><span class="line">    &lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span><br><span class="line">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .inner&#123;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    1.定义容器：--&gt;</span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">&lt;!--    2.定义行--&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;!--        3.定义元素--&gt;</span><br><span class="line">&lt;!--            在大显示器一行12个格子--&gt;</span><br><span class="line">&lt;!--            在pad上一行6个格子--&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1  col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;col-lg-1 col-sm-2 inner&quot; &gt;栅格&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-栅格系统注意事项："><a href="#2-栅格系统注意事项：" class="headerlink" title="2. 栅格系统注意事项："></a>2. 栅格系统注意事项：</h3><blockquote><p>1.一行中如果格子数目超过12，则超出部分自动换行；</p><p>2.栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备；</p><p>3.如果真是设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</p></blockquote><h2 id="4-CSS样式和JS插件："><a href="#4-CSS样式和JS插件：" class="headerlink" title="4. CSS样式和JS插件："></a>4. CSS样式和JS插件：</h2><h3 id="1-全局CSS样式："><a href="#1-全局CSS样式：" class="headerlink" title="1. 全局CSS样式："></a>1. 全局CSS样式：</h3><ul><li><p>按钮：class=”btn btn-default”</p></li><li><p>图片：</p><ul><li><pre><code class="html">class=&quot;img-responsive&quot;：图片在任意尺寸都占100%&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 图片形状：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#96;&amp;#96;&amp;#96;html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;img src&amp;#x3D;&amp;quot;...&amp;quot; alt&amp;#x3D;&amp;quot;...&amp;quot; class&amp;#x3D;&amp;quot;img-rounded&amp;quot;&amp;gt;：方形&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;img src&amp;#x3D;&amp;quot;...&amp;quot; alt&amp;#x3D;&amp;quot;...&amp;quot; class&amp;#x3D;&amp;quot;img-circle&amp;quot;&amp;gt;：圆形&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;img src&amp;#x3D;&amp;quot;...&amp;quot; alt&amp;#x3D;&amp;quot;...&amp;quot; class&amp;#x3D;&amp;quot;img-thumbnail&amp;quot;&amp;gt;：相框&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul></li></ul><ul><li><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;HelloWorld&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary <span class="keyword">for</span> Bootstrap<span class="string">&#x27;s JavaScript plugins) --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;a class=&quot;btn btn-default&quot; href=&quot;#&quot; role=&quot;button&quot;&gt;Link&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;button class=&quot;btn btn-default&quot; type=&quot;submit&quot;&gt;Button&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;input class=&quot;btn btn-default&quot; type=&quot;button&quot; value=&quot;Input&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;input class=&quot;btn btn-default&quot; type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Standard button --&gt;</span></span><br><span class="line"><span class="string">&lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;&gt;（默认样式）Default&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Provides extra visual weight and identifies the primary action in a set of buttons --&gt;</span></span><br><span class="line"><span class="string">&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;（首选项）Primary&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Indicates a successful or positive action --&gt;</span></span><br><span class="line"><span class="string">&lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot;&gt;（成功）Success&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Contextual button for informational alert messages --&gt;</span></span><br><span class="line"><span class="string">&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;&gt;（一般信息）Info&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Indicates caution should be taken with this action --&gt;</span></span><br><span class="line"><span class="string">&lt;button type=&quot;button&quot; class=&quot;btn btn-warning&quot;&gt;（警告）Warning&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Indicates a dangerous or potentially negative action --&gt;</span></span><br><span class="line"><span class="string">&lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot;&gt;（危险）Danger&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- Deemphasize a button by making it look like a link while maintaining button behavior --&gt;</span></span><br><span class="line"><span class="string">&lt;button type=&quot;button&quot; class=&quot;btn btn-link&quot;&gt;（链接）Link&lt;/button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;hr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;img src=&quot;img/banner_1.jpg&quot; class=&quot;img-responsive &quot;&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;img/banner_1.jpg&quot; class=&quot;img-responsive img-rounded&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;img/banner_1.jpg&quot; class=&quot;img-responsive img-circle&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;img/banner_1.jpg&quot; class=&quot;img-responsive img-thumbnail&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>表格：</p><ul><li>table：单纯的表格</li><li>table-bordered：带边框的表格</li><li>table-hover：鼠标悬停</li></ul></li><li><p>表单：</p><ul><li>给表单项添加：class=”form-control”</li></ul></li><li><p>示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;HelloWorld&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary <span class="keyword">for</span> Bootstrap<span class="string">&#x27;s JavaScript plugins) --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;table class=&quot;table table-bordered&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;tr&gt;</span></span><br><span class="line"><span class="string">    &lt;th&gt;编号&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;th&gt;姓名&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;th&gt;性别&lt;/th&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;tr&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;1&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;张三&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;男&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;tr&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;2&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;李四&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;男&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;tr&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;3&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;王五&lt;/td&gt;</span></span><br><span class="line"><span class="string">    &lt;td&gt;男&lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;hr&gt;&lt;hr&gt;&lt;hr&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;form class=&quot;form-horizontal&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&quot;inputEmail3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Email&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;col-sm-10&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;email&quot; class=&quot;form-control&quot; id=&quot;inputEmail3&quot; placeholder=&quot;Email&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;label for=&quot;inputPassword3&quot; class=&quot;col-sm-2 control-label&quot;&gt;Password&lt;/label&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;col-sm-10&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;inputPassword3&quot; placeholder=&quot;Password&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;checkbox&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;checkbox&quot;&gt; Remember me</span></span><br><span class="line"><span class="string">                &lt;/label&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;form-group&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;col-sm-offset-2 col-sm-10&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Sign in&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-组件："><a href="#2-组件：" class="headerlink" title="2. 组件："></a>2. 组件：</h3><ul><li>导航条</li><li>分页条<ul><li>具体代码看文档</li></ul></li></ul><hr><h3 id="3-插件："><a href="#3-插件：" class="headerlink" title="3. 插件："></a>3. 插件：</h3><ul><li><p>轮播图</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;HelloWorld&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary <span class="keyword">for</span> Bootstrap<span class="string">&#x27;s JavaScript plugins) --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- Indicators --&gt;</span></span><br><span class="line"><span class="string">    &lt;ol class=&quot;carousel-indicators&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ol&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;item active&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;img src=&quot;img/banner_1.jpg&quot; alt=&quot;...&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;item&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;img src=&quot;img/banner_2.jpg&quot; alt=&quot;...&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;item&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;img src=&quot;img/banner_3.jpg&quot; alt=&quot;...&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- Controls --&gt;</span></span><br><span class="line"><span class="string">    &lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;span class=&quot;sr-only&quot;&gt;Next&lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="示例访问Bootstrap中文网"><a href="#示例访问Bootstrap中文网" class="headerlink" title="示例访问Bootstrap中文网"></a>示例访问Bootstrap中文网</h1><p><a href="https://v3.bootcss.com/">https://v3.bootcss.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> BootStrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BootStrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML学习与使用</title>
      <link href="/2020/08/06/XML/"/>
      <url>/2020/08/06/XML/</url>
      
        <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><h2 id="1-概念和功能"><a href="#1-概念和功能" class="headerlink" title="1. 概念和功能"></a>1. 概念和功能</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.概念：Extensible Markup Language 可扩展标记语言</span><br><span class="line">    * 可扩展：标签都是自定义的。</span><br><span class="line">    </span><br><span class="line">2.功能：</span><br><span class="line">    * 存储数据</span><br><span class="line">        1.配置文件</span><br><span class="line">        2.在网络中传输</span><br></pre></td></tr></table></figure><h2 id="2-xml与html的区别："><a href="#2-xml与html的区别：" class="headerlink" title="2. xml与html的区别："></a>2. xml与html的区别：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.xml标签都是自定义的，html标签是预定义；</span><br><span class="line">2.xml的语法严格，html语法松散；</span><br><span class="line">3.xml是村粗数据的，html是展示数据。</span><br></pre></td></tr></table></figure><h2 id="3-语法："><a href="#3-语法：" class="headerlink" title="3. 语法："></a>3. 语法：</h2><h3 id="1-基本语法："><a href="#1-基本语法：" class="headerlink" title="1. 基本语法："></a>1. 基本语法：</h3><blockquote><p>1.xml文档的后缀名：.xml</p><p>2.xml第一行必须定义为文档声明</p><p>3.xml文档中有且仅有一个根标签</p><p>4.属性值必须使用引号(单双都可)引起来</p><p>5.标签必须正确关闭</p><p>6.xml标签名称区分大小写</p></blockquote><h3 id="2-快速入门："><a href="#2-快速入门：" class="headerlink" title="2.快速入门："></a>2.快速入门：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>wangwu<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-组成部分："><a href="#3-组成部分：" class="headerlink" title="3. 组成部分："></a>3. 组成部分：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.文档声明：</span><br><span class="line">    1.格式：<span class="meta">&lt;?xml 属性列表 ?&gt;</span></span><br><span class="line">    2.属性列表：</span><br><span class="line">        * version：版本号，必须的属性</span><br><span class="line">        * encoding：编码方式，告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</span><br><span class="line">        * standalone：是否独立</span><br><span class="line">            * 取值：</span><br><span class="line">                * yes：不依赖其他文件</span><br><span class="line">                * no：依赖其他文件</span><br><span class="line">2.指令(了解)：结合css的</span><br><span class="line">    * <span class="meta">&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</span></span><br><span class="line">3.标签：标签名称自定义的</span><br><span class="line">    * 规则：</span><br><span class="line">        * 可以包含字母、数字以及其他的字符</span><br><span class="line">        * 名称不能以数字或者标点符号开始</span><br><span class="line">        * 名称不能以字母 xml(或者 XML、Xml等等)开始</span><br><span class="line">        * 名称不能包含空格</span><br><span class="line">4.属性：</span><br><span class="line">    id属性值唯一</span><br><span class="line">5.文本：</span><br><span class="line">    * CDATA区：在该区域中的数据会被原样展示</span><br><span class="line">        * 格式：<span class="tag">&lt;<span class="name">![CDATA</span> [数据]]&gt;</span></span><br><span class="line">        </span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>19<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>wangwu<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">        if a &gt; b &#123;a&gt;c&#125;</span><br><span class="line">        ]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-约束："><a href="#4-约束：" class="headerlink" title="4. 约束："></a>4. 约束：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 约束：规定xml文档的书写规则</span><br><span class="line">    * 作为框架的使用者(程序员)</span><br><span class="line">        1.能够在xml中引入约束文档</span><br><span class="line">        2.能够简单的读懂约束文档</span><br><span class="line">* 分类：</span><br><span class="line">    1.DTD:一种简单的约束技术</span><br><span class="line">    2.Schema：一种复杂的约束技术</span><br></pre></td></tr></table></figure><h3 id="DTD："><a href="#DTD：" class="headerlink" title="DTD："></a>DTD：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 引入dtd文档到xml文档中</span><br><span class="line">    * 内部dtd：将约束规则定义在xml文档中(一般不用内部dtd，不便于多次调用)</span><br><span class="line">        * &lt;!--内部dtd--&gt;</span><br><span class="line">            &lt;!DOCTYPE students [</span><br><span class="line">            &lt;!ELEMENT students (student*) &gt;</span><br><span class="line">            &lt;!ELEMENT student (name,age,sex)&gt;</span><br><span class="line">            &lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">            &lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">            &lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class="line">            &lt;!ATTLIST student number ID #REQUIRED&gt;</span><br><span class="line">            ]&gt;</span><br><span class="line">    * 外部dtd：将约束的规则定义在外部的dtd文件中</span><br><span class="line">        * 本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</span><br><span class="line">        * 网络：&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><ul><li><p>dtd文档：student.dtd</p></li><li><pre><code class="xml">&lt;!ELEMENT students (student*) &gt;&lt;!ELEMENT student (name,age,sex)&gt;&lt;!ELEMENT name (#PCDATA)&gt;&lt;!ELEMENT age (#PCDATA)&gt;&lt;!ELEMENT sex (#PCDATA)&gt;&lt;!ATTLIST student number ID #REQUIRED&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 将dtd文档引入xml文档，并给值配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &amp;#96;&amp;#96;&amp;#96;xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;?xml version&amp;#x3D;&amp;quot;1.0&amp;quot; encoding&amp;#x3D;&amp;quot;UTF-8&amp;quot; ?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;!DOCTYPE students SYSTEM &amp;quot;student.dtd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;students&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;student number&amp;#x3D;&amp;quot;s001&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;name&amp;gt;张三&amp;lt;&amp;#x2F;name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;age&amp;gt;20&amp;lt;&amp;#x2F;age&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;sex&amp;gt;男&amp;lt;&amp;#x2F;sex&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&amp;#x2F;student&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;student number&amp;#x3D;&amp;quot;s002&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;name&amp;gt;王五&amp;lt;&amp;#x2F;name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;age&amp;gt;21&amp;lt;&amp;#x2F;age&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;lt;sex&amp;gt;男&amp;lt;&amp;#x2F;sex&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&amp;#x2F;student&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;students&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul></li></ul><h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema:"></a>Schema:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 引入：</span><br><span class="line">    1.填写xml文档的根元素</span><br><span class="line">    2.引入xsi前缀.  xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    3.引入xsd文件命名空间.  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;xml  student.xsd&quot;</span><br><span class="line">    4.为每一个xsd约束声明一个前缀,作为标识  xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;xml&quot; </span><br><span class="line"></span><br><span class="line">            &lt;students   xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">                xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;xml&quot;</span><br><span class="line">                xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;xml  student.xsd&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="5-解析："><a href="#5-解析：" class="headerlink" title="5. 解析："></a>5. 解析：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解析：操作xml文档，将文档中的数据读取到内存中</span><br><span class="line"></span><br><span class="line">* 操作xml文档：</span><br><span class="line">    1.解析(读取)：将文档中的数据读取到内存中；</span><br><span class="line">    2.写入：将内存中的数据保存到xml文档中。持久化的存储</span><br></pre></td></tr></table></figure><h3 id="1-解析xml的方式："><a href="#1-解析xml的方式：" class="headerlink" title="1. 解析xml的方式："></a>1. 解析xml的方式：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树</span><br><span class="line">    * 优点：操作方便，可以对文档进行CRUD的所有操作；</span><br><span class="line">    * 缺点：占内存</span><br><span class="line">    </span><br><span class="line">2.SAX：逐行读取，逐行释放，基于事件驱动的</span><br><span class="line">    * 优点：不占内存</span><br><span class="line">    * 缺点：只能读取，不能增删改</span><br></pre></td></tr></table></figure><h3 id="2-xml常见的解析器："><a href="#2-xml常见的解析器：" class="headerlink" title="2. xml常见的解析器："></a>2. xml常见的解析器：</h3><blockquote><p>1.JAXP：sun公司提供的解析器，支持dom和sax两种思想；</p><p>2.DOM4J：一款非常优秀的解析器；</p><p>3.Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><p>4.PULL:Android操作系统内置的解析器，sax方式的。</p></blockquote><h2 id="6-Jsoup"><a href="#6-Jsoup" class="headerlink" title="6. Jsoup"></a>6. Jsoup</h2><h3 id="1-Jsoup快速入门："><a href="#1-Jsoup快速入门：" class="headerlink" title="1. Jsoup快速入门："></a>1. Jsoup快速入门：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.导包</span></span><br><span class="line">        <span class="comment">//2.获取Document对象，根据xml文档获取</span></span><br><span class="line">        <span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo01.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Jsoup对象："><a href="#2-Jsoup对象：" class="headerlink" title="2. Jsoup对象："></a>2. Jsoup对象：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* Jsoup：工具类，可以解析html或xml文档，返回Document</span><br><span class="line">    * parse:解析html或xml文档，返回Document</span><br><span class="line">        * parse(File in,String CharsetName):解析xml或html文件的；</span><br><span class="line">        * parse(String html):解析xml或html字符串    其实就是html或xml的内容，直接复制进来</span><br><span class="line">        * parse(URL url,<span class="keyword">int</span> timeoutMillis):通过网络路径获取指定的html或xml的文档对象。</span><br><span class="line">        </span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> cn.itcast.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/21 - 17:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String path = JsoupDemo02.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//* parse(File in,String CharsetName):解析xml或html文件的；</span></span><br><span class="line">        Document document1 = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(document1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//* parse(String html):解析xml或html字符串     其实就是html或xml的内容，直接复制进来</span></span><br><span class="line">        Document document2 = Jsoup.parse(<span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot; ?&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; &lt;students&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \t&lt;student number=\&quot;heima_0001\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \t\t&lt;name&gt;tom&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \t\t&lt;age&gt;18&lt;/age&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \t\t&lt;sex&gt;male&lt;/sex&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \t&lt;/student&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\t&lt;student number=\&quot;heima_0002\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\t\t&lt;name&gt;jack&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\t\t&lt;age&gt;18&lt;/age&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\t\t&lt;sex&gt;female&lt;/sex&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\t&lt;/student&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\t\t \n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; &lt;/students&gt;&quot;</span>);</span><br><span class="line">        System.out.println(document2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//* parse(URL url,int timeoutMillis):通过网络路径获取指定的html或xml的文档对象。</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://baike.baidu.com/item/java/85979&quot;</span>);<span class="comment">//代表网络中的资源地址</span></span><br><span class="line">        Document parse = Jsoup.parse(url, <span class="number">10000</span>);<span class="comment">//后面为超时时间</span></span><br><span class="line">        System.out.println(parse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Document：文档对象。代表内存中的dom树"><a href="#3-Document：文档对象。代表内存中的dom树" class="headerlink" title="3. Document：文档对象。代表内存中的dom树"></a>3. Document：文档对象。代表内存中的dom树</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 获取Element对象。</span><br><span class="line">    * getElementById(String id):根据id属性值获取唯一的element对象</span><br><span class="line">    * getElementsByTag(String tagName):根据标签名称获取元素对象集合</span><br><span class="line">    * getElementsByAttribute(String key):根据属性名称获取元素对象集合</span><br><span class="line">    * getElementsByAttributeValue(String key,String value):根据对应的属性名和属性值获取元素对象集合</span><br><span class="line">    </span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> cn.itcast.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/21 - 18:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo03.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取元素对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.1 获取所有student对象</span></span><br><span class="line">        <span class="comment">//* getElementsByTag(String tagName):根据标签名称获取元素对象集合</span></span><br><span class="line">        Elements student = document.getElementsByTag(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.2 获取属性名为id的元素对象们</span></span><br><span class="line">        <span class="comment">//* getElementsByAttribute(String key):根据属性名称获取元素对象集合</span></span><br><span class="line">        Elements id = document.getElementsByAttribute(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        System.out.println(id);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.3 获取number属性值为heima_0001的元素对象</span></span><br><span class="line">        Elements elements = document.getElementsByAttributeValue(<span class="string">&quot;number&quot;</span>, <span class="string">&quot;heima_0001&quot;</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.4 获取id属性值的元素对象</span></span><br><span class="line">        Element itcast = document.getElementById(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        System.out.println(itcast);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Elements"><a href="#4-Elements" class="headerlink" title="4. Elements:"></a>4. Elements:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元素Element对象的集合。可以当做ArrayList&lt;Element&gt;来使用</span><br></pre></td></tr></table></figure><h3 id="5-Element："><a href="#5-Element：" class="headerlink" title="5. Element："></a>5. Element：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 元素对象</span><br><span class="line"><span class="number">1.</span>获取子元素对象</span><br><span class="line">    * getElementById(String id):根据id属性值获取唯一的element对象</span><br><span class="line">    * getElementsByTag(String tagName):根据标签名称获取元素对象集合</span><br><span class="line">    * getElementsByAttribute(String key):根据属性名称获取元素对象集合</span><br><span class="line">    * getElementsByAttributeValue(String key,String value):根据对应的属性名和属性值获取元素对象集合</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>获取属性值：</span><br><span class="line">    * <span class="function">String <span class="title">attr</span><span class="params">(String key)</span>:根据属性名称获取属性值</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">3.获取文本内容：</span></span><br><span class="line"><span class="function">    * String <span class="title">text</span><span class="params">()</span>:获取文本内容<span class="params">(纯文本)</span></span></span><br><span class="line"><span class="function">    * String <span class="title">html</span><span class="params">()</span>:获取标签体的所以内容<span class="params">(包括子标签的字符串内容)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">-----------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">package</span> cn.itcast.xml.jsoup</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/21 - 19:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取Student.xml的path</span></span><br><span class="line">        String path = JsoupDemo03.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Document对象获取name标签，获取所有name标签，可获取到两个</span></span><br><span class="line">        Elements elements_name = document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(elements_name.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Element对象获取子标签对象</span></span><br><span class="line">        Element element_student = document.getElementsByTag(<span class="string">&quot;student&quot;</span>).get(<span class="number">0</span>);</span><br><span class="line">        Elements ele_name = element_student.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(ele_name.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取student对象的属性值</span></span><br><span class="line"><span class="comment">//        String number = element_student.attr(&quot;number&quot;);</span></span><br><span class="line">        String number = element_student.attr(<span class="string">&quot;NUMBER&quot;</span>);<span class="comment">//不区分大小写</span></span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文本内容</span></span><br><span class="line">        String text = ele_name.text();</span><br><span class="line">        System.out.println(text);</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        String html = ele_name.html();</span><br><span class="line">        System.out.println(html);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Node-节点对象"><a href="#6-Node-节点对象" class="headerlink" title="6. Node:节点对象"></a>6. Node:节点对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 是Document和Element的父类</span><br></pre></td></tr></table></figure><h2 id="7-Jsoup-选择器查询"><a href="#7-Jsoup-选择器查询" class="headerlink" title="7. Jsoup-选择器查询"></a>7. Jsoup-选择器查询</h2><h3 id="1-selector-选择器"><a href="#1-selector-选择器" class="headerlink" title="1. selector:选择器"></a>1. selector:选择器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 使用方法：<span class="function">Elements        <span class="title">select</span><span class="params">(String cssQuery)</span></span></span><br><span class="line"><span class="function">    * 语法：参考selector类中定义的语法</span></span><br><span class="line"><span class="function">----------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">package</span> cn.itcast.xml.jsoup</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/21 - 19:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo05.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.查询name标签</span></span><br><span class="line">        Elements ele_name = document.select(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(ele_name);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.查询id为itcast的元素</span></span><br><span class="line">        Elements ele_itcast = document.select(<span class="string">&quot;#itcast&quot;</span>);</span><br><span class="line">        System.out.println(ele_itcast);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.获取student标签并且number属性值为heima_0001的age子标签</span></span><br><span class="line">        <span class="comment">// 5.1 获取student标签并且number属性值为heima_0001</span></span><br><span class="line">        Elements ele_num = document.select(<span class="string">&quot;student[number=&#x27;heima_0001&#x27;]&quot;</span>);</span><br><span class="line">        System.out.println(ele_num);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================&quot;</span>);</span><br><span class="line">        <span class="comment">//5.2 获取student标签并且number属性值为heima_0001的age子标签</span></span><br><span class="line">        Elements ele_age = document.select(<span class="string">&quot;student[number=&#x27;heima_0001&#x27;] &gt; age&quot;</span>);</span><br><span class="line">        System.out.println(ele_age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-XPath："><a href="#2-XPath：" class="headerlink" title="2. XPath："></a>2. XPath：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* XPath即为XML路径语言，它是一种用来确定XML(标准通用标记语言的子类)文档中某部分位置的语言</span><br><span class="line">    * 使用Jsoup的XPath需要额外导入jar包</span><br><span class="line">    * 查询w3cshool参考手册，使用xpath语法完成查询</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> cn.itcast.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.exception.XpathSyntaxErrorException;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXDocument;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXNode;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/4/21 - 20:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> XpathSyntaxErrorException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取student.xml的path</span></span><br><span class="line">        String path = JsoupDemo06.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.结合xpath语法查询</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.1 查询所有student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">&quot;//student&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.2 查询所有student标签下的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes1 = jxDocument.selN(<span class="string">&quot;//student/name&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes1) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3 查询student标签下带有id属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">&quot;//student/name[@id]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.4 查询student标签下，带有id属性的name标签，并且id属性值为itcast</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">&quot;//student/name[@id=&#x27;itcast&#x27;]&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简学Vue</title>
      <link href="/2020/08/06/vue/"/>
      <url>/2020/08/06/vue/</url>
      
        <content type="html"><![CDATA[<p>本视频教程来自B站@遇见狂神说，有需要的朋友可以去搜索观看他的视频学习。</p><h2 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h2><p>vue官方：<a href="https://cn.vuejs.org/v2/guide/">https://cn.vuejs.org/v2/guide/</a></p><p>1.安装vue插件</p><p>2.导入 vue.js</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写view视图层</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- View 层 ，模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>完整代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- View 层 ，模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 1.导入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Model : 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message:<span class="string">&quot;hello,Vue!&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="判断：v-if-v-else-v-else-if"><a href="#判断：v-if-v-else-v-else-if" class="headerlink" title="判断：v-if,v-else,v-else-if"></a>判断：v-if,v-else,v-else-if</h2><ul><li><pre><code class="vue">v-if    v-if-else    v-else&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 示例：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#96;&amp;#96;&amp;#96;vue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;html lang&amp;#x3D;&amp;quot;en&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;meta charset&amp;#x3D;&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;title&amp;gt;Title&amp;lt;&amp;#x2F;title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div id&amp;#x3D;&amp;quot;app&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;h1 v-if&amp;#x3D;&amp;quot;type&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#39;A&amp;#39;&amp;quot;&amp;gt;A&amp;lt;&amp;#x2F;h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;h1 v-else-if&amp;#x3D;&amp;quot;type&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#39;B&amp;#39;&amp;quot;&amp;gt;B&amp;lt;&amp;#x2F;h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;h1 v-else-if&amp;#x3D;&amp;quot;type&amp;#x3D;&amp;#x3D;&amp;#x3D;&amp;#39;D&amp;#39;&amp;quot;&amp;gt;D&amp;lt;&amp;#x2F;h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;h1 v-else&amp;gt;C&amp;lt;&amp;#x2F;h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;script src&amp;#x3D;&amp;quot;https:&amp;#x2F;&amp;#x2F;cdn.jsdelivr.net&amp;#x2F;npm&amp;#x2F;vue&amp;#x2F;dist&amp;#x2F;vue.js&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var vm &amp;#x3D; new Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          el:&amp;quot;#app&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          data:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              type:&amp;#39;A&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul><h2 id="循环：遍历-v-for"><a href="#循环：遍历-v-for" class="headerlink" title="循环：遍历 v-for"></a>循环：遍历 v-for</h2><p><code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;li v-for&#x3D;&quot;(item,index) in items&quot;&gt;</span><br><span class="line">        &#123;&#123;item.message&#125;&#125;---&#123;&#123;index&#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            items:[</span><br><span class="line">                &#123;message:&#39;silentcow说Java&#39;&#125;,</span><br><span class="line">                &#123;message: &#39;silentcow说前端&#39;&#125;,</span><br><span class="line">                &#123;message: &#39;silentcow说运维&#39;&#125;</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>结果<img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806222404.png" alt="image-20200622122827147"></li></ul><hr><h2 id="VUE绑定事件：v-on"><a href="#VUE绑定事件：v-on" class="headerlink" title="VUE绑定事件：v-on"></a>VUE绑定事件：v-on</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;sayHi&quot;&gt;click Me&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&quot;silentcow说Java&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;   &#x2F;&#x2F;方法必须定义在 Vue 的Methods对象中， v-on 事件</span><br><span class="line">            sayHi:function (event) &#123;</span><br><span class="line">                alert(this.message)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><p>官网文档：<a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95">https://cn.vuejs.org/v2/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95</a></p><p>用 <code>v-model</code> 指令在表单 <code>、</code> 及 `` 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><p><strong>什么是双向数据绑定: v-model</strong></p><p>Vue.js是一个MVVM框架，即数据双向绑定，即<strong>当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化</strong>。这也算是Vue.js的精髓之处了.</p><hr><h2 id="文本："><a href="#文本：" class="headerlink" title="文本："></a>文本：</h2><p>文本同步更新</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    输入的文本：&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;message&quot;&gt; &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&quot;123&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="多行文本："><a href="#多行文本：" class="headerlink" title="多行文本："></a>多行文本：</h2><p>在文本区域插值 (<code>&#123;&#123;text&#125;&#125;</code>) 并不会生效，应用 <code>v-model</code> 来代替。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;textarea v-model&#x3D;&quot;message&quot; placeholder&#x3D;&quot;add multiple lines&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message:&quot;123&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮:"></a>单选按钮:</h2><p><code>此处silent可随意书写</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    性别：</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; value&#x3D;&quot;男&quot; v-model&#x3D;&quot;silent&quot;&gt;男</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;se&quot; value&#x3D;&quot;女&quot; v-model&#x3D;&quot;silent&quot;&gt;女</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        选中了谁：&#123;&#123;silent&#125;&#125;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            silent:&#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806222405.png" alt="image-20200622153201445"></p><h2 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h2><p><code>disabled</code>为了适应IOS</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    下拉框：</span><br><span class="line">    &lt;select v-model&#x3D;&quot;selected&quot;&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;&quot; disabled&gt;---请选择---&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option&gt;A&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option&gt;B&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option&gt;C&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;span&gt;您选择的是:&#123;&#123;selected&#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            selected:&#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="复选框："><a href="#复选框：" class="headerlink" title="复选框："></a>复选框：</h2><p>单个复选框，绑定到布尔值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;checked&quot;&gt;</span><br><span class="line">    &lt;lable for&#x3D;&quot;checkbox&quot;&gt;&#123;&#123;checked&#125;&#125;&lt;&#x2F;lable&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            checked:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>多个复选框，绑定到同一个数组：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;san&quot; value&#x3D;&quot;张三&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;lable for&#x3D;&quot;san&quot;&gt;张三&lt;&#x2F;lable&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;si&quot; value&#x3D;&quot;李四&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;lable for&#x3D;&quot;si&quot;&gt;李四&lt;&#x2F;lable&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;wu&quot; value&#x3D;&quot;王五&quot; v-model&#x3D;&quot;checkedNames&quot;&gt;</span><br><span class="line">    &lt;lable for&#x3D;&quot;wu&quot;&gt;王五&lt;&#x2F;lable&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        结拜兄弟的是：&#123;&#123;checkedNames&#125;&#125;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            checkedNames:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806222406.png" alt="image-20200622155125117"></p><p><strong>注意</strong>：<code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值</p><hr><h1 id="组件："><a href="#组件：" class="headerlink" title="组件："></a>组件：</h1><h2 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h2><ul><li><code>Vue.component()</code>：注册组件</li><li><code>my-component-li</code>：自定义组件的名字</li><li><code>template</code>：组件的模板</li></ul><ul><li><code>v-for=&quot;item in items&quot;</code>：遍历<code>Vue</code>实例中定义的名为<code>items</code>的数组，并创建同等数量的组建；</li><li><code>v-bind:item=&quot;item&quot;</code>：将遍历的<code>item</code>项绑定到组建中<code>props</code>定义的名为<code>item</code>属性上； = 号左边的item为props定义的属性名，右边的为<code>item in items</code>中遍历的 item 项的值。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- View视图层 模板--&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;!--组件：传递给组件中的值：props--&gt;</span><br><span class="line">    &lt;silent v-for&#x3D;&quot;item in items&quot; v-bind:cow&#x3D;&quot;item&quot;&gt;&lt;&#x2F;silent&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;定义一个Vue组建</span><br><span class="line">    Vue.component(&quot;silent&quot;,&#123;</span><br><span class="line">        props:[&#39;cow&#39;],</span><br><span class="line">        template:&#39;&lt;li&gt;&#123;&#123;cow&#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            items:[&quot;java&quot;,&quot;linux&quot;,&quot;前端&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="Axios异步通信："><a href="#Axios异步通信：" class="headerlink" title="Axios异步通信："></a>Axios异步通信：</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>官方：<a href="https://www.kancloud.cn/yunye/axios/234845">https://www.kancloud.cn/yunye/axios/234845</a></p><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h2 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h2><ul><li>从浏览器中创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">XMLHttpRequests</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 <a href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">XSRF</a></li></ul><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcdn.net&#x2F;ajax&#x2F;libs&#x2F;axios&#x2F;0.19.2&#x2F;axios.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>实例：</strong></p><ul><li><p>先伪造数据 data.json</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;silentcow说Java&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.csdn.net/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;isNonProfit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>: <span class="string">&quot;龙高街道&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;陕西咸阳&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bilibili&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.bilibili.com/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;silentcow说Java&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.bilibili.com/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;百度&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用</p></li><li><pre><code class="vue">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;!-- v-clock:解决闪烁问题--&gt;    &lt;style&gt;        [v-clock]&#123;            display: none;        &#125;    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot; v-clock&gt;    &lt;div&gt;&#123;&#123;info.name&#125;&#125;&lt;/div&gt;    &lt;div&gt;&#123;&#123;info.address.street&#125;&#125;&lt;/div&gt;    &lt;a v-bind:href=&quot;info.url&quot;&gt;点我&lt;/a&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;!--导入axios--&gt;&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.19.2/axios.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    var vm = new Vue(&#123;        el:&quot;#app&quot;,        data()&#123;            return&#123;                //请求的返回值参数合适，必须和json字符串一样                info:&#123;                    name:null,                    address:&#123;                        street:null                    &#125;                    ,url:null                &#125;            &#125;        &#125;,        mounted()&#123;  //钩子函数，链式编程，ES6 新特性            axios.get(&#39;../data.json&#39;).then(response=&gt;(this.info=response.data));        &#125;    &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 计算属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;计算属性的重点突出在&amp;#96;属性&amp;#96;两个字上(属性是名词)，首先它是个&amp;#96;属性&amp;#96;其次这个属性有&amp;#96;计算&amp;#96;的能力(计算是动词)，这里的&amp;#96;计算&amp;#96;就是个函数;简单点说，它就是-个能够将计算结果缓存起来的属性(将行为转化成了静态的属性)，仅此而已;可以想象为**缓存!**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;vue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html lang&amp;#x3D;&amp;quot;en&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;meta charset&amp;#x3D;&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;Title&amp;lt;&amp;#x2F;title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id&amp;#x3D;&amp;quot;app&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt;currentTime1:&amp;#123;&amp;#123;currentTime1()&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;p&amp;gt;      &amp;lt;!--调用方法必须加括号--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;p&amp;gt;currentTime2:&amp;#123;&amp;#123;currentTime2&amp;#125;&amp;#125;&amp;lt;&amp;#x2F;p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src&amp;#x3D;&amp;quot;https:&amp;#x2F;&amp;#x2F;cdn.jsdelivr.net&amp;#x2F;npm&amp;#x2F;vue&amp;#x2F;dist&amp;#x2F;vue.js&amp;quot;&amp;gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var vm &amp;#x3D; new Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        el:&amp;quot;#app&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            message:&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        methods:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            currentTime1:function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return Date.now();  &amp;#x2F;&amp;#x2F;返回一个时间戳&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        computed:&amp;#123;  &amp;#x2F;&amp;#x2F;计算属性，methods,computed 方法名不能重名，重名之后，只会调用methods的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            currentTime2:function () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                this.message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return Date.now();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;#x2F;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul></li></ul><p><strong>注意: methods和computed里的东西不能重名</strong><br><strong>说明:.</strong><br>● methods: 定义方法，调用方法使用currentTime1(). 需要带括号<br>● computed:  定义计算属性，调用属性使用currentTime2, 不需要带括号: this.message是为了能够让currentTime2观察到数据变化而变化<br>● 如何在方法中的值发生了变化，则缓存就会刷新!可以在控制台使用vm. message-“qinjiang” ,改变下数据的值，再次测试观察效果!</p><p><strong>结论:</strong></p><p>调用方法时，每次都需要进行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢?此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点，<strong>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销</strong>;</p><hr><h1 id="内容分发-插槽"><a href="#内容分发-插槽" class="headerlink" title="内容分发-插槽"></a>内容分发-插槽</h1><p>在<code>Vue.js</code>中我们使用<code>&lt;slot&gt;</code>元素作为承载分发内容的出口，作者称之为 插槽，可以应用在组合组件的场景中。</p><p>官方：<a href="https://cn.vuejs.org/v2/guide/components-slots.html">https://cn.vuejs.org/v2/guide/components-slots.html</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;to-do&gt;</span><br><span class="line">        &lt;todo-title slot&#x3D;&quot;todo-title&quot; :title&#x3D;&quot;title&quot;&gt;&lt;&#x2F;todo-title&gt;</span><br><span class="line">        &lt;todo-items slot&#x3D;&quot;todo-items&quot; v-for&#x3D;&quot;item in todoItems&quot; :item&#x3D;&quot;item&quot;&gt;&lt;&#x2F;todo-items&gt;</span><br><span class="line">    &lt;&#x2F;to-do&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; slot：插槽</span><br><span class="line">    Vue.component(&quot;to-do&quot;,&#123;</span><br><span class="line">        template: &#39;&lt;div&gt;\</span><br><span class="line">                        &lt;slot name&#x3D;&quot;todo-title&quot;&gt;&lt;&#x2F;slot&gt;\</span><br><span class="line">                            &lt;ur&gt;\</span><br><span class="line">                            &lt;slot name&#x3D;&quot;todo-items&quot;&gt;&lt;&#x2F;slot&gt;\</span><br><span class="line">                       &lt;&#x2F;ur&gt;\</span><br><span class="line">                   &lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Vue.component(&quot;todo-title&quot;,&#123;</span><br><span class="line">        props: [&#39;title&#39;],</span><br><span class="line">        template: &#39;&lt;div&gt;&#123;&#123;title&#125;&#125;&lt;&#x2F;div&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    Vue.component(&quot;todo-items&quot;,&#123;</span><br><span class="line">        props: [&#39;item&#39;],</span><br><span class="line">        template:&#39;&lt;li&gt;&#123;&#123;item&#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var vm &#x3D; new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            title:&quot;silent系列&quot;,</span><br><span class="line">            todoItems:[&#39;silentcow说Java&#39;,&#39;silentcow说前端&#39;,&#39;silentcow说C++&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="自定义事件内容分发："><a href="#自定义事件内容分发：" class="headerlink" title="自定义事件内容分发："></a>自定义事件内容分发：</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to-do</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-items&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in todoItems&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItems(index)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">to-do</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// slot：插槽</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;to-do&quot;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                            <span class="tag">&lt;<span class="name">ur</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                       <span class="tag">&lt;/<span class="name">ur</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-items&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:&#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="xml">---</span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            remove:<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// this.$emit：自定义事件分发</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>,index);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            title:<span class="string">&quot;silent系列&quot;</span>,</span></span><br><span class="line"><span class="javascript">            todoItems:[<span class="string">&#x27;silentcow说Java&#x27;</span>,<span class="string">&#x27;silentcow说前端&#x27;</span>,<span class="string">&#x27;silentcow说C++&#x27;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            removeItems:<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.todoItems.splice(index,<span class="number">1</span>);<span class="comment">//一次删除一个元素</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue入门小结及常用属性："><a href="#Vue入门小结及常用属性：" class="headerlink" title="Vue入门小结及常用属性："></a>Vue入门小结及常用属性：</h1><p><strong>核心</strong>：数据驱动，组件化</p><p><strong>优点：</strong>借鉴了AngulaJS 的模块化开发 和 React 的虚拟Dom，虚拟Dom就是把Dom操作放到内存中执行；</p><p><strong>常用的属性：</strong></p><ul><li>v-if</li><li>v-else-if</li><li>v-else</li><li>v-for</li><li>v-on 绑定事件，简写 @</li><li>v-model   数据双向绑定</li><li>v-bind  给组件绑定参数  简写  :</li></ul><p><strong>组件化：</strong></p><ul><li>组合组件 slot 插槽</li><li>组件内部绑定事件需要使用到 this.$emit(“事件名”,”参数”)；</li><li>计算属性的特性，缓存计算数据</li></ul><p>遵循SoC 关注度分离原则，Vue是纯粹的视图框架，并不包含：比如Ajax之类的通信功能，为了解决通信问题，我们需要使用Axios框架做异步通信；</p><p><strong>说明：</strong></p><p>Vue的开发都是要基于NodeJS,实际开发采用vue-cli脚手架开发,vue-router路由,vuex做状态管理; Vue U,界面我们一般使用ElementUI(饿了么出品)。或者IC E(阿里巴巴出品!)来快速搭建前端项目~</p><hr><h1 id="webpack学习使用"><a href="#webpack学习使用" class="headerlink" title="webpack学习使用"></a>webpack学习使用</h1><h2 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h2><p>创建<code>webpack.config.js</code>配置文件： </p><ul><li>entry: 入口文件，指定WebPack用哪个文件作为项目的入口</li><li>output: 输出，指定WebPack把处理完成的文件放置到指定路径</li><li>module:模块，用于处理各种类型的文件</li><li>plugins: 插件，如:热更新、代码重用等</li><li>resolve:设置路径指向</li><li>watch: 监听，用于设置文件改动后直接打包</li></ul><h2 id="使用webpack"><a href="#使用webpack" class="headerlink" title="使用webpack"></a>使用webpack</h2><p>1.创建项目</p><p>2.创建一个名为modules 的目录，用于防止JS 模块等资源文件</p><p>3.在modules下创建模块文件，如hello.js，用于编写JS模块相关代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暴露一个方法</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;silentcow学ES6&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.在modules下创建一个名为main.js的入口文件，用于打包时设置entry 属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var hello &#x3D; require(&quot;.&#x2F;hello&quot;);</span><br><span class="line">hello.sayHi();</span><br></pre></td></tr></table></figure><p>5.在项目目录下创建webpack.config.js配置文件，使用webpack命令打包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    entry: &#39;.&#x2F;modules&#x2F;main.js&#39;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename:&quot;.&#x2F;js&#x2F;bundle.js&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806222407.png" alt="image-20200623202357971"></p><p>6.在项目目录下创建HTML页面，如index.html， 导入WebPack打包后的JS文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;dist&#x2F;js&#x2F;bundle.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>7.在IDEA控制台中直接执行webpack;如果失败的话,就使用管理员权限运行即可!<br>8.运行HTML看效果</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806222408.png" alt="image-20200623202614270"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot的学习使用</title>
      <link href="/2020/08/06/SpringBoot/"/>
      <url>/2020/08/06/SpringBoot/</url>
      
        <content type="html"><![CDATA[<p>本视频教程来自B站@遇见狂神说，有需要的朋友可以去搜索观看他的视频学习。</p><h1 id="一、-初识Springboot"><a href="#一、-初识Springboot" class="headerlink" title="一、 初识Springboot"></a>一、 初识Springboot</h1><h2 id="1-回顾什么是Spring"><a href="#1-回顾什么是Spring" class="headerlink" title="1. 回顾什么是Spring"></a>1. 回顾什么是Spring</h2><p>Spring是一个开源框架，2003 年兴起的一个轻量级的Java 开发框架，作者：Rod Johnson  。</p><p><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</strong></p><h2 id="2-Spring是如何简化Java开发的"><a href="#2-Spring是如何简化Java开发的" class="headerlink" title="2. Spring是如何简化Java开发的"></a>2. Spring是如何简化Java开发的</h2><p>为了降低Java开发的复杂性，==Spring采==用了以下4种关键策略：</p><p>1、基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</p><p>2、通过IOC，依赖注入（DI）和面向接口实现松耦合；</p><p>3、基于切面（AOP）和惯例进行声明式编程；</p><p>4、通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</p><h2 id="3-什么是SpringBoot"><a href="#3-什么是SpringBoot" class="headerlink" title="3. 什么是SpringBoot"></a>3. 什么是SpringBoot</h2><p><strong>简化开发，约定大于配置</strong></p><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p><p><strong>Spring Boot的主要优点：</strong></p><ul><li>为所有Spring开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><h2 id="4-第一个springboot程序"><a href="#4-第一个springboot程序" class="headerlink" title="4.第一个springboot程序"></a>4.第一个springboot程序</h2><p>创建方式在此就不写了，详情观看视频<a href="https://www.bilibili.com/video/BV1PE411i7CV?p=4">https://www.bilibili.com/video/BV1PE411i7CV?p=4</a></p><h2 id="5-pom-xml"><a href="#5-pom-xml" class="headerlink" title="5. pom.xml"></a>5. pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父依赖 --&gt;</span><span class="tag">&lt;<span class="name">parent</span>&gt;</span>    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>    <span class="comment">&lt;!-- web场景启动器 --&gt;</span>    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>    <span class="comment">&lt;!-- springboot单元测试 --&gt;</span>    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>        <span class="comment">&lt;!-- 剔除依赖 --&gt;</span>        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span>            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span>                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span>        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span>    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>        <span class="comment">&lt;!-- 打包插件 --&gt;</span>        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-编写一个http接口"><a href="#6-编写一个http接口" class="headerlink" title="6. 编写一个http接口"></a>6. 编写一个http接口</h2><p>1、在主程序的同级目录下，新建一个controller包，<strong>一定要在同级目录下，否则识别不到</strong></p><p>2、在包中新建一个HelloController类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/h1&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>启动</li></ol><h2 id="7-彩蛋：banner"><a href="#7-彩蛋：banner" class="headerlink" title="7.彩蛋：banner"></a>7.彩蛋：banner</h2><p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；</p><p>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。</p><p>图案可以到：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> 这个网站生成，然后拷贝到文件中即可！</p><p>在此示例两个：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                          To My Love!</span><br><span class="line">  -&#x3D;-&#x3D;-&#x3D;-&#x3D;--&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;--&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-</span><br><span class="line"></span><br><span class="line">               __        __        __        __</span><br><span class="line"> .*.         &#x2F;~ .~\    &#x2F;~  ~\    &#x2F;~ .~\    &#x2F;~  ~\</span><br><span class="line"> ***        &#39;      &#96;\&#x2F;&#39;      *  &#39;      &#96;\&#x2F;&#39;      *</span><br><span class="line">  V        (                .*)(               . *)</span><br><span class="line">&#x2F;\|&#x2F;\       \     NLX    . *.&#x2F;  \      LXJ   . *.&#x2F;</span><br><span class="line">  |          &#96;\ .      . .*&#x2F;&#39;    &#96;\ .      . .*&#x2F;&#39;     .*.</span><br><span class="line">  |            &#96;\ * .*. *&#x2F;&#39; _    _ &#96;\ * .*. *&#x2F;&#39;       ***</span><br><span class="line">                 &#96;\ * *&#x2F;&#39;  ( &#96;\&#x2F;&#39;*)  &#96;\ * *&#x2F;&#39;        &#x2F;\V</span><br><span class="line">                   &#96;\&#x2F;&#39;     \   *&#x2F;&#39;    &#96;\&#x2F;&#39;            |&#x2F;\</span><br><span class="line">                             &#96;\&#x2F;&#39;                      |</span><br><span class="line"></span><br><span class="line">     --+++&#x3D;&#x3D;##&lt;&lt;&#123;&#123;******** NLXJ Home ********&#125;&#125;&gt;&gt;##&#x3D;&#x3D;++--</span><br></pre></td></tr></table></figure><pre><code>__                   __     __   /  \                 /  \   __    / \\&quot;&quot;&#39;-./      _   _      \.-&#39;&quot;&quot;// \    \       e\__o  / \ / \  o__/a       /     |    e  /  |  |  `  |  |  \  a    |     |      ,__/    \   /    \__,      |      \_______/      \ /      \_______/N     /      \\       &#39;       //      \     L     / |  \   \\_   1314    _//   /  | \    ;   \  \_  |_)         (_|  _/  /   ;    |    \___) |  _       _  | (___/    |    |         /_-/ |     | \-_\         |   _;     ----/ |__/     \__| \----     ;_   \_\__________/           \__________/_/</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221355.png" alt="image-20200611191301111"></p><h1 id="二、运行原理："><a href="#二、运行原理：" class="headerlink" title="二、运行原理："></a>二、运行原理：</h1><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1. pom.xml"></a><strong>1. pom.xml</strong></h2><p><strong>父依赖</strong></p><p>其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点进去，发现还有一个父依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p><p><strong>以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</strong></p><h2 id="2-启动器-spring-boot-starter"><a href="#2-启动器-spring-boot-starter" class="headerlink" title="2. 启动器 spring-boot-starter"></a>2. 启动器 spring-boot-starter</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>springboot-boot-starter-xxx</strong>：就是spring-boot的场景启动器</p><p><strong>spring-boot-starter-web</strong>：帮我们导入了web模块正常运行所依赖的组件；</p><p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；</p><h2 id="3-主启动类"><a href="#3-主启动类" class="headerlink" title="3.主启动类"></a>3.<strong>主启动类</strong></h2><h3 id="默认的主启动类"><a href="#默认的主启动类" class="headerlink" title="默认的主启动类"></a>默认的主启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication 来标注一个主程序类</span></span><br><span class="line"><span class="comment">//说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootStudy01Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//以为是启动了一个方法，没想到启动了一个服务  SpringApplication.run(SpringbootStudy01Application.class, args);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p><strong>作用</strong>：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(</span></span><br><span class="line"><span class="meta">    excludeFilters = &#123; @Filter(</span></span><br><span class="line"><span class="meta">        type = FilterType.CUSTOM, </span></span><br><span class="line"><span class="meta">        classes = TypeExcludeFilter.class</span></span><br><span class="line"><span class="meta">    ),@Filter(</span></span><br><span class="line"><span class="meta">        type = FilterType.CUSTOM, </span></span><br><span class="line"><span class="meta">        classes = AutoConfigurationExcludeFilter.class</span></span><br><span class="line"><span class="meta">  )&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>这个注解在Spring中很重要 ,它对应XML配置中的元素。</p><p>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中</p><h3 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h3><p>作用：SpringBoot的配置类 ，标注在某个类上 ， 表示这是一个SpringBoot的配置类；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 @Configuration，说明这是一个配置类 ，配置类就是对应Spring的xml 配置文件；</p><p>里面的 @Component 这就说明，启动类本身也是Spring中的一个组件而已，负责启动应用！</p><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p><strong>@EnableAutoConfiguration ：开启自动配置功能</strong></p><p>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</p><p><strong>@AutoConfigurationPackage ：自动配置包</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Registrar.class&#125;)</span><span class="keyword">public</span> <span class="meta">@interface</span> AutoConfigurationPackage &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>@import</strong> ：Spring底层注解@import ， 给容器中导入一个组件</p><p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</p><p><strong>@Import({AutoConfigurationImportSelector.class}) ：给容器导入组件 ；</strong>自动配置导入选择器</p><p><strong>自动配置</strong>真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中。</p><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a><strong>结论：</strong></h3><ol><li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li><li>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</li><li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li><li>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；</li><li>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</li></ol><h2 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a><strong>SpringApplication</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplicationpublic</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        SpringApplication.run(SpringbootApplication.class, args);    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringApplication-run分析"><a href="#SpringApplication-run分析" class="headerlink" title="SpringApplication.run分析"></a><strong>SpringApplication.run分析</strong></h3><p>分析该方法主要分两部分，一部分是SpringApplication的实例化，二是run方法的执行；</p><h3 id="SpringApplication-1"><a href="#SpringApplication-1" class="headerlink" title="SpringApplication"></a>SpringApplication</h3><p><strong>这个类主要做了以下四件事情：</strong></p><p>1、推断应用的类型是普通的项目还是Web项目</p><p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p><p>3、找出所有的应用程序监听器，设置到listeners属性中</p><p>4、推断并设置main方法的定义类，找到运行的主类</p><h2 id="run方法流程分析"><a href="#run方法流程分析" class="headerlink" title="run方法流程分析"></a>run方法流程分析</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221522.png" alt="image-20200612000415805"></p><h1 id="三、yaml"><a href="#三、yaml" class="headerlink" title="三、yaml"></a>三、yaml</h1><h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h2><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p></li><li><ul><li>语法结构 ：key=value</li></ul></li><li><p>application.yml</p></li><li><ul><li>语法结构 ：key：空格 value</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><h2 id="2-yaml概述"><a href="#2-yaml概述" class="headerlink" title="2. yaml概述"></a>2. yaml概述</h2><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p><p>这种语言以数据作为中心，而不是以标记语言为重点！</p><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><p>传统xml配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yaml配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">server：</span>  </span><br><span class="line">    <span class="attr">prot:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure><h2 id="3-yaml基础语法"><a href="#3-yaml基础语法" class="headerlink" title="3. yaml基础语法"></a>3. yaml基础语法</h2><p>说明：语法要求严格！</p><p>1、空格不能省略</p><p>2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p><p>3、属性和值的大小写都是十分敏感的。</p><p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">k: v</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>“ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “kuang \n shen”  输出 ：kuang  换行  shen</p></li><li><p>‘’ 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘kuang \n shen’  输出 ：kuang  \n  shen</p></li></ul><p><strong>对象、Map（键值对）</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对象、Map格式</span></span><br><span class="line"><span class="attr">k:</span>     </span><br><span class="line">    <span class="attr">v1:</span>    </span><br><span class="line">    <span class="attr">v2:</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对象</span></span><br><span class="line"></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">silentcow</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">23</span></span><br></pre></td></tr></table></figure><p><strong>行内写法</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">student2:</span> &#123;<span class="attr">name:</span> <span class="string">silentcow</span>,<span class="attr">age:</span> <span class="number">23</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素,比如：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数组：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets2:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># k=v</span></span><br><span class="line"><span class="comment">#  对空格的要求十分高</span></span><br><span class="line"><span class="comment"># 普通的key-value</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">silentcow</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">silentcow</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#行内写法</span></span><br><span class="line"><span class="attr">student2:</span> &#123;<span class="attr">name:</span> <span class="string">silentcow</span>,<span class="attr">age:</span> <span class="number">23</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组：</span></span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pets2:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure><h2 id="4-修改SpringBoot的默认端口号"><a href="#4-修改SpringBoot的默认端口号" class="headerlink" title="4. 修改SpringBoot的默认端口号"></a><strong>4. 修改SpringBoot的默认端口号</strong></h2><p>配置文件中添加，端口号的参数，就可以切换端口；</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span>  </span><br><span class="line">    <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure><h2 id="5-注入配置文件"><a href="#5-注入配置文件" class="headerlink" title="5.注入配置文件"></a>5.注入配置文件</h2><p>yaml文件更强大的地方在于，他可以给我们的实体类直接注入匹配值！</p><h3 id="yaml注入配置文件"><a href="#yaml注入配置文件" class="headerlink" title="yaml注入配置文件"></a>yaml注入配置文件</h3><p>1、在springboot项目中的resources目录下新建一个文件 application.yml</p><p>2、编写一个实体类 Dog；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>   <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参、有参、get、set、tostring</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、思考，我们原来是如何给bean注入属性值的！@Value，给狗狗类测试一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Value(&quot;阿黄&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span> String name;    </span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在SpringBoot的测试类下注入狗狗输出一下；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//将狗狗自动注入进来    </span></span><br><span class="line">    Dog dog;</span><br><span class="line">    <span class="meta">@Test</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;                     </span><br><span class="line">        System.out.println(dog); <span class="comment">//打印看下狗狗对象    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果成功输出，@Value注入成功，这是我们原来的办法</p><p>5、我们在编写一个复杂一点的实体类：Person 类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>   <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法 </span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、使用yaml配置的方式进行注入</p><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">silentcow</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">22</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/09/09</span></span><br><span class="line">  <span class="attr">map:</span> &#123;<span class="attr">m1:</span> <span class="string">m1</span>,<span class="attr">m2:</span> <span class="string">m2</span>&#125;</span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">不胖</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>7、把写的Person的值注入到我们的类中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties作用：</span><br><span class="line">将配置文件中配置的每一个属性的值，映射到这个组件中；</span><br><span class="line">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span><br><span class="line">参数 prefix &#x3D; “person” : 将配置文件中的person下面的所有属性一一对应</span><br></pre></td></tr></table></figure><p>8、IDEA 提示，springboot配置注解处理器没有找到，让我们看文档，我们可以查看文档，找到一个依赖！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221523.png" alt="image-20200612092004315"></p><p>9、测试类中测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot02YamlApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：所有值全部注入成功！</p><h3 id="加载指定的配置文件"><a href="#加载指定的配置文件" class="headerlink" title="加载指定的配置文件"></a>加载指定的配置文件</h3><p><strong>@PropertySource ：</strong>加载指定的配置文件；</p><p><strong>@configurationProperties</strong>：默认从全局配置文件中获取值；</p><p>1、我们去在resources目录下新建一个<strong>person.properties</strong>文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221524.png" alt="image-20200612102445969"></p><p>2、然后在我们的代码中指定加载person.properties文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注册beanpublic </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span>    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ......  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">silentcow$&#123;random.int&#125;</span>  <span class="comment"># 随机uuid</span></span><br><span class="line">  <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span>  <span class="comment"># 随机int</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2017</span><span class="string">/09/09</span></span><br><span class="line">  <span class="attr">map:</span> &#123;<span class="attr">m1:</span> <span class="string">m1</span>,<span class="attr">m2:</span> <span class="string">m2</span>&#125;</span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="comment"># 如果不存在person.hello的值，则选择冒号后面的默认值,则输出hello不胖</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;person.hello:hello&#125;不胖</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="回顾properties配置"><a href="#回顾properties配置" class="headerlink" title="回顾properties配置"></a>回顾properties配置</h3><p>【注意】properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8；</p><p>方法自行百度</p><p><strong>测试步骤：</strong></p><p>1、新建一个实体类User</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;    </span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编辑配置文件 user.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">user1.name</span>=<span class="string">silentcow</span></span><br><span class="line"><span class="meta">user1.age</span>=<span class="string">20</span></span><br><span class="line"><span class="meta">user1.sex</span>=<span class="string">男</span></span><br></pre></td></tr></table></figure><p>3、我们在User类上使用@Value来进行注入！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;    </span><br><span class="line">    <span class="comment">//直接使用@value    </span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span> <span class="comment">//从配置文件中取值    </span></span><br><span class="line">    <span class="keyword">private</span> String name;    </span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;9*2&#125;&quot;)</span>  <span class="comment">// #&#123;SPEL&#125; Spring表达式    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;    </span><br><span class="line">    <span class="meta">@Value(&quot;男&quot;)</span>  <span class="comment">// 字面量    </span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、Springboot测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTestclass</span> </span><br><span class="line">DemoApplicationTests &#123;</span><br><span class="line">    <span class="meta">@Autowired</span>    </span><br><span class="line">    User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        System.out.println(user);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果正常输出：</p><h3 id="对比小结"><a href="#对比小结" class="headerlink" title="对比小结"></a>对比小结</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221525.png" alt="image-20200612103807874"></p><p>1、@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</p><p>2、松散绑定：这个什么意思呢? 比如yml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。</p><p>3、JSR303数据校验 ， 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p><p>4、复杂类型封装，yml中可以封装对象 ， 使用value就不支持</p><h3 id="结论：-1"><a href="#结论：-1" class="headerlink" title="结论："></a><strong>结论：</strong></h3><p>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</p><p>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</p><p>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</p><h1 id="四、JSR303数据校验"><a href="#四、JSR303数据校验" class="headerlink" title="四、JSR303数据校验"></a>四、JSR303数据校验</h1><h2 id="1-使用"><a href="#1-使用" class="headerlink" title="1. 使用"></a>1. 使用</h2><p>Springboot中可以用**@validated**来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。</p><ul><li><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>新版本的idea中，因为新版本需要validation启动器，必须导入以下依赖，否则@Email爆红</p></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>UEmail.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;email&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span>      <span class="comment">//数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UEmail</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式错误&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建实体类四件套</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>application.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">email:</span></span><br><span class="line">  <span class="attr">email:</span> <span class="string">silentcow</span></span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221526.png" alt="image-20200612145245229"></p><p><strong>使用数据校验，可以保证数据的正确性；</strong></p><h2 id="2-常见参数"><a href="#2-常见参数" class="headerlink" title="2. 常见参数"></a>2. 常见参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@NotNull(message&#x3D;&quot;名字不能为空&quot;)</span><br><span class="line">private String userName;</span><br><span class="line">@Max(value&#x3D;120,message&#x3D;&quot;年龄最大不能查过120&quot;)</span><br><span class="line">private int age;</span><br><span class="line">@Email(message&#x3D;&quot;邮箱格式错误&quot;)</span><br><span class="line">private String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line">@Null       验证对象是否为null</span><br><span class="line">@NotNull    验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="line">@NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="line">@NotEmpty   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">    </span><br><span class="line">Booelan检查</span><br><span class="line">@AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="line">@AssertFalse    验证 Boolean 对象是否为 false  </span><br><span class="line">    </span><br><span class="line">长度检查</span><br><span class="line">@Size(min&#x3D;, max&#x3D;) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line">@Length(min&#x3D;, max&#x3D;) string is between min and max included.</span><br><span class="line"></span><br><span class="line">日期检查</span><br><span class="line">@Past       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line">@Future     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line">@Pattern    验证 String 对象是否符合正则表达式的规则</span><br><span class="line"></span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure><h1 id="五、多环境切换"><a href="#五、多环境切换" class="headerlink" title="五、多环境切换"></a>五、多环境切换</h1><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境</p><h2 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h2><p>我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；</p><p><strong>例如：</strong></p><p>application-test.properties 代表测试环境配置</p><p>application-dev.properties 代表开发环境配置</p><p>但是Springboot并不会直接启动这些配置文件，它<strong>默认使用application.properties主配置文件</strong>；</p><p>我们需要通过一个配置来选择需要激活的环境：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure><h2 id="yaml的多文档块"><a href="#yaml的多文档块" class="headerlink" title="yaml的多文档块"></a>yaml的多文档块</h2><p>和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择要激活哪个环境块</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span>   <span class="comment"># 配置环境的名称</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span>  <span class="comment"># 配置环境的名称</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</strong></p><h2 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h2><p><strong>外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</strong></p><p>官方外部配置文件说明参考文档</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221527.png" alt="image-20200612183146605"></p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">优先级1：项目路径下的config文件夹配置文件</span><br><span class="line">优先级2：项目路径下配置文件</span><br><span class="line">优先级3：资源路径下的config文件夹配置文件</span><br><span class="line">优先级4：资源路径下配置文件</span><br></pre></td></tr></table></figure><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p><strong>SpringBoot会从这四个位置全部加载主配置文件；互补配置；</strong></p><hr><h1 id="六、自动配置原理："><a href="#六、自动配置原理：" class="headerlink" title="六、自动配置原理："></a>六、自动配置原理：</h1><h2 id="分析自动配置原理"><a href="#分析自动配置原理" class="headerlink" title="分析自动配置原理"></a>分析自动配置原理</h2><p>以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能；</span></span><br><span class="line">  <span class="comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span><br><span class="line">  <span class="comment">//并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//Spring底层@Conditional注解</span></span><br><span class="line">  <span class="comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span><br><span class="line">  <span class="comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span></span><br><span class="line">  <span class="comment">//如果不存在，判断也是成立的</span></span><br><span class="line">  <span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//。。。。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</li><li>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</li><li>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</li><li>配置文件能配置什么就可以参照某个功能对应的这个属性类</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;从配置文件中获取指定的值和bean的属性进行绑定@ConfigurationProperties(prefix &#x3D; &quot;spring.http&quot;) </span><br><span class="line">public class HttpProperties &#123;</span><br><span class="line">    &#x2F;&#x2F; .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221528.png" alt="image-20200612233932232"></p><h2 id="精髓"><a href="#精髓" class="headerlink" title="精髓"></a>精髓</h2><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p><p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p><hr><h2 id="了解：-Conditional"><a href="#了解：-Conditional" class="headerlink" title="了解：@Conditional"></a>了解：@Conditional</h2><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221529.png" alt="image-20200612230211239"></p><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><p>我们怎么知道哪些自动配置类生效？</p><p><strong>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开启springboot的调试类</span></span><br><span class="line"><span class="string">debug=true</span></span><br></pre></td></tr></table></figure><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p><p><strong>Unconditional classes: （没有条件的类）</strong></p><p>【演示：查看输出的日志】</p><hr><h1 id="七、SpringBoot-Web开发"><a href="#七、SpringBoot-Web开发" class="headerlink" title="七、SpringBoot Web开发"></a>七、SpringBoot Web开发</h1><h2 id="1-回顾："><a href="#1-回顾：" class="headerlink" title="1. 回顾："></a>1. 回顾：</h2><p>自动装配：</p><p>springboot到底帮我们配置了什么？我们能不能进行修改？能修改哪些东西？能不能扩展？</p><ul><li>xxxxAutoConfiguraion:向容器中自动配置组建</li><li>xxxxProperties：自动装配类，装配配置文件中自定义的一些内容</li></ul><h2 id="2-静态资源导入"><a href="#2-静态资源导入" class="headerlink" title="2. 静态资源导入"></a>2. 静态资源导入</h2><ol><li><p>在springboot，我们可以使用以下方式处理静态资源：</p><ul><li><p>webjars：<code>http://localhost:8080/webjars/jquery/3.5.1/jquery.js</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221530.png" alt="image-20200613200131678"></p></li><li><p>public,static,/**,resources       <code>localhost:8080</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221531.png" alt="image-20200613200328712"></p></li></ul></li><li><p>优先级：</p><p>resources&gt;static（默认）&gt;public </p></li></ol><p>​          </p><h2 id="3-自定义静态资源路径"><a href="#3-自定义静态资源路径" class="headerlink" title="3. 自定义静态资源路径"></a>3. 自定义静态资源路径</h2><p>我们也可以自己通过配置文件来指定一下，哪些文件夹是需要我们放静态资源文件的，在application.properties中配置；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.resources.static-locations&#x3D;classpath:&#x2F;coding&#x2F;,classpath:&#x2F;silentcow</span><br></pre></td></tr></table></figure><p>一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！</p><hr><h2 id="4-首页处理"><a href="#4-首页处理" class="headerlink" title="4.首页处理"></a>4.首页处理</h2><p>看源码！可以看到一个欢迎页的映射，就是我们的首页！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           FormattingConversionService mvcConversionService,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                           ResourceUrlProvider mvcResourceUrlProvider)</span> </span>&#123;</span><br><span class="line">    WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">        <span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(), <span class="comment">// getWelcomePage 获得欢迎页</span></span><br><span class="line">        <span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">    welcomePageHandlerMapping.setInterceptors(getInterceptors(mvcConversionService, mvcResourceUrlProvider));</span><br><span class="line">    <span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Optional&lt;Resource&gt; <span class="title">getWelcomePage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] locations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">    <span class="comment">// ::是java8 中新引入的运算符</span></span><br><span class="line">    <span class="comment">// Class::function的时候function是属于Class的，应该是静态方法。</span></span><br><span class="line">    <span class="comment">// this::function的funtion是属于这个对象的。</span></span><br><span class="line">    <span class="comment">// 简而言之，就是一种语法糖而已，是一种简写</span></span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(locations).map(<span class="keyword">this</span>::getIndexHtml).filter(<span class="keyword">this</span>::isReadable).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 欢迎页就是一个location下的的 index.html 而已</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>欢迎页，静态资源文件夹下的所有 index.html 页面；被 /** 映射。</p><p>比如我访问  <a href="http://localhost:8080/">http://localhost:8080/</a> ，就会找静态资源文件夹下的 index.html</p><p>新建一个 index.html ，在我们上面的3个目录中任意一个；然后访问测试  <a href="http://localhost:8080/">http://localhost:8080/</a>  看结果！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221532.png" alt="image-20200613225105183"></p><h2 id="5-关于网站图标说明："><a href="#5-关于网站图标说明：" class="headerlink" title="5. 关于网站图标说明："></a>5. <strong>关于网站图标说明</strong>：</h2><p>与其他静态资源一样，Spring Boot在配置的静态内容位置中查找 favicon.ico。如果存在这样的文件，它将自动用作应用程序的favicon。</p><p><strong>1、关闭SpringBoot默认图标</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭默认图标</span></span><br><span class="line"><span class="string">spring.mvc.favicon.enabled=false</span></span><br></pre></td></tr></table></figure><p>2、自己放一个图标在静态资源目录下，我放在 public 目录下</p><p>3、清除浏览器缓存！刷新网页，发现图标已变</p><ul><li>此方法已过时，别的方法问度娘</li></ul><hr><h2 id="6-Thymeleaf-模板引擎"><a href="#6-Thymeleaf-模板引擎" class="headerlink" title="6. Thymeleaf 模板引擎"></a>6. Thymeleaf 模板引擎</h2><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>前端交给我们的页面，是html页面。如果是我们以前开发，我们需要把他们转成jsp页面，jsp好处就是当我们查出一些数据转发到JSP页面以后，我们可以用jsp轻松实现数据的显示，及交互等。</p><p>jsp支持非常强大的功能，包括能写Java代码，但是呢，我们现在的这种情况，SpringBoot这个项目首先是以jar的方式，不是war，像第二，我们用的还是嵌入式的Tomcat，所以呢，<strong>他现在默认是不支持jsp的</strong>。</p><p>那不支持jsp，如果我们直接用纯静态页面的方式，那给我们开发会带来非常大的麻烦，那怎么办呢？</p><p><strong>SpringBoot推荐你可以来使用模板引擎：</strong></p><p>模板引擎，我们其实大家听到很多，其实jsp就是一个模板引擎，还有用的比较多的freemarker，包括SpringBoot给我们推荐的Thymeleaf，模板引擎有非常多，但再多的模板引擎，他们的思想都是一样的，什么样一个思想呢我们来看一下这张图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221533.png" alt="image-20200613225513835"></p><p>模板引擎的作用就是我们来写一个页面模板，比如有些值呢，是动态的，我们写一些表达式。而这些值，从哪来呢，就是我们在后台封装一些数据。然后把这个模板和这个数据交给我们模板引擎，模板引擎按照我们这个数据帮你把这表达式解析、填充到我们指定的位置，然后把这个数据最终生成一个我们想要的内容给我们写出去，这就是我们这个模板引擎，不管是jsp还是其他模板引擎，都是这个思想。</p><h3 id="引入-Thymeleaf"><a href="#引入-Thymeleaf" class="headerlink" title="引入 Thymeleaf"></a>引入 Thymeleaf</h3><p>Thymeleaf 官网：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p><p>Thymeleaf 在Github 的主页：<a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p><p>Spring官方文档：找到我们对应的版本</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a> </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Thymeleaf分析"><a href="#Thymeleaf分析" class="headerlink" title="Thymeleaf分析"></a>Thymeleaf分析</h3><p>按照SpringBoot的自动配置原理看一下我们这个Thymeleaf的自动配置规则</p><p>Thymeleaf的自动配置类：ThymeleafProperties</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.thymeleaf&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> String prefix = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String suffix = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String mode = <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset encoding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在其中看到默认的<strong>前缀和后缀</strong>！</p><p>只需要把我们的<strong>html页面放在类路径下的templates下</strong>，thymeleaf就可以帮我们自动渲染了。</p><p>使用thymeleaf什么都不需要配置，只需要将他放在指定的文件夹下即可！</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h3><p>1、编写一个TestController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//classpath:/templates/test.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写一个测试页面  test.html 放在 templates 目录下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Thymeleaf-语法学习"><a href="#Thymeleaf-语法学习" class="headerlink" title="Thymeleaf 语法学习"></a>Thymeleaf 语法学习</h3><p>官方文档下载：<a href="https://www.thymeleaf.org/documentation.html">https://www.thymeleaf.org/documentation.html</a></p><p>要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:th=&quot;http://www.thymeleaf.org&quot;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法参考：<a href="https://blog.csdn.net/qq_32923745/article/details/78257686?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">https://blog.csdn.net/qq_32923745/article/details/78257686?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p><p>我们能写哪些表达式？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Simple expressions:（表达式语法）</span><br><span class="line">Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；</span><br><span class="line">    <span class="number">1</span>）、获取对象的属性、调用方法</span><br><span class="line">    2）、使用内置的基本对象：#18</span><br><span class="line">         #ctx : the context object.</span><br><span class="line">         #vars: the context variables.</span><br><span class="line">         #locale : the context locale.</span><br><span class="line">         #request : (only in Web Contexts) the HttpServletRequest object.</span><br><span class="line">         #response : (only in Web Contexts) the HttpServletResponse object.</span><br><span class="line">         #session : (only in Web Contexts) the HttpSession object.</span><br><span class="line">         #servletContext : (only in Web Contexts) the ServletContext object.</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span>）、内置的一些工具对象：</span><br><span class="line">　　　　　　#execInfo : information about the template being processed.</span><br><span class="line">　　　　　　#uris : methods for escaping parts of URLs/URIs</span><br><span class="line">　　　　　　#conversions : methods for executing the configured conversion service (if any).</span><br><span class="line">　　　　　　#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><br><span class="line">　　　　　　#calendars : analogous to #dates , but for java.util.Calendar objects.</span><br><span class="line">　　　　　　#numbers : methods for formatting numeric objects.</span><br><span class="line">　　　　　　#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><br><span class="line">　　　　　　#objects : methods for objects in general.</span><br><span class="line">　　　　　　#bools : methods for boolean evaluation.</span><br><span class="line">　　　　　　#arrays : methods for arrays.</span><br><span class="line">　　　　　　#lists : methods for lists.</span><br><span class="line">　　　　　　#sets : methods for sets.</span><br><span class="line">　　　　　　#maps : methods for maps.</span><br><span class="line">　　　　　　#aggregates : methods for creating aggregates on arrays or collections.</span><br><span class="line">==================================================================================</span><br><span class="line"></span><br><span class="line">  Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span><br><span class="line">  Message Expressions: #&#123;...&#125;：获取国际化内容</span><br><span class="line">  Link URL Expressions: @&#123;...&#125;：定义URL；</span><br><span class="line">  Fragment Expressions: ~&#123;...&#125;：片段引用表达式</span><br><span class="line"></span><br><span class="line">Literals（字面量）</span><br><span class="line">      Text literals: <span class="string">&#x27;one text&#x27;</span> , <span class="string">&#x27;Another one!&#x27;</span> ,…</span><br><span class="line">      Number literals: <span class="number">0</span> , <span class="number">34</span> , <span class="number">3.0</span> , <span class="number">12.3</span> ,…</span><br><span class="line">      Boolean literals: <span class="keyword">true</span> , <span class="keyword">false</span></span><br><span class="line">      Null literal: <span class="keyword">null</span></span><br><span class="line">      Literal tokens: one , sometext , main ,…</span><br><span class="line">      </span><br><span class="line">Text operations:（文本操作）</span><br><span class="line">    String concatenation: +</span><br><span class="line">    Literal substitutions: |The name is $&#123;name&#125;|</span><br><span class="line">    </span><br><span class="line">Arithmetic operations:（数学运算）</span><br><span class="line">    Binary operators: + , - , * , / , %</span><br><span class="line">    <span class="function">Minus <span class="title">sign</span> <span class="params">(unary operator)</span>: -</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Boolean operations:（布尔运算）</span></span><br><span class="line"><span class="function">    Binary operators: and , or</span></span><br><span class="line"><span class="function">    Boolean <span class="title">negation</span> <span class="params">(unary operator)</span>: ! , not</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Comparisons and equality:（比较运算）</span></span><br><span class="line"><span class="function">    Comparators: &gt; , &lt; , &gt;</span>= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    Equality operators: == , != ( eq , ne )</span><br><span class="line">    </span><br><span class="line">Conditional operators:条件运算（三元运算符）</span><br><span class="line">    If-then: (<span class="keyword">if</span>) ? (then)</span><br><span class="line">    If-then-<span class="keyword">else</span>: (<span class="keyword">if</span>) ? (then) : (<span class="keyword">else</span>)</span><br><span class="line">    Default: (value) ?: (defaultvalue)</span><br><span class="line">    </span><br><span class="line">Special tokens:</span><br><span class="line">    No-Operation: _</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div th:text&#x3D;&quot;$&#123;msg&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!--不转义--&gt;</span><br><span class="line">&lt;div th:utext&#x3D;&quot;$&#123;msg&#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--遍历数据--&gt;</span><br><span class="line">&lt;!--th:each每次遍历都会生成当前这个标签：官网#9--&gt;</span><br><span class="line">&lt;h4 th:each&#x3D;&quot;user :$&#123;users&#125;&quot; th:text&#x3D;&quot;$&#123;user&#125;&quot;&gt;&lt;&#x2F;h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;h4&gt;</span><br><span class="line">    &lt;!--行内写法：官网#12--&gt;</span><br><span class="line">    &lt;span th:each&#x3D;&quot;user:$&#123;users&#125;&quot;&gt;[[$&#123;user&#125;]]&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;h4&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="7-MVC自动配置原理"><a href="#7-MVC自动配置原理" class="headerlink" title="7.MVC自动配置原理"></a>7.MVC自动配置原理</h2><h3 id="官网阅读"><a href="#官网阅读" class="headerlink" title="官网阅读"></a>官网阅读</h3><p>地址 ：<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Spring MVC Auto-configuration</span><br><span class="line"><span class="comment">// Spring Boot为Spring MVC提供了自动配置，它可以很好地与大多数应用程序一起工作。</span></span><br><span class="line">Spring Boot provides auto-configuration <span class="keyword">for</span> Spring MVC that works well with most applications.</span><br><span class="line"><span class="comment">// 自动配置在Spring默认设置的基础上添加了以下功能：</span></span><br><span class="line">The auto-configuration adds the following features on top of Spring’s defaults:</span><br><span class="line"><span class="comment">// 包含视图解析器</span></span><br><span class="line">Inclusion of ContentNegotiatingViewResolver and BeanNameViewResolver beans.</span><br><span class="line"><span class="comment">// 支持静态资源文件夹的路径，以及webjars</span></span><br><span class="line">Support <span class="keyword">for</span> serving <span class="keyword">static</span> resources, including support <span class="keyword">for</span> WebJars </span><br><span class="line"><span class="comment">// 自动注册了Converter：</span></span><br><span class="line"><span class="comment">// 转换器，这就是我们网页提交数据到后台自动封装成为对象的东西，比如把&quot;1&quot;字符串自动转换为int类型</span></span><br><span class="line"><span class="comment">// Formatter：【格式化器，比如页面给我们了一个2019-8-10，它会给我们自动格式化为Date对象】</span></span><br><span class="line">Automatic registration of Converter, GenericConverter, and Formatter beans.</span><br><span class="line"><span class="comment">// HttpMessageConverters</span></span><br><span class="line"><span class="comment">// SpringMVC用来转换Http请求和响应的的，比如我们要把一个User对象转换为JSON字符串，可以去看官网文档解释；</span></span><br><span class="line"><span class="function">Support <span class="keyword">for</span> <span class="title">HttpMessageConverters</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"><span class="comment">// 定义错误代码生成规则的</span></span></span><br><span class="line"><span class="function">Automatic registration of <span class="title">MessageCodesResolver</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"><span class="comment">// 首页定制</span></span></span><br><span class="line"><span class="function">Static index.html support.</span></span><br><span class="line"><span class="function"><span class="comment">// 图标定制</span></span></span><br><span class="line"><span class="function">Custom Favicon <span class="title">support</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"><span class="comment">// 初始化数据绑定器：帮我们把请求数据绑定到JavaBean中！</span></span></span><br><span class="line"><span class="function">Automatic use of a ConfigurableWebBindingInitializer <span class="title">bean</span> <span class="params">(covered later in <span class="keyword">this</span> document)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="function"><span class="comment">如果您希望保留Spring Boot MVC功能，并且希望添加其他MVC配置（拦截器、格式化程序、视图控制器和其他功能），则可以添加自己</span></span></span><br><span class="line"><span class="function"><span class="comment">的@configuration类，类型为webmvcconfiguer，但不添加@EnableWebMvc。如果希望提供</span></span></span><br><span class="line"><span class="function"><span class="comment">RequestMappingHandlerMapping、RequestMappingHandlerAdapter或ExceptionHandlerExceptionResolver的自定义</span></span></span><br><span class="line"><span class="function"><span class="comment">实例，则可以声明WebMVCregistrationAdapter实例来提供此类组件。</span></span></span><br><span class="line"><span class="function"><span class="comment">*/</span></span></span><br><span class="line"><span class="function">If you want to keep Spring Boot MVC features and you want to add additional MVC configuration </span></span><br><span class="line"><span class="function"><span class="params">(interceptors, formatters, view controllers, and other features)</span>, you can add your own </span></span><br><span class="line"><span class="function">@Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide </span></span><br><span class="line"><span class="function">custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or </span></span><br><span class="line"><span class="function">ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 如果您想完全控制Spring MVC，可以添加自己的@Configuration，并用@EnableWebMvc进行注释。</span></span></span><br><span class="line"><span class="function">If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc.</span></span><br></pre></td></tr></table></figure><p>SpringBoot已经帮我们自动配置好了SpringMVC</p><h3 id="ContentNegotiatingViewResolver-内容协商视图解析器"><a href="#ContentNegotiatingViewResolver-内容协商视图解析器" class="headerlink" title="ContentNegotiatingViewResolver 内容协商视图解析器"></a><strong>ContentNegotiatingViewResolver 内容协商视图解析器</strong></h3><p>自动配置了ViewResolver,就是我们之前学习的SpringMVC的视图解析器；</p><p>即根据方法的返回值取得视图对象（View），然后由视图对象决定如何渲染（转发，重定向）。</p><p>看看这里的源码：我们找到 WebMvcAutoConfiguration ， 然后搜索ContentNegotiatingViewResolver。找到如下方法！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(ViewResolver.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;viewResolver&quot;, value = ContentNegotiatingViewResolver.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ContentNegotiatingViewResolver <span class="title">viewResolver</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    ContentNegotiatingViewResolver resolver = <span class="keyword">new</span> ContentNegotiatingViewResolver();</span><br><span class="line">    resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class));</span><br><span class="line">    <span class="comment">// ContentNegotiatingViewResolver使用所有其他视图解析器来定位视图，因此它应该具有较高的优先级</span></span><br><span class="line">    resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到对应的解析视图的代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="comment">// 注解说明：@Nullable 即参数可为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    RequestAttributes attrs = RequestContextHolder.getRequestAttributes();</span><br><span class="line">    Assert.state(attrs <span class="keyword">instanceof</span> ServletRequestAttributes, <span class="string">&quot;No current ServletRequestAttributes&quot;</span>);</span><br><span class="line">    List&lt;MediaType&gt; requestedMediaTypes = <span class="keyword">this</span>.getMediaTypes(((ServletRequestAttributes)attrs).getRequest());</span><br><span class="line">    <span class="keyword">if</span> (requestedMediaTypes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取候选的视图对象</span></span><br><span class="line">        List&lt;View&gt; candidateViews = <span class="keyword">this</span>.getCandidateViews(viewName, locale, requestedMediaTypes);</span><br><span class="line">        <span class="comment">// 选择一个最适合的视图对象，然后把这个对象返回</span></span><br><span class="line">        View bestView = <span class="keyword">this</span>.getBestView(candidateViews, requestedMediaTypes, attrs);</span><br><span class="line">        <span class="keyword">if</span> (bestView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bestView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getCandidateViews中看到他是把所有的视图解析器拿来，进行while循环，挨个解析！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator var5 = <span class="keyword">this</span>.viewResolvers.iterator();</span><br></pre></td></tr></table></figure><p>所以得出结论：<strong>ContentNegotiatingViewResolver 这个视图解析器就是用来组合所有的视图解析器的</strong> </p><hr><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>视图解析器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">myViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义了一个自己的视图解析器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewResolver</span> <span class="keyword">implements</span> <span class="title">ViewResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换器和格式化器"><a href="#转换器和格式化器" class="headerlink" title="转换器和格式化器"></a>转换器和格式化器</h3><p>源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拿到配置文件中的格式化规则</span></span><br><span class="line">    WebConversionService conversionService = </span><br><span class="line">        <span class="keyword">new</span> WebConversionService(<span class="keyword">this</span>.mvcProperties.getDateFormat());</span><br><span class="line">    addFormatters(conversionService);</span><br><span class="line">    <span class="keyword">return</span> conversionService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDateFormat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dateFormat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Date format to use. For instance, `dd/MM/yyyy`. 默认的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String dateFormat;</span><br></pre></td></tr></table></figure><p>可以看到在我们的Properties文件中，我们可以进行自动配置它！</p><p>如果配置了自己的格式化方式，就会注册到Bean中生效，我们可以在配置文件中配置日期格式化的规则：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.mvc.date-format&#x3D;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221534.png" alt="image-20200614095843666"></p><p>其余的就不一一举例了，大家可以下去多研究探讨即可</p><h3 id="修改SpringBoot的默认配置"><a href="#修改SpringBoot的默认配置" class="headerlink" title="修改SpringBoot的默认配置"></a>修改SpringBoot的默认配置</h3><p>这么多的自动配置，原理都是一样的，通过这个WebMVC的自动配置原理分析，我们要学会一种学习方式，通过源码探究，得出结论；这个结论一定是属于自己的，而且一通百通。</p><p>SpringBoot的底层，大量用到了这些设计细节思想，所以，没事需要多阅读源码！得出结论；</p><p>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（如果用户自己配置@bean），如果有就用用户配置的，如果没有就用自动配置的；</p><p>如果有些组件可以存在多个，比如我们的视图解析器，就将用户配置的和自己默认的组合起来！</p><p><strong>扩展使用SpringMVC</strong>  官方文档如下：</p><p>If you want to keep Spring Boot MVC features and you want to add additional MVC configuration (interceptors, formatters, view controllers, and other features), you can add your own @Configuration class of type WebMvcConfigurer but without @EnableWebMvc. If you wish to provide custom instances of RequestMappingHandlerMapping, RequestMappingHandlerAdapter, or ExceptionHandlerExceptionResolver, you can declare a WebMvcRegistrationsAdapter instance to provide such components.</p><p>我们要做的就是编写一个@Configuration注解类，并且类型要为WebMvcConfigurer，还不能标注@EnableWebMvc注解；我们去自己写一个；我们新建一个包叫config，写一个类MyMvcConfig；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//应为类型要求为WebMvcConfigurer，所以我们实现其接口</span></span><br><span class="line"><span class="comment">//可以使用自定义类扩展MVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浏览器发送/test ， 就会跳转到test页面；</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/test&quot;</span>).setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221535.png" alt="image-20200614100501679"></p><p><strong>确实也跳转过来了！所以说，我们要扩展SpringMVC，官方就推荐我们这么去使用，既保SpringBoot留所有的自动配置，也能用我们扩展的配置！</strong></p><p>我们可以去分析一下原理：</p><p>1、WebMvcAutoConfiguration 是 SpringMVC的自动配置类，里面有一个类WebMvcAutoConfigurationAdapter</p><p>2、这个类上有一个注解，在做其他自动配置时会导入：@Import(EnableWebMvcConfiguration.class)</p><p>3、我们点进EnableWebMvcConfiguration这个类看一下，它继承了一个父类：DelegatingWebMvcConfiguration</p><p>这个父类中有这样一段代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 从容器中获取所有的webmvcConfigurer</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、我们可以在这个类中去寻找一个我们刚才设置的viewController当做参考，发现它调用了一个</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configurers.addViewControllers(registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结论</strong>：所有的WebMvcConfiguration都会被作用，不止Spring自己的配置类，我们自己的配置类当然也会被调用；</p><h3 id="全面接管SpringMVC"><a href="#全面接管SpringMVC" class="headerlink" title="全面接管SpringMVC"></a>全面接管SpringMVC</h3><p>官方文档：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If you want to take complete control of Spring MVCyou can add your own @Configuration annotated with @EnableWebMvc.</span><br></pre></td></tr></table></figure><p>全面接管即：SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己去配置！</p><p>只需在我们的配置类中要加一个@EnableWebMvc。</p><p>我们看下如果我们全面接管了SpringMVC了，我们之前SpringBoot给我们配置的静态资源映射一定会无效，我们可以去测试一下；</p><p>不加注解之前，访问首页：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221536.png" alt="image-20200614100949725"></p><p>给配置类加上注解：@EnableWebMvc</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221537.png" alt="image-20200614101052611"></p><p>我们发现所有的SpringMVC自动配置都失效了！回归到了最初的样子；</p><p><strong>当然，我们开发中，不推荐使用全面接管SpringMVC</strong></p><p><strong>思考</strong>问题？为什么加了一个注解，自动配置就失效了！我们看下源码：</p><p>1、这里发现它是导入了一个类，我们可以继续进去看</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、它继承了一个父类 WebMvcConfigurationSupport</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、我们来回顾一下Webmvc自动配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="comment">// 这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">    ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一句话：@EnableWebMvc将WebMvcConfigurationSupport组件导入进来了；</p><p>而导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能！</p><p><strong>在SpringBoot中会有非常多的扩展配置，只要看见了这个，我们就应该多留心注意~</strong></p><hr><h1 id="八：页面国际化"><a href="#八：页面国际化" class="headerlink" title="八：页面国际化"></a>八：页面国际化</h1><h2 id="1-配置文件编写"><a href="#1-配置文件编写" class="headerlink" title="1. 配置文件编写"></a>1. 配置文件编写</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221538.png" alt="image-20200614162735550"></p><ul><li>login.properties ：默认</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login.password&#x3D;密码</span><br><span class="line">login.remember&#x3D;记住我</span><br><span class="line">login.sign&#x3D;登录</span><br><span class="line">login.tip&#x3D;请登录</span><br><span class="line">login.username&#x3D;用户名</span><br></pre></td></tr></table></figure><ul><li>login_en_US.properties</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login.password&#x3D;Password</span><br><span class="line">login.remember&#x3D;Remember me</span><br><span class="line">login.sign&#x3D;Sign in</span><br><span class="line">login.tip&#x3D;Please sign in</span><br><span class="line">login.username&#x3D;Username</span><br></pre></td></tr></table></figure><ul><li>login_zh_CN.properties</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">login.password&#x3D;密码</span><br><span class="line">login.remember&#x3D;记住我</span><br><span class="line">login.sign&#x3D;登录</span><br><span class="line">login.tip&#x3D;请登录</span><br><span class="line">login.username&#x3D;用户名</span><br></pre></td></tr></table></figure><h2 id="2-配置文件生效"><a href="#2-配置文件生效" class="headerlink" title="2. 配置文件生效"></a>2. 配置文件生效</h2><p>SpringBoot对国际化的自动配置！这里又涉及到一个类：MessageSourceAutoConfiguration</p><p>里面有一个方法，这里发现SpringBoot已经自动配置好了管理我们国际化资源文件的组件 ResourceBundleMessageSource；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取 properties 传递过来的值进行判断</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">    ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">        <span class="comment">// 设置国际化文件的基础名（去掉语言国家代码的）</span></span><br><span class="line">        messageSource.setBasenames(</span><br><span class="line">            StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">                                       StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">    Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">    <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">    &#125;</span><br><span class="line">    messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">    messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">    <span class="keyword">return</span> messageSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们真实 的情况是放在了i18n目录下，所以我们要去<strong>配置这个messages的路径；</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.messages.basename&#x3D;i18n.login</span><br></pre></td></tr></table></figure><h2 id="3-配置页面国际化值"><a href="#3-配置页面国际化值" class="headerlink" title="3.配置页面国际化值"></a>3.配置页面国际化值</h2><p>查看Thymeleaf的文档，找到message取值操作为：#{…}。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221539.png" alt="image-20200614163311288"></p><p>效果图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221540.png" alt="image-20200614163342212"></p><h2 id="4-配置国际化解析"><a href="#4-配置国际化解析" class="headerlink" title="4.配置国际化解析"></a>4.配置国际化解析</h2><p>在Spring中有一个国际化的Locale （区域信息对象）；里面有一个叫做LocaleResolver （获取区域信息对象）的解析器！</p><p>我们去我们webmvc自动配置文件，寻找一下！看到SpringBoot默认配置：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 容器中没有就自己配，有的话就用用户配置的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收头国际化分解</span></span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AcceptHeaderLocaleResolver 这个类中有一个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    Locale defaultLocale = <span class="keyword">this</span>.getDefaultLocale();</span><br><span class="line">    <span class="comment">// 默认的就是根据请求头带来的区域信息获取Locale进行国际化</span></span><br><span class="line">    <span class="keyword">if</span> (defaultLocale != <span class="keyword">null</span> &amp;&amp; request.getHeader(<span class="string">&quot;Accept-Language&quot;</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultLocale;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Locale requestLocale = request.getLocale();</span><br><span class="line">        List&lt;Locale&gt; supportedLocales = <span class="keyword">this</span>.getSupportedLocales();</span><br><span class="line">        <span class="keyword">if</span> (!supportedLocales.isEmpty() &amp;&amp; !supportedLocales.contains(requestLocale)) &#123;</span><br><span class="line">            Locale supportedLocale = <span class="keyword">this</span>.findSupportedLocale(request, supportedLocales);</span><br><span class="line">            <span class="keyword">if</span> (supportedLocale != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> supportedLocale;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defaultLocale != <span class="keyword">null</span> ? defaultLocale : requestLocale;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> requestLocale;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-根据按钮自动切换中文英文！"><a href="#5-根据按钮自动切换中文英文！" class="headerlink" title="5.根据按钮自动切换中文英文！"></a>5.根据按钮自动切换中文英文！</h2><p>假如我们现在想点击链接让我们的国际化资源生效，就需要让我们自己的Locale生效！</p><p>我们去自己写一个自己的LocaleResolver，可以在链接上携带区域信息！</p><ul><li>修改一下前端页面的跳转连接：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里传入参数不需要使用 ？使用 （key=value）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>写一个处理的组件类<ul><li>MyLocaleResolver.java</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在链接上携带区域信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析请求</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求中的语言参数</span></span><br><span class="line">        String language = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Locale locale = Locale.getDefault();<span class="comment">//如果没有就使用默认的</span></span><br><span class="line">        <span class="comment">//如果请求的链接携带了国际化的参数</span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(language)) &#123;</span><br><span class="line">            <span class="comment">//zh_CN</span></span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            <span class="comment">//国家、地区</span></span><br><span class="line">           locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件！在我们自己的MvcConofig下添加bean；<ul><li>MyMvcConfig.java</li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="九、整合JDBC"><a href="#九、整合JDBC" class="headerlink" title="九、整合JDBC"></a>九、整合JDBC</h1><h2 id="1-SpringData简介"><a href="#1-SpringData简介" class="headerlink" title="1. SpringData简介"></a>1. SpringData简介</h2><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p>Sping Data 官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></p><p>数据库相关的启动器 ：可以参考官方文档：</p><p><a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter</a></p><h2 id="2-整合JDBC"><a href="#2-整合JDBC" class="headerlink" title="2. 整合JDBC"></a>2. 整合JDBC</h2><p>1.创建springboot-data-jdbc模块项目，引入相对应的模块</p><p>2.创建好后，会自动导入jdbc启动器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、编写yaml配置文件连接数据库；</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">lxj521..</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h2 id="3-JDBCTemplate"><a href="#3-JDBCTemplate" class="headerlink" title="3. JDBCTemplate"></a>3. JDBCTemplate</h2><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p><p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p><p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p><p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p><p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><p>测试：</p><p>编写一个Controller，注入 jdbcTemplate，编写测试方法进行访问测试；</p><p>JdbcController.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.events.Event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; userList() &#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list_maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> list_maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;insert into mybatis.user(id,name,pwd) values (6,&#x27;hh&#x27;,&#x27;123456&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;insert ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update mybatis.user set name=?,pwd=? where id=&quot;</span>+id;</span><br><span class="line"></span><br><span class="line">        Object[] objects = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">        objects[<span class="number">0</span>] = <span class="string">&quot;999&quot;</span>;</span><br><span class="line">        objects[<span class="number">1</span>] = <span class="string">&quot;111111&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,objects);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">&quot;delete from mybatis.user where id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="十、整合Druid"><a href="#十、整合Druid" class="headerlink" title="十、整合Druid"></a>十、整合Druid</h1><h2 id="1-Druid简介"><a href="#1-Druid简介" class="headerlink" title="1. Druid简介"></a>1. Druid简介</h2><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p><h2 id="2-DruidDataSource-参数配置详解"><a href="#2-DruidDataSource-参数配置详解" class="headerlink" title="2. DruidDataSource 参数配置详解"></a>2. DruidDataSource 参数配置详解</h2><p>参考文章：<a href="https://blog.csdn.net/baiducheng/article/details/77973225">https://blog.csdn.net/baiducheng/article/details/77973225</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221541.png" alt="image-20200616124518741"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221542.png" alt="image-20200616124536923"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221543.png" alt="image-20200616124604365"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221544.png" alt="image-20200616124641382"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221545.png" alt="image-20200616124658348"></p><h2 id="3-使用步骤"><a href="#3-使用步骤" class="headerlink" title="3. 使用步骤"></a>3. 使用步骤</h2><ol><li>配置数据源</li></ol><ul><li>3.0以上版本需要添加druid启动器</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- druid 启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、切换数据源；之前已经说过 Spring Boot 2.0 以上默认使用 com.zaxxer.hikari.HikariDataSource 数据源，但可以 通过 spring.datasource.type 指定数据源。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">lxj521..</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 自定义数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure><ol start="3"><li>切换成功！既然切换成功，就可以设置数据源连接初始化大小、最大连接数、等待时间、最小连接数 等设置项；可以查看源码</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">lxj521..</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 自定义数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>4、导入Log4j 的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><p>3.0以上版本需要主动配置，否则提示找不到log4j</p><ul><li><p>解决方法：</p><p>在resource下创建 log4j.properties</p><p>在里面配置如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><ul><li>这种只针对控制台输出的，具体别的查询百度</li></ul></li></ul></li></ul><p>5、现在需要程序员自己为 DruidDataSource 绑定全局配置文件中的参数，再添加到容器中，而不再使用 Spring Boot 的自动生成了；我们需要 自己添加 DruidDataSource 组件到容器中，并绑定属性；</p><p>DruidConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">       @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中</span></span><br><span class="line"><span class="comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-配置Druid数据源监控"><a href="#4-配置Druid数据源监控" class="headerlink" title="4. 配置Druid数据源监控"></a>4. 配置Druid数据源监控</h2><p>Druid 数据源具有监控的功能，并提供了一个 web 界面方便用户查看，类似安装 路由器 时，人家也提供了一个默认的 web 页面。</p><p>所以第一步需要设置 Druid 的后台管理页面，比如 登录账号、密码 等；配置后台管理；</p><p>DruidConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       将自定义的 Druid数据源添加到容器中，不再让 Spring Boot 自动创建</span></span><br><span class="line"><span class="comment">       绑定全局配置文件中的 druid 数据源属性到 com.alibaba.druid.pool.DruidDataSource从而让它们生效</span></span><br><span class="line"><span class="comment">       @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)：作用就是将 全局配置文件中</span></span><br><span class="line"><span class="comment">       前缀为 spring.datasource的属性值注入到 com.alibaba.druid.pool.DruidDataSource 的同名参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置 Druid 监控管理后台的Servlet；</span></span><br><span class="line">    <span class="comment">//内置 Servlet 容器时没有web.xml文件，所以使用 Spring Boot 的注册 Servlet 方式</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这些参数可以在 com.alibaba.druid.support.http.StatViewServlet</span></span><br><span class="line">        <span class="comment">// 的父类 com.alibaba.druid.support.http.ResourceServlet 中找到</span></span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>); <span class="comment">//后台管理界面的登录账号</span></span><br><span class="line">        initParams.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123456&quot;</span>); <span class="comment">//后台管理界面的登录密码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台允许谁可以访问</span></span><br><span class="line">        <span class="comment">//initParams.put(&quot;allow&quot;, &quot;localhost&quot;)：表示只有本机可以访问</span></span><br><span class="line">        <span class="comment">//initParams.put(&quot;allow&quot;, &quot;&quot;)：为空或者为null时，表示允许所有访问</span></span><br><span class="line">        initParams.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后台拒绝谁访问</span></span><br><span class="line">        <span class="comment">//initParams.put(&quot;silentcow&quot;, &quot;192.168.127.1&quot;);表示禁止此ip访问</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置初始化参数</span></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置完毕后，我们可以选择访问 ：<a href="http://localhost:8080/druid/login.html">http://localhost:8080/druid/login.html</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221546.png" alt="image-20200616125507846"></p><p>进入之后</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221547.png" alt="image-20200616125549721"></p><h2 id="5-配置-Druid-web-监控-filter-过滤器"><a href="#5-配置-Druid-web-监控-filter-过滤器" class="headerlink" title="5. 配置 Druid web 监控 filter 过滤器"></a><strong>5. 配置 Druid web 监控 filter 过滤器</strong></h2><p>仍然在DruidConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置 Druid 监控 之  web 监控的 filter</span></span><br><span class="line"> <span class="comment">//WebStatFilter：用于配置Web和Druid数据源之间的管理关联监控统计</span></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">     bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">     <span class="comment">//exclusions：设置哪些请求进行过滤排除掉，从而不进行统计</span></span><br><span class="line">     Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">     initParams.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,/druid/*,/jdbc/*&quot;</span>);</span><br><span class="line">     bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//&quot;/*&quot; 表示过滤所有请求</span></span><br><span class="line">     bean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">     <span class="keyword">return</span> bean;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="十一、整合MyBatis"><a href="#十一、整合MyBatis" class="headerlink" title="十一、整合MyBatis"></a>十一、整合MyBatis</h1><p>官方文档：<a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><h2 id="整合测试"><a href="#整合测试" class="headerlink" title="整合测试"></a>整合测试</h2><p>1、导入 MyBatis 所需要的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置数据库连接信息（不变）</p><p>spring:<br>  datasource:<br>    username: root<br>    password: lxj521..<br>    url: jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai<br>    driver-class-name: com.mysql.cj.jdbc.Driver<br>    ## 自定义数据源<br>​    type: com.alibaba.druid.pool.DruidDataSource</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line"><span class="comment">#druid 数据源专有配置</span></span><br><span class="line"><span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line"><span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line"><span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line"><span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p><strong>创建实体类，导入 Lombok！</strong></p><p>User.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建mapper目录以及对应的 Mapper 接口</strong></p><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个注解表示了这是一个 mybatis 的mapper 类：mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserByID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对应的Mapper映射文件</strong></p><p>注意：此xml在resource下创建，如图：(一定要引入)</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221548.png" alt="image-20200616220349790"></p><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">package cn.silentcow.mapper;</span><br><span class="line"></span><br><span class="line">import cn.silentcow.pojo.User;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">//这个注解表示了这是一个 mybatis 的mapper 类：mapper</span><br><span class="line">@Mapper</span><br><span class="line">@Repository</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    List<span class="tag">&lt;<span class="name">User</span>&gt;</span> queryUserList();</span><br><span class="line"></span><br><span class="line">    User queryUserByID(int id);</span><br><span class="line"></span><br><span class="line">    int addUser(User user);</span><br><span class="line"></span><br><span class="line">    int updateUser(User user);</span><br><span class="line"></span><br><span class="line">    int deleteUser(int id);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：<ul><li>一定要在配置问价那种引入</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 整合mybatis</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 别名的包</span></span><br><span class="line"><span class="string">mybatis.type-aliases-package=cn.silentcow.pojo</span></span><br><span class="line"><span class="comment"># mapper 的 地址</span></span><br><span class="line"><span class="string">mybatis.mapper-locations=classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>按照需求进行测试</p><p>UserController.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryUserList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user:users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryUserByID&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        User user = userMapper.queryUserByID(id);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加用户信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.addUser(<span class="keyword">new</span> User(<span class="number">10</span>, <span class="string">&quot;露娜&quot;</span>, <span class="string">&quot;111111&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.updateUser(<span class="keyword">new</span> User(<span class="number">10</span>,<span class="string">&quot;貂蝉&quot;</span>,<span class="string">&quot;333&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除用户信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.deleteUser(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十二、SpringSecurity"><a href="#十二、SpringSecurity" class="headerlink" title="十二、SpringSecurity"></a>十二、SpringSecurity</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p><p>市面上存在比较有名的：Shiro，Spring Security ！</p><p>Spring Security是一个功能强大且高度可定制的身份验证和访问控制框架。它实际上是保护基于spring的应用程序的标准。</p><p>Spring Security是一个框架，侧重于为Java应用程序提供身份验证和授权。与所有Spring项目一样，Spring安全性的真正强大之处在于它可以轻松地扩展以满足定制需求</p><p>Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。</p><p>用户认证方面，Spring Security 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID 和 LDAP 等。在用户授权方面，Spring Security 提供了基于角色的访问控制和访问控制列表（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。</p><h2 id="2-认识SpringSecurity"><a href="#2-认识SpringSecurity" class="headerlink" title="2. 认识SpringSecurity"></a>2. 认识SpringSecurity</h2><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。</p><p><strong>“认证”（Authentication）</strong></p><p>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</p><p>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</p><p> <strong>“授权” （Authorization）</strong></p><p>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，几乎任何内容）的完全权限。</p><p>这个概念是通用的，而不是只在Spring Security 中存在。</p><h2 id="3-认证和授权"><a href="#3-认证和授权" class="headerlink" title="3. 认证和授权"></a>3. 认证和授权</h2><p>1、引入 Spring Security 模块</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写 Spring Security 配置类</p><p>参考官网：<a href="https://spring.io/projects/spring-security5">https://spring.io/projects/spring-security5</a></p><p>查看我们自己项目中的版本，找到对应的帮助文档：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编写基础配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">importorg.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line">importorg.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line">importorg.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、定制请求的授权规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">// 定制请求的授权规则</span></span><br><span class="line">   <span class="comment">// 首页所有人可以访问</span></span><br><span class="line">   http.authorizeRequests().antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">  .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">  .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">  .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</p><p>6、在configure()方法中加入以下配置，开启自动配置的登录功能！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启自动配置的登录功能</span></span><br><span class="line"><span class="comment">// /login 请求来到登录页</span></span><br><span class="line"><span class="comment">// /login?error 重定向到这里表示登录失败</span></span><br><span class="line">http.formLogin();</span><br></pre></td></tr></table></figure><p>7、测试一下：发现，没有权限的时候，会跳转到登录的页面！</p><p>8、查看刚才登录页的注释信息；</p><p>我们可以定义认证规则，重写configure(AuthenticationManagerBuilder auth)方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码格式：PasswordEncoder</span></span><br><span class="line">    <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">    auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">            .withUser(<span class="string">&quot;silentcow&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、测试，我们可以使用这些账号登录进行测试！发现会报错！</p><p>There is no PasswordEncoder mapped for the id “null”</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221549.png" alt="image-20200617234417445"></p><p>10、原因，我们要将前端传过来的密码进行某种方式加密，否则就无法登录，修改代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义认证规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> throwsException </span>&#123;</span><br><span class="line">   <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">   <span class="comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span></span><br><span class="line">   <span class="comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span></span><br><span class="line">   <span class="comment">//spring security 官方推荐的是使用bcrypt加密方式。</span></span><br><span class="line">   auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">            .withUser(<span class="string">&quot;silentcow&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11、测试，发现，登录成功，并且每个角色只能访问自己认证下的规则！</p><h2 id="4-权限控制和注销"><a href="#4-权限控制和注销" class="headerlink" title="4. 权限控制和注销"></a>4. 权限控制和注销</h2><p>1、开启自动配置的注销的功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//....</span></span><br><span class="line">   <span class="comment">//开启自动配置的注销的功能</span></span><br><span class="line">      <span class="comment">// /logout 注销请求</span></span><br><span class="line">   http.logout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、我们在前端，增加一个注销的按钮，index.html 导航栏中</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、我们可以去测试一下，登录成功后点击注销，发现注销完毕会跳转到登录页面！</p><p>4、但是，我们想让他注销成功后，依旧可以跳转到首页，该怎么处理呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="需求2："><a href="#需求2：" class="headerlink" title="需求2："></a><strong>需求</strong>2：</h3><p>用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如kuangshen这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！这个就是真实的网站情况了！该如何做呢？</p><p>我们需要结合thymeleaf中的一些功能</p><p>sec：authorize=”isAuthenticated()”:是否认证登录！来显示不同的页面</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf与Spring Security整合的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改我们的 前端页面</p><ul><li>导入命名空间</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xmlns:sec=&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span><br></pre></td></tr></table></figure><ul><li>修改导航栏，增加认证判断</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--如果未登录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--如果已登录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          用户名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          角色：<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;principal.authorities&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p>如果<strong>注销404</strong>了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加 <code>http.csrf().disable();</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.csrf().disable();<span class="comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="5-角色功能块认证"><a href="#5-角色功能块认证" class="headerlink" title="5. 角色功能块认证"></a>5. 角色功能块认证</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--菜单根据用户的角色动态的实现--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- sec:authorize=&quot;hasRole(&#x27;vip1&#x27;)&quot; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-记住我"><a href="#6-记住我" class="headerlink" title="6. 记住我"></a>6. 记住我</h2><p>现在的情况，我们只要登录之后，关闭浏览器，再登录，就会让我们重新登录，但是很多网站的情况，就是有一个记住密码的功能，这个该如何实现呢？很简单</p><p>1、开启记住我功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定制请求的授权规则</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//。。。。。。。。。。。</span></span><br><span class="line">   <span class="comment">//记住我</span></span><br><span class="line">   http.rememberMe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次启动项目测试一下，发现登录页多了一个记住我功能，我们登录之后关闭 浏览器，然后重新打开浏览器访问，发现用户依旧存在</p><p>查看浏览器的cookie</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221550.png" alt="image-20200618014527988"></p><p>点击注销的时候，可以发现，spring security 自动删除了这个 cookie</p><p><strong>结论</strong>：登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以免登录了。如果点击注销，则会删除这个cookie</p><h2 id="7-定制登录页"><a href="#7-定制登录页" class="headerlink" title="7. 定制登录页"></a>7. 定制登录页</h2><p>现在这个登录页面都是spring security 默认的，怎么样可以使用我们自己写的Login界面呢？</p><p>1、在刚才的登录页配置后面指定 loginpage</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.formLogin().loginPage(&quot;&#x2F;toLogin&quot;);</span><br></pre></td></tr></table></figure><p>2、然后前端也需要指向我们自己定义的 login请求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a class&#x3D;&quot;item&quot; th:href&#x3D;&quot;@&#123;&#x2F;toLogin&#125;&quot;&gt;</span><br><span class="line">   &lt;i class&#x3D;&quot;address card icon&quot;&gt;&lt;&#x2F;i&gt; 登录</span><br><span class="line">&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>3、我们登录，需要将这些信息发送到哪里，我们也需要配置，login.html 配置提交请求及方式，方式必须为post:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;user icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;lock icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui blue submit button&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、这个请求提交上来，我们还需要验证处理，怎么做呢？我们可以查看formLogin()方法的源码！我们配置接收登录的用户名和密码的参数！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.formLogin()</span><br><span class="line">  .usernameParameter(&quot;username&quot;)</span><br><span class="line">  .passwordParameter(&quot;password&quot;)</span><br><span class="line">  .loginPage(&quot;&#x2F;toLogin&quot;)</span><br><span class="line">  .loginProcessingUrl(&quot;&#x2F;login&quot;); &#x2F;&#x2F; 登陆表单提交请求</span><br></pre></td></tr></table></figure><p>5、在登录页增加记住我的多选框</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;remember&quot;&gt; 记住我</span><br></pre></td></tr></table></figure><p>6、后端验证处理！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;定制记住我的参数！</span><br><span class="line">http.rememberMe().rememberMeParameter(&quot;remember&quot;);</span><br></pre></td></tr></table></figure><h2 id="完整配置代码"><a href="#完整配置代码" class="headerlink" title="* 完整配置代码"></a>* 完整配置代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启WebSecurity模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首页所有人都可以访问，功能页只有对应有权限的人才能访问</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求授权的规则</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有权限默认会到登录页面，需要开启登录的页面</span></span><br><span class="line">        <span class="comment">//      /login</span></span><br><span class="line">        <span class="comment">//定制登录页面 loginPage(&quot;/toLogin&quot;)</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).usernameParameter(<span class="string">&quot;user&quot;</span>).passwordParameter(<span class="string">&quot;pwd&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注销. 开启注销功能，跳转到首页</span></span><br><span class="line">        http.csrf().disable();<span class="comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交logout请求</span></span><br><span class="line">        http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启记住我功能，cookie，默认保存两周,自定义前端接收的参数</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义认证规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编码格式：PasswordEncoder</span></span><br><span class="line">        <span class="comment">//在内存中定义，也可以在jdbc中去拿....</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                .withUser(<span class="string">&quot;silentcow&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123456&quot;</span>)).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十三、shiro"><a href="#十三、shiro" class="headerlink" title="十三、shiro"></a>十三、shiro</h1><h2 id="1-简介："><a href="#1-简介：" class="headerlink" title="1.简介："></a>1.简介：</h2><p>shiro官网：<a href="http://shiro.apache.org/">http://shiro.apache.org/</a></p><p>官方介绍：<a href="http://shiro.apache.org/introduction.html">http://shiro.apache.org/introduction.html</a></p><p>Apache Shiro是一个强大且易用的<strong>Java安全框架</strong>,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p><p>可以使用Apache Shiro进行以下操作：</p><ul><li>验证用户身份以验证其身份</li><li>对用户执行访问控制，例如：<ul><li>确定是否为用户分配了特定的安全角色</li><li>确定是否允许用户做某事</li></ul></li><li>即使在没有Web或EJB容器的情况下，也可以在任何环境中使用Session API。</li><li>在身份验证，访问控制或会话的生存期内对事件做出反应。</li><li>汇总1个或更多用户安全数据的数据源，并将其全部显示为单个复合用户“视图”。</li><li>启用单点登录（SSO）功能</li><li>启用“记住我”服务以进行用户关联，而无需登录<br>…<br>等等-所有这些都集成到一个易于使用的统一API中。</li></ul><p><img src= "/img/loading.gif" data-lazy-src="http://shiro.apache.org/assets/images/ShiroFeatures.png" alt="img"></p><p>Shiro以Shiro开发团队所谓的“应用程序安全性的四个基石”为目标-身份验证，授权，会话管理和密码学：</p><ul><li><strong>身份验证：</strong>有时称为“登录”，这是证明用户是他们所说的身份的行为。</li><li><strong>授权：</strong>访问控制的过程，即确定“谁”有权访问“什么”。</li><li><strong>会话管理：</strong>即使在非Web或EJB应用程序中，也可以管理用户特定的会话。</li><li><strong>密码术：</strong>使用密码算法保持数据安全，同时仍然易于使用。</li></ul><p>在不同的应用程序环境中，还具有其他功能来支持和加强这些问题，尤其是：</p><ul><li>Web支持：Shiro的Web支持API可帮助轻松保护Web应用程序的安全。</li><li>缓存：缓存是Apache Shiro API的第一层公民，可确保安全操作保持快速有效。</li><li>并发性：Apache Shiro的并发功能支持多线程应用程序。</li><li>测试：测试支持可以帮助您编写单元测试和集成测试，并确保您的代码将按预期进行保护。</li><li>“运行方式”：一种功能，允许用户采用其他用户的身份（如果允许），有时在管理方案中很有用。</li><li>“记住我”：在整个会话中记住用户的身份，因此他们只需要在必要时登录。</li></ul><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2. 快速入门"></a>2. 快速入门</h2><p>快速入门官方：<a href="https://github.com/apache/shiro/tree/master/samples/quickstart">https://github.com/apache/shiro/tree/master/samples/quickstart</a></p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><ul><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m %n</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># General Apache libraries</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="meta">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default Shiro logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro</span>=<span class="string">INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable verbose logging</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="string">WARN</span></span><br><span class="line"><span class="meta">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span>=<span class="string">WARN</span></span><br></pre></td></tr></table></figure></li><li><p>shiro.ini</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span></span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span></span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span></span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span></span><br><span class="line"><span class="comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span></span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure></li></ul></li><li><p>HelloWorld</p></li></ol><hr><h2 id="3-shiro中Subject分析"><a href="#3-shiro中Subject分析" class="headerlink" title="3. shiro中Subject分析"></a>3. shiro中Subject分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前用户对象 Subject</span></span><br><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过当前用户拿到Session</span></span><br><span class="line">Session session = currentUser.getSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前用户是否被认证</span></span><br><span class="line">currentUser.isAuthenticated()</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//获得当前用户的认证</span></span><br><span class="line">currentUser.getPrincipal()</span><br><span class="line"></span><br><span class="line"> <span class="comment">//查询当前角色是否拥有什么角色</span></span><br><span class="line"> currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//获得当前用户的权限</span></span><br><span class="line"> currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//注销</span></span><br><span class="line"> currentUser.logout();</span><br></pre></td></tr></table></figure><p>4.Shiro架构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Subject : 当前用户</span><br><span class="line">SecurityManage : 管理所有用户</span><br><span class="line">Realm : 连接数据</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221551.png" alt="image-20200618154302437"></p><h2 id="4-shiro整合spring"><a href="#4-shiro整合spring" class="headerlink" title="4.shiro整合spring"></a>4.shiro整合spring</h2><p>1.导入jar包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shiro-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.编写配置类</p><ul><li><p>先编写Realm对象            <code>授权和认证</code></p><p>UserRealm.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的 UserRealm       extends AuthorizingRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行啦=&gt;授权doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行啦=&gt;认证doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再编写总的配置ShiroConfig.java</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean            第3步</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultSecurityManager defaultSecurityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager         第2步</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">// 关联 UserRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 realm 对象，需要自定义类        第1步</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userRealm&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-shiro实现登录拦截"><a href="#5-shiro实现登录拦截" class="headerlink" title="5. shiro实现登录拦截"></a>5. shiro实现登录拦截</h2><p>在总配置里面设置登录拦截</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加shiro的内置过滤器</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * anno:无需认证就可以访问</span></span><br><span class="line"><span class="comment"> * authc : 必须认证了才能访问</span></span><br><span class="line"><span class="comment"> * user : 必须拥有  记住我  功能才能用</span></span><br><span class="line"><span class="comment"> * perms : 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment"> * role : 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置登录拦截</span></span><br><span class="line">Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置登录页面</span></span><br><span class="line">bean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>测试</p><ul><li><p>创建一个登录页面</p><p>login.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当用户没有权限进入某个页面时，跳转到登录页面</p><p>在controller里设置跳转登录页面</p><p>MyController.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="6-shiro实现登录认证"><a href="#6-shiro实现登录认证" class="headerlink" title="6. shiro实现登录认证"></a>6. shiro实现登录认证</h2><ul><li><p>在controller中创建判断登录数据的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password,Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取当前用户</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//封装用户的登录数据</span></span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);   <span class="comment">//执行登录方法，如果没有异常就说明OK</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;   <span class="comment">//用户不存在</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;  <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>在login页面中添加报错信息的样式</p><p>login.html</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在Realm配置中 伪造数据 以及判断</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行啦=&gt;认证doGetAuthorizationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//伪造 用户名，密码</span></span><br><span class="line">    String name = <span class="string">&quot;silentcow&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果提取到的用户名不等于 数据库中的 name</span></span><br><span class="line">    <span class="keyword">if</span> (!userToken.getUsername().equals(name)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//抛出异常 UnknownAccountException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码认证 ，shiro</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">&quot;&quot;</span>,password,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="7-shiro整合mybatis"><a href="#7-shiro整合mybatis" class="headerlink" title="7. shiro整合mybatis"></a>7. shiro整合mybatis</h2><p>1.导入依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shiro-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.配置文件：</p><ul><li><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">lxj521..</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 自定义数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></li><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">cn.silentcow.pojo</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure></li></ul><p>3.创建实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.</p><ul><li>UserMapper.java</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Repository</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    public User queryUserByName(String name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>UserMapper.xml</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.silentcow.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name = #&#123;name&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>UserService.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>UserSeriviceImpl.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSeriviceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>5.连接数据库，获取数据库数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行啦=&gt;认证doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">    UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line">    <span class="comment">//连接真实的数据库</span></span><br><span class="line">    User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果提取到的用户名为空</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;   <span class="comment">//没有这个人</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//抛出异常 UnknownAccountException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码认证 ，shiro</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">&quot;&quot;</span>, user.getPwd(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Shiro请求授权实现"><a href="#8-Shiro请求授权实现" class="headerlink" title="8. Shiro请求授权实现"></a>8. Shiro请求授权实现</h2><h2 id="9-Shiro整合thymeleaf"><a href="#9-Shiro整合thymeleaf" class="headerlink" title="9. Shiro整合thymeleaf"></a>9. Shiro整合thymeleaf</h2><h2 id="完整代码："><a href="#完整代码：" class="headerlink" title="* 完整代码："></a>* 完整代码：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221552.png" alt="image-20200619232910260"></p><ul><li><p>ShiroConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> at.pollux.thymeleaf.shiro.dialect.ShiroDialect;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean            第3步</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultSecurityManager defaultSecurityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(defaultSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加shiro的内置过滤器</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * anno:无需认证就可以访问</span></span><br><span class="line"><span class="comment">         * authc : 必须认证了才能访问</span></span><br><span class="line"><span class="comment">         * user : 必须拥有  记住我  功能才能用</span></span><br><span class="line"><span class="comment">         * perms : 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">         * role : 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录拦截</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置登录页面</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置未授权跳转页面</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">&quot;/noauth&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager         第2步</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">// 关联 UserRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 realm 对象，需要自定义类        第1步</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userRealm&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//整合ShiroDialect：用来整合 shiro thymeleaf</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">getShiroDialect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserRealm.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.silentcow.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的 UserRealm       extends AuthorizingRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行啦=&gt;授权doGetAuthorizationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//SimpleAuthorizationInfo</span></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"><span class="comment">//        info.addStringPermission(&quot;user:add&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿到当前登录的这个对象</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User currentUser = (User) subject.getPrincipal();<span class="comment">//拿到User对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置当前用户的权限(从数据库中获取的)</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行啦=&gt;认证doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        UsernamePasswordToken userToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//连接真实的数据库</span></span><br><span class="line">        User user = userService.queryUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果提取到的用户名为空</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;   <span class="comment">//没有这个人</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">//抛出异常 UnknownAccountException</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Subject currentSubject = SecurityUtils.getSubject();</span><br><span class="line">        Session session = currentSubject.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>,user);</span><br><span class="line">        <span class="comment">//密码认证 ，shiro</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, user.getPwd(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MyController.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndex</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello,shiro&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//封装用户的登录数据</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);   <span class="comment">//执行登录方法，如果没有异常就说明OK</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;   <span class="comment">//用户不存在</span></span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/noauth&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">unauthorized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;未经授权，无法访问&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserMapper.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>User.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserSeriviceImpl.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSeriviceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserService.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.silentcow.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name = #&#123;name&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>add.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>update.html</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;update&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>index.html</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> xmlns:th=<span class="string">&quot;http://www.thymeleaf.org&quot;</span></span><br><span class="line">      xmlns:shiro=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span></span><br><span class="line">      xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">      xsi:schemaLocation=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro &quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">&lt;!--从session中判断值--&gt;</span><br><span class="line">&lt;div th:<span class="keyword">if</span>=<span class="string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;a th:href=&quot;@&#123;/toLogin&#125;&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;p th:text=&quot;$&#123;msg&#125;&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;div shiro:hasPermission=<span class="string">&quot;user:add&quot;</span>&gt;</span><br><span class="line">    &lt;a th:href=&quot;@&#123;/user/add&#125;&quot;&gt;add&lt;/a&gt;|</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div shiro:hasPermission=<span class="string">&quot;user:update&quot;</span>&gt;</span><br><span class="line">    &lt;a th:href=&quot;@&#123;/user/update&#125;&quot;&gt;update&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>login.html</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> xmlns:th=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登录&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;p th:text=&quot;$&#123;msg&#125;&quot; style=&quot;color: red;&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;form th:action=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;密码：&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;submit&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">cn.silentcow.pojo</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure></li><li><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">lxj521..</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 自定义数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure></li><li><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.silentcow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-springboot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>shiro-springboot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            Subject : 当前用户</span></span><br><span class="line"><span class="comment">            SecurityManage : 管理所有用户</span></span><br><span class="line"><span class="comment">            Realm : 连接数据</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql 驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- druid 启动器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- shiro-spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- thymeleaf - shiro 整合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mybatis下的user表</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221553.png" alt="image-20200619233536190"></p></li></ul><hr><h1 id="十四、Swagger"><a href="#十四、Swagger" class="headerlink" title="十四、Swagger"></a>十四、Swagger</h1><h2 id="1-简介：-1"><a href="#1-简介：-1" class="headerlink" title="1. 简介："></a>1. 简介：</h2><p><strong>前后端分离</strong></p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li><li>前后端通过API进行交互</li><li>前后端相对独立且松耦合</li></ul><p><strong>产生的问题</strong></p><ul><li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li></ul><p><strong>解决方案</strong></p><ul><li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li></ul><p><strong>Swagger</strong></p><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 =&gt; <strong>API 文档 与API 定义同步更新</strong></li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><hr><h2 id="2-SpringBoot集成Swagger"><a href="#2-SpringBoot集成Swagger" class="headerlink" title="2. SpringBoot集成Swagger"></a>2. SpringBoot集成Swagger</h2><p><strong>SpringBoot集成Swagger</strong> =&gt; <strong>springfox</strong>，两个jar包</p><ul><li><strong>Springfox-swagger2</strong></li><li>swagger-springmvc</li></ul><p><strong><code>步骤：</code></strong></p><p>1、新建一个SpringBoot-web项目</p><p>2、添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、编写HelloController，测试确保运行成功！</p><p>4、要使用Swagger，我们需要编写一个配置类-SwaggerConfig来配置 Swagger</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">// 开启Swagger2的自动配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面；</p><h2 id="3-配置Swagger"><a href="#3-配置Swagger" class="headerlink" title="3. 配置Swagger"></a>3. 配置Swagger</h2><p>1、Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean &#x2F;&#x2F;配置docket以配置Swagger具体参数</span><br><span class="line">public Docket docket() &#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、可以通过apiInfo()属性配置文档信息</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;配置文档信息</span><br><span class="line">private ApiInfo apiInfo() &#123;</span><br><span class="line">   Contact contact &#x3D; new Contact(&quot;联系人名字&quot;, &quot;http:&#x2F;&#x2F;xxx.xxx.com&#x2F;联系人访问链接&quot;, &quot;联系人邮箱&quot;);</span><br><span class="line">   return new ApiInfo(</span><br><span class="line">           &quot;Swagger学习&quot;, &#x2F;&#x2F; 标题</span><br><span class="line">           &quot;学习演示如何配置Swagger&quot;, &#x2F;&#x2F; 描述</span><br><span class="line">           &quot;v1.0&quot;, &#x2F;&#x2F; 版本</span><br><span class="line">           &quot;http:&#x2F;&#x2F;terms.service.url&#x2F;组织链接&quot;, &#x2F;&#x2F; 组织链接</span><br><span class="line">           contact, &#x2F;&#x2F; 联系人信息</span><br><span class="line">           &quot;Apach 2.0 许可&quot;, &#x2F;&#x2F; 许可</span><br><span class="line">           &quot;许可链接&quot;, &#x2F;&#x2F; 许可连接</span><br><span class="line">           new ArrayList&lt;&gt;()&#x2F;&#x2F; 扩展</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、Docket 实例关联上 apiInfo()</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket() &#123;</span><br><span class="line">   return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、重启项目，访问测试 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>  </p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221554.png" alt="image-20200620155634034"></p><p><strong>完整代码</strong></p><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span>      <span class="comment">//只要加了 @Configuration ，就会配置到配置中，等价与 @Component</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>   <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置了 Swagger 的 Docket 的bean示例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Swagger信息=apiInfo</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;silentcow&quot;</span>, <span class="string">&quot;https://blog.csdn.net/weixin_46697202&quot;</span>, <span class="string">&quot;silentcow@silentcow.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;silentcow的API文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;把声明浪费在美好的事务上&quot;</span>,</span><br><span class="line">                <span class="string">&quot;v9.9&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://blog.csdn.net/weixin_46697202&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://blog.csdn.net/weixin_46697202&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Swagger配置扫描接口"><a href="#4-Swagger配置扫描接口" class="headerlink" title="4. Swagger配置扫描接口"></a>4. Swagger配置扫描接口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">any() &#x2F;&#x2F; 任何请求都扫描</span><br><span class="line">none() &#x2F;&#x2F; 任何请求都不扫描</span><br><span class="line">regex(final String pathRegex) &#x2F;&#x2F; 通过正则表达式控制</span><br><span class="line">ant(final String antPattern) &#x2F;&#x2F; 通过ant()控制</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">//RequestHandlerSelectors :配置要扫描接口的方式\</span></span><br><span class="line">                <span class="comment">// basePackage :指定要扫描的包</span></span><br><span class="line">                <span class="comment">//any : 扫描全部</span></span><br><span class="line">                <span class="comment">//none : 不扫描</span></span><br><span class="line">                <span class="comment">//withClassAnnotation : 扫描类上的注解，参数是一个注解的反射对象</span></span><br><span class="line">                <span class="comment">//withMethodAnnotation : 扫描方法上的注解</span></span><br><span class="line">            <span class="comment">//.apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.silentcow.controller&quot;</span>))</span><br><span class="line">            <span class="comment">//paths : 过滤什么路径</span></span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">&quot;/silentcow/**&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置扫描过滤"><a href="#配置扫描过滤" class="headerlink" title="配置扫描过滤"></a>配置扫描过滤</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;paths : 过滤什么路径</span><br><span class="line">            .paths(PathSelectors.ant(&quot;&#x2F;silentcow&#x2F;**&quot;))</span><br></pre></td></tr></table></figure><h2 id="5-配置是否启动Swagger"><a href="#5-配置是否启动Swagger" class="headerlink" title="5. 配置是否启动Swagger"></a>5. 配置是否启动Swagger</h2><p>enable是否启动swagger，如果为false，则swagger不能在浏览器中访问</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置了 Swagger 的 Docket 的bean示例</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">        </span><br><span class="line">            .enable(<span class="keyword">false</span>)  <span class="comment">//enable是否启动swagger，如果为false，则swagger不能在浏览器中访问</span></span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.silentcow.controller&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-根据生产环境，决定是否启动Swagger"><a href="#6-根据生产环境，决定是否启动Swagger" class="headerlink" title="6. 根据生产环境，决定是否启动Swagger"></a>6. 根据生产环境，决定是否启动Swagger</h2><p>希望Swagger在生产环境中使用，在发布的时候不适用</p><ul><li>判断是不是生产环境        flag = false</li><li>注入enable (flag)</li></ul><p>application-dev.properties</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port&#x3D;8081</span><br></pre></td></tr></table></figure><p>application-pro.properties</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port&#x3D;8082</span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(   Environment environment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置要显示的Swagger环境</span></span><br><span class="line">    Profiles profiles = Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">//通过  environment.acceptsProfiles</span></span><br><span class="line">    <span class="comment">// 判断当前是否处于该环境</span></span><br><span class="line">    <span class="comment">// 通过 enable() 接收此参数判断是否要显示</span></span><br><span class="line">    <span class="keyword">boolean</span> b = environment.acceptsProfiles(profiles);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .enable(b)  <span class="comment">//enable是否启动swagger，如果为false，则swagger不能在浏览器中访问</span></span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.silentcow.controller&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-配置API分组"><a href="#7-配置API分组" class="headerlink" title="7. 配置API分组"></a>7. 配置API分组</h2><p>如果没有配置分组，默认是default。通过**groupName()**方法即可配置分组：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">      .groupName(<span class="string">&quot;hello&quot;</span>) <span class="comment">// 配置分组</span></span><br><span class="line">       <span class="comment">// 省略配置....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何配置多个分组？<strong>配置多个分组</strong>只需要配置多个docket即可：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> newDocket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> newDocket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> newDocket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221555.png" alt="image-20200620205217476"></p><h2 id="8-实体配置"><a href="#8-实体配置" class="headerlink" title="8.实体配置"></a>8.实体配置</h2><p>1、新建一个实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户实体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String username;</span><br><span class="line">   <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、只要这个实体在<strong>请求接口</strong>的返回值上（即使是泛型），都能映射到实体项中：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、重启查看测试</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221556.png" alt="image-20200620212820485"></p><p><strong>注：</strong>并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的。</p><p>@<strong>ApiModel**</strong>为类添加注释**</p><p>@<strong>ApiModelProperty**</strong>为类属性添加注释**</p><h2 id="9-常用注解"><a href="#9-常用注解" class="headerlink" title="9. 常用注解"></a>9. 常用注解</h2><p>Swagger的所有注解定义在io.swagger.annotations包下</p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags = “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value = “xxx属性说明”,hidden = true)</td><td>作用在类方法和属性上，hidden设置为true可以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似@ApiModelProperty</td></tr></tbody></table><p>我们也可以给请求的接口配置一些注释</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ApiOperation(&quot;SilentCow的接口&quot;)</span><br><span class="line">@PostMapping(&quot;&#x2F;silentcow&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String kuang(@ApiParam(&quot;这个名字会被返回&quot;)String username)&#123;</span><br><span class="line">   return username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，可以给一些比较难理解的属性或者接口，增加一些配置信息，让人更容易阅读！</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1.我们可以通过Swager给一些比较难理解的属性或者接口，增加注释信息</p><p>2.接口文档实时更新</p><p>3.可以在线测试</p><p>Swagger是一个优秀的工具，现在几乎所有大公司都有使用它</p><p>【注意点】在正式发布的时候，关闭Swagger！！！处于安全考虑，而且节省运行的内存。</p><hr><h1 id="十五、异步、定时、邮件任务"><a href="#十五、异步、定时、邮件任务" class="headerlink" title="十五、异步、定时、邮件任务"></a>十五、异步、定时、邮件任务</h1><h2 id="1-异步"><a href="#1-异步" class="headerlink" title="1. 异步"></a>1. 异步</h2><p>1、创建一个service包</p><p>2、创建一个类AsyncService</p><p>异步处理还是非常常用的，比如我们在网站上发送邮件，后台会去发送邮件，此时前台会造成响应不动，直到邮件发送完毕，响应才会成功，所以我们一般会采用多线程的方式去处理这些任务。</p><p>编写方法，假装正在处理数据，使用线程设置一些延时，模拟同步等待的情况；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务执行中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编写controller包</p><p>4、编写AsyncController类</p><p>我们去写一个Controller测试一下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       asyncService.hello();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、访问<a href="http://localhost:8080/hello%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%EF%BC%8C3%E7%A7%92%E5%90%8E%E5%87%BA%E7%8E%B0success%EF%BC%8C%E8%BF%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%AD%89%E5%BE%85%E7%9A%84%E6%83%85%E5%86%B5%E3%80%82">http://localhost:8080/hello进行测试，3秒后出现success，这是同步等待的情况。</a></p><p><strong>问题：</strong>我们如果想让用户直接得到消息，就在后台使用多线程的方式进行处理即可，但是每次都需要自己手动去编写多线程的实现的话，太麻烦了，我们只需要用一个简单的办法，在我们的方法上加一个简单的注解即可，如下：</p><p>6、给hello方法添加@Async注解；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;告诉Spring这是一个异步方法</span><br><span class="line">@Async</span><br><span class="line">public void hello()&#123;</span><br><span class="line">   try &#123;</span><br><span class="line">       Thread.sleep(3000);</span><br><span class="line">  &#125; catch (InterruptedException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">   System.out.println(&quot;业务进行中....&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot就会自己开一个线程池，进行调用！但是要让这个注解生效，我们还需要在主程序上添加一个注解@EnableAsync ，开启异步注解功能；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EnableAsync &#x2F;&#x2F;开启异步注解功能</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class SpringbootTaskApplication &#123;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、重启测试，网页瞬间响应，后台代码依旧执行！</p><hr><h2 id="2-邮件发送"><a href="#2-邮件发送" class="headerlink" title="2. 邮件发送"></a>2. 邮件发送</h2><p>邮件发送，在我们的日常开发中，也非常的多，Springboot也帮我们做了支持</p><ul><li>邮件发送需要引入spring-boot-start-mail</li><li>SpringBoot 自动配置MailSenderAutoConfiguration</li><li>定义MailProperties内容，配置在application.yml中</li><li>自动装配JavaMailSender</li><li>测试邮件发送</li></ul><p>1、引入pom依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>2.配置文件：application.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 邮箱地址</span></span><br><span class="line"><span class="meta">spring.mail.username</span>=<span class="string">silentcow@foxmail.com</span></span><br><span class="line"><span class="comment"># 授权码，      获取授权码：在QQ邮箱中的设置-&gt;账户-&gt;开启pop3和smtp服务</span></span><br><span class="line"><span class="meta">spring.mail.password</span>=<span class="string">rgudujqrcyssbjjh</span></span><br><span class="line"><span class="meta">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment"># 开启加密验证,qq需要配置ssl</span></span><br><span class="line"><span class="meta">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>3.测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot09RenwuApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个简单的邮件任务</span></span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line"></span><br><span class="line">        message.setSubject(<span class="string">&quot;胖轩轩你好呀&quot;</span>);</span><br><span class="line">        message.setText(<span class="string">&quot;洁臭臭你好呀&quot;</span>);</span><br><span class="line"></span><br><span class="line">        message.setTo(<span class="string">&quot;silentcow@foxmail.com&quot;</span>);</span><br><span class="line">        message.setFrom(<span class="string">&quot;silentcow@foxmail.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        <span class="comment">//一个复杂的邮件</span></span><br><span class="line">        MimeMessage mimeMessage = mailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">//组装</span></span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正文</span></span><br><span class="line">        helper.setSubject(<span class="string">&quot;胖轩轩你好呀呀&quot;</span>);</span><br><span class="line">        helper.setText(<span class="string">&quot;&lt;p style=&#x27;color:blue&#x27;&gt;臭洁洁你好呀呀&lt;/p&gt;&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//附件</span></span><br><span class="line">        helper.addAttachment(<span class="string">&quot;1.jpg&quot;</span>, <span class="keyword">new</span> File(<span class="string">&quot;D:\\QQ\\1.jpg&quot;</span>));</span><br><span class="line"></span><br><span class="line">        helper.setTo(<span class="string">&quot;silentcow@foxmail.com&quot;</span>);</span><br><span class="line">        helper.setFrom(<span class="string">&quot;silentcow@foxmail.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>也可以将以上封装成一个方法，以后调用即可</p><p>简单的封装，具体还要按照实际去封装</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subject 主题名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setTo    发送到哪个地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> setFrom   来自哪个地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span>  silentcow</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoadsFZ</span><span class="params">(String subject,String setTo,String setFrom)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个简单的邮件任务</span></span><br><span class="line">    SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line"></span><br><span class="line">    message.setSubject(subject);</span><br><span class="line">    message.setText(<span class="string">&quot;洁臭臭你好呀&quot;</span>);</span><br><span class="line"></span><br><span class="line">    message.setTo(setTo);</span><br><span class="line">    message.setFrom(setFrom);</span><br><span class="line"></span><br><span class="line">    mailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-定时任务"><a href="#3-定时任务" class="headerlink" title="3. 定时任务"></a>3. 定时任务</h2><p>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨的时候，分析一次前一天的日志信息，Spring为我们提供了异步执行任务调度的方式，提供了两个接口。</p><ul><li>TaskExecutor接口</li><li>TaskScheduler接口</li></ul><p>两个注解：</p><ul><li>@EnableScheduling</li><li>@Scheduled</li></ul><p><strong>测试步骤：</strong></p><p>1、创建一个ScheduledService</p><p>我们里面存在一个hello方法，他需要定时执行，怎么处理呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledService</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//秒   分   时     日   月   周几</span></span><br><span class="line">   <span class="comment">//0 * * * * MON-FRI</span></span><br><span class="line">   <span class="comment">//注意cron表达式的用法；</span></span><br><span class="line">   <span class="meta">@Scheduled(cron = &quot;0 * * * * 0-7&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;hello.....&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、这里写完定时任务之后，我们需要在主程序上增加@EnableScheduling 开启定时任务功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启基于注解的定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootTaskApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       SpringApplication.run(SpringbootTaskApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cron表达式"><a href="#Cron表达式" class="headerlink" title="* Cron表达式"></a>* Cron表达式</h2><p><strong>Cron表达式生成器</strong>：<a href="http://www.bejson.com/othertools/cron/">http://www.bejson.com/othertools/cron/</a></p><p><strong>常用的表达式</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）0&#x2F;2 * * * * ?   表示每2秒 执行任务</span><br><span class="line">（1）0 0&#x2F;2 * * * ?   表示每2分钟 执行任务</span><br><span class="line">（1）0 0 2 1 * ?   表示在每月的1日的凌晨2点调整任务</span><br><span class="line">（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</span><br><span class="line">（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</span><br><span class="line">（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点</span><br><span class="line">（5）0 0&#x2F;30 9-17 * * ?   朝九晚五工作时间内每半小时</span><br><span class="line">（6）0 0 12 ? * WED   表示每个星期三中午12点</span><br><span class="line">（7）0 0 12 * * ?   每天中午12点触发</span><br><span class="line">（8）0 15 10 ? * *   每天上午10:15触发</span><br><span class="line">（9）0 15 10 * * ?     每天上午10:15触发</span><br><span class="line">（10）0 15 10 * * ?   每天上午10:15触发</span><br><span class="line">（11）0 15 10 * * ? 2005   2005年的每天上午10:15触发</span><br><span class="line">（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发</span><br><span class="line">（13）0 0&#x2F;5 14 * * ?   在每天下午2点到下午2:55期间的每5分钟触发</span><br><span class="line">（14）0 0&#x2F;5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</span><br><span class="line">（15）0 0-5 14 * * ?   在每天下午2点到下午2:05期间的每1分钟触发</span><br><span class="line">（16）0 10,44 14 ? 3 WED   每年三月的星期三的下午2:10和2:44触发</span><br><span class="line">（17）0 15 10 ? * MON-FRI   周一至周五的上午10:15触发</span><br><span class="line">（18）0 15 10 15 * ?   每月15日上午10:15触发</span><br><span class="line">（19）0 15 10 L * ?   每月最后一日的上午10:15触发</span><br><span class="line">（20）0 15 10 ? * 6L   每月的最后一个星期五上午10:15触发</span><br><span class="line">（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</span><br><span class="line">（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</span><br></pre></td></tr></table></figure><h1 id="十六、Dubbo和Zookeeper集成"><a href="#十六、Dubbo和Zookeeper集成" class="headerlink" title="十六、Dubbo和Zookeeper集成"></a>十六、Dubbo和Zookeeper集成</h1><h2 id="1-分布式理论"><a href="#1-分布式理论" class="headerlink" title="1. 分布式理论"></a>1. 分布式理论</h2><p><strong>什么是分布式系统？</strong></p><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</p><h2 id="2-Dubbo文档"><a href="#2-Dubbo文档" class="headerlink" title="2. Dubbo文档"></a>2. Dubbo文档</h2><p>随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，急需<strong>一个治理系统</strong>确保架构有条不紊的演进。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221557.png" alt="image-20200621201645226"></p><h2 id="3-单一应用架构"><a href="#3-单一应用架构" class="headerlink" title="3. 单一应用架构"></a>3. 单一应用架构</h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><p><img src= "/img/loading.gif" data-lazy-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshw2ITicetDcFsg41kISOhuyojGB1Z8ics61xtqnicJTXDk7Qw41dkeXK2A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>适用于小型网站，小型管理系统，将所有功能都部署到一个功能里，简单易用。</p><p><strong>缺点：</strong></p><p>1、性能扩展比较难</p><p>2、协同开发问题</p><p>3、不利于升级维护</p><h2 id="4-垂直应用架构"><a href="#4-垂直应用架构" class="headerlink" title="4. 垂直应用架构"></a>4. 垂直应用架构</h2><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><p><img src= "/img/loading.gif" data-lazy-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshG4FicWRMjbfStG0Ojr1H9cL1jQ1SbZ0s7rsbsc7w8f3usmdSJog7pHA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>通过切分业务来实现各个模块独立部署，降低了维护和部署的难度，团队各司其职更易管理，性能扩展也更方便，更有针对性。</p><p>缺点：公用模块无法重复利用，开发性的浪费</p><h2 id="5-分布式服务架构"><a href="#5-分布式服务架构" class="headerlink" title="5. 分布式服务架构"></a>5. 分布式服务架构</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p><p><img src= "/img/loading.gif" data-lazy-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshwIkic8EicmCwYGRibdWohmDazEDhonhTeJfVx0dfBNlW4dGGxvOMOk0Gg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h2 id="6-流动计算架构"><a href="#6-流动计算架构" class="headerlink" title="6. 流动计算架构"></a>6. 流动计算架构</h2><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于<strong>提高机器利用率的资源调度和治理中心</strong>(SOA)[ Service Oriented Architecture]是关键。</p><p><img src= "/img/loading.gif" data-lazy-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshxoCosFhoMzIcbBzjCt6ia9Gr7atHlwNHhL0po4YhyE8WkHXnnpN8Ddg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><h2 id="7-RPC"><a href="#7-RPC" class="headerlink" title="7. RPC"></a>7. RPC</h2><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；</p><p>推荐阅读文章：<a href="https://www.jianshu.com/p/2accc2840a1b">https://www.jianshu.com/p/2accc2840a1b</a></p><p><strong>RPC基本原理</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshVx3xhf4RyUVtia7Tvo4BBs70SFKRonhrPrNsiap2rEAQCn4IWUoS3HZA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p><strong>步骤解析：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221558.png" alt="image-20200621202006440"></p><p>RPC两个核心模块：通讯，序列化</p><h2 id="8-Dubbo"><a href="#8-Dubbo" class="headerlink" title="8. Dubbo *"></a>8. Dubbo *</h2><p>Apache Dubbo |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p>dubbo官网 <a href="http://dubbo.apache.org/zh-cn/index.html">http://dubbo.apache.org/zh-cn/index.html</a></p><p>1.了解Dubbo的特性</p><p>2.查看官方文档</p><p><strong>dubbo基本概念</strong></p><p><img src= "/img/loading.gif" data-lazy-src="http://dubbo.apache.org/img/architecture.png" alt="img"></p><p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><hr><p><strong>调用关系说明</strong></p><p>l 服务容器负责启动，加载，运行服务提供者。</p><p>l 服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>l 服务消费者在启动时，向注册中心订阅自己所需的服务。</p><p>l 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p>l 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>l 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h2 id="9-Dubbo环境搭建"><a href="#9-Dubbo环境搭建" class="headerlink" title="9. Dubbo环境搭建"></a>9. Dubbo环境搭建</h2><p>点进dubbo官方文档，推荐我们使用Zookeeper 注册中心</p><h2 id="10-Window下安装zookeeper"><a href="#10-Window下安装zookeeper" class="headerlink" title="10. Window下安装zookeeper"></a>10. Window下安装zookeeper</h2><p>1.下载zookeeper地址：<a href="https://mirrors.bfsu.edu.cn/apache/zookeeper/stable/%EF%BC%8C%E6%96%B0%E7%89%88%E6%9C%AC%E5%BF%85%E9%A1%BB%E4%B8%8B%E8%BD%BDbin%E4%B8%8B%E7%9A%84%E5%8C%85">https://mirrors.bfsu.edu.cn/apache/zookeeper/stable/，新版本必须下载bin下的包</a></p><p>2.运行/bin/zkServer.cmd ，初次运行会报错，没有zoo.cfg配置文件；</p><p>可能遇到问题：闪退 !</p><p>解决方案：编辑zkServer.cmd文件末尾添加pause 。这样运行出错就不会退出，会提示错误信息，方便找到原因。</p><p><img src= "/img/loading.gif" data-lazy-src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7JJjARRqcZibY4ZPv60renshERcBbh6aAYOxnI1yFCMJ6ia2jsJzW3mIhF9ZUicsOQ2AclNAb2eUCFCg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>3、修改zoo.cfg配置文件</p><p>将conf文件夹下面的zoo_sample.cfg复制一份改名为zoo.cfg即可。</p><p>注意几个重要位置：</p><p>dataDir=./  临时数据存储的目录（可写相对路径）</p><p>clientPort=2181  zookeeper的端口号</p><p>修改完成后再次启动zookeeper</p><hr><h2 id="11-window下安装dubbo-admin"><a href="#11-window下安装dubbo-admin" class="headerlink" title="11. window下安装dubbo-admin"></a>11. window下安装dubbo-admin</h2><p>dubbo本身并不是一个服务软件。它其实就是一个jar包，能够帮你的java程序连接到zookeeper，并利用zookeeper消费、提供服务。</p><p>但是为了让用户更好的管理监控众多的dubbo服务，官方提供了一个可视化的监控程序dubbo-admin，不过这个监控即使不装也不影响使用。</p><p>我们这里来安装一下：</p><p><strong>1、下载dubbo-admin</strong></p><p>地址 ：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a></p><p><strong>2、解压进入目录</strong></p><p>修改 dubbo-admin\src\main\resources \application.properties 指定zookeeper地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port&#x3D;7001</span><br><span class="line">spring.velocity.cache&#x3D;false</span><br><span class="line">spring.velocity.charset&#x3D;UTF-8</span><br><span class="line">spring.velocity.layout-url&#x3D;&#x2F;templates&#x2F;default.vm</span><br><span class="line">spring.messages.fallback-to-system-locale&#x3D;false</span><br><span class="line">spring.messages.basename&#x3D;i18n&#x2F;message</span><br><span class="line">spring.root.password&#x3D;root</span><br><span class="line">spring.guest.password&#x3D;guest</span><br><span class="line"></span><br><span class="line">dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;127.0.0.1:2181</span><br></pre></td></tr></table></figure><p><strong>3、在项目目录下</strong>打包dubbo-admin</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip&#x3D;true</span><br></pre></td></tr></table></figure><p><strong>第一次打包的过程有点慢，需要耐心等待！直到成功！</strong></p><p>4、执行 dubbo-admin\target 下的dubbo-admin-0.0.1-SNAPSHOT.jar</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>【注意：zookeeper的服务一定要打开！】</p><p>执行完毕，我们去访问一下 <a href="http://localhost:7001/">http://localhost:7001/</a> ， 这时候我们需要输入登录账户和密码，我们都是默认的root-root；</p><p>登录成功后，查看界面</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221559.png" alt="image-20200621202558042"></p><h2 id="SpringBoot-Dubbo-zookeeper"><a href="#SpringBoot-Dubbo-zookeeper" class="headerlink" title="* SpringBoot + Dubbo + zookeeper"></a>* SpringBoot + Dubbo + zookeeper</h2><h3 id="1-框架搭建"><a href="#1-框架搭建" class="headerlink" title="1. 框架搭建"></a>1. 框架搭建</h3><p><strong>1. 启动zookeeper ！</strong></p><p><strong>2. IDEA创建一个空项目；</strong></p><p><strong>3.创建一个模块，实现服务提供者：provider-server ， 选择web依赖即可</strong></p><p><strong>4.项目创建完毕，我们写一个服务，比如卖票的服务；</strong></p><p>编写接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《一千零一夜》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.创建一个模块，实现服务消费者：consumer-server ， 选择web依赖即可</strong></p><p><strong>6.项目创建完毕，我们写一个服务，比如用户的服务；</strong></p><p>编写service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//想拿到provider-server提供的票,要去注册中心拿到服务</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求：用户想使用买票的服务</p><h3 id="2-服务提供者"><a href="#2-服务提供者" class="headerlink" title="2. 服务提供者"></a>2. 服务提供者</h3><p><strong>1、将服务提供者注册到注册中心，我们需要整合Dubbo和zookeeper，所以需要导包</strong></p><p><strong>我们从dubbo官网进入github，看下方的帮助文档，找到dubbo-springboot，找到依赖包</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Dubbo Spring Boot Starter --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.dubbo&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;dubbo-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.7.3&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;    </span><br></pre></td></tr></table></figure><p><strong>zookeeper的包我们去maven仓库下载，zkclient；</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.github.sgroschupf&#x2F;zkclient --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.github.sgroschupf&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;zkclient&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;0.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>【新版的坑】zookeeper及其依赖包，解决日志冲突，还需要剔除日志依赖；</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入zookeeper --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.curator&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;curator-framework&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.12.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.curator&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;curator-recipes&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.12.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;3.4.14&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;!--排除这个slf4j-log4j12--&gt;</span><br><span class="line">   &lt;exclusions&gt;</span><br><span class="line">       &lt;exclusion&gt;</span><br><span class="line">           &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;&#x2F;exclusion&gt;</span><br><span class="line">   &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2、在springboot配置文件中配置dubbo相关属性！</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务应用名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider-server</span></span><br><span class="line"><span class="comment"># 注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment"># 哪些服务要被注册</span></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">cn.silentcow.service</span></span><br></pre></td></tr></table></figure><p><strong>3、在service的实现类中配置服务注解，发布服务！注意导包问题</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.service.TicketService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zookeeper：服务注册与发现</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>    <span class="comment">//需使用dubbo下的Service注解</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//使用dubbo后尽量不要用service注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《一千零一夜》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>逻辑理解 ：应用启动起来，dubbo就会扫描指定的包下带有@component注解的服务，将它发布在指定的注册中心中！</strong></p><h3 id="3-服务消费者"><a href="#3-服务消费者" class="headerlink" title="3. 服务消费者"></a>3. 服务消费者</h3><p><strong>1、导入依赖，和之前的依赖一样；</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--dubbo--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dubbo Spring Boot Starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--zookeeper--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、<strong>配置参数</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当前应用名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">consumer-server</span></span><br><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><p><strong>3. 本来正常步骤是需要将服务提供者的接口打包，然后用pom文件导入，我们这里使用简单的方式，直接将服务的接口拿过来，路径必须保证正确，即和服务提供者相同；</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221600.png" alt="image-20200621203322633"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221601.png" alt="image-20200621203350618"></p><p><strong>4. 完善消费者的服务类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>    <span class="comment">//此处不是dubbo下的，      放到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//想拿到provider-server提供的票,要去注册中心拿到服务</span></span><br><span class="line">    <span class="meta">@Reference</span>  <span class="comment">//引用，   Pom坐标，可以定义路径相同的接口名</span></span><br><span class="line">    TicketService ticketService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ticket = ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">&quot;在注册中心拿到=&gt;&quot;</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 测试类编写；</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsumerServerApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.buyTicket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p><strong>1. 开启zookeeper</strong></p><p><strong>2. 打开dubbo-admin实现监控【可以不用做】</strong></p><p><strong>3. 开启服务者</strong></p><p><strong>4. 消费者消费测试，结果：</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221602.png" alt="image-20200621203543645"></p><p><strong>ok , 这就是SpingBoot + dubbo + zookeeper实现分布式开发的应用，其实就是一个服务拆分的思想；</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM之SSM整合</title>
      <link href="/2020/08/06/SSM%E6%95%B4%E5%90%88---%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2020/08/06/SSM%E6%95%B4%E5%90%88---%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>本视频教程来自B站@遇见狂神说，有需要的朋友可以去搜索观看他的视频学习。</p><h2 id="切记："><a href="#切记：" class="headerlink" title="切记："></a>切记：</h2><p>不知道idea的BUG，还是什么原因，当xml配置文件中出现注释的时候，会出现</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221822.png" alt="image-20200609160251923"></p><p>所以，我们目前别在配置文件中有</p><h2 id="数据库环境"><a href="#数据库环境" class="headerlink" title="数据库环境"></a>数据库环境</h2><p>创建一个存放书籍数据的数据库表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE &#96;ssmbuild&#96;;</span><br><span class="line"></span><br><span class="line">USE &#96;ssmbuild&#96;;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;books&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;books&#96; (</span><br><span class="line">&#96;bookID&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;书id&#39;,</span><br><span class="line">&#96;bookName&#96; VARCHAR(100) NOT NULL COMMENT &#39;书名&#39;,</span><br><span class="line">&#96;bookCounts&#96; INT(11) NOT NULL COMMENT &#39;数量&#39;,</span><br><span class="line">&#96;detail&#96; VARCHAR(200) NOT NULL COMMENT &#39;描述&#39;,</span><br><span class="line">KEY &#96;bookID&#96; (&#96;bookID&#96;)</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line">INSERT  INTO &#96;books&#96;(&#96;bookID&#96;,&#96;bookName&#96;,&#96;bookCounts&#96;,&#96;detail&#96;)VALUES </span><br><span class="line">(1,&#39;Java&#39;,1,&#39;从入门到放弃&#39;),</span><br><span class="line">(2,&#39;MySQL&#39;,10,&#39;从删库到跑路&#39;),</span><br><span class="line">(3,&#39;Linux&#39;,5,&#39;从进门到进牢&#39;);</span><br></pre></td></tr></table></figure><h2 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h2><h3 id="1、新建一Maven项目！"><a href="#1、新建一Maven项目！" class="headerlink" title="1、新建一Maven项目！"></a>1、新建一Maven项目！</h3><p>ssmbuild ， 添加web的支持</p><h3 id="2、导入相关的pom依赖！"><a href="#2、导入相关的pom依赖！" class="headerlink" title="2、导入相关的pom依赖！"></a>2、导入相关的pom依赖！</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池:c3p0--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Servlet -  JSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0-alpha-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、Maven资源过滤设置"><a href="#3、Maven资源过滤设置" class="headerlink" title="3、Maven资源过滤设置"></a>3、Maven资源过滤设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--静态资源导出问题：在build中配置resources，来防止我们的资源导出失败--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、建立基本结构和配置框架！"><a href="#4、建立基本结构和配置框架！" class="headerlink" title="4、建立基本结构和配置框架！"></a>4、建立基本结构和配置框架！</h3><ul><li><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221823.png" alt="image-20200609153104219"></li><li>mybatis-config.xml</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>applicationContext.xml</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-Mybatis层编写"><a href="#5-Mybatis层编写" class="headerlink" title="5. Mybatis层编写"></a>5. Mybatis层编写</h3><h4 id="1、数据库配置文件-database-properties"><a href="#1、数据库配置文件-database-properties" class="headerlink" title="1、数据库配置文件 database.properties"></a>1、数据库配置文件 <strong>database.properties</strong></h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">lxj521..</span></span><br></pre></td></tr></table></figure><h4 id="2、IDEA关联数据库"><a href="#2、IDEA关联数据库" class="headerlink" title="2、IDEA关联数据库"></a>2、IDEA关联数据库</h4><h4 id="3、编写MyBatis的核心配置文件"><a href="#3、编写MyBatis的核心配置文件" class="headerlink" title="3、编写MyBatis的核心配置文件"></a>3、编写MyBatis的核心配置文件</h4><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;cn.silentcow.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/silentcow/mapper/BookMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、编写数据库对应的实体类"><a href="#4、编写数据库对应的实体类" class="headerlink" title="4、编写数据库对应的实体类"></a>4、编写数据库对应的实体类</h4><p>cn.silentcow.pojo.Books</p><p>使用lombok插件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、编写Mapper层的-Mapper接口！"><a href="#5、编写Mapper层的-Mapper接口！" class="headerlink" title="5、编写Mapper层的 Mapper接口！"></a>5、编写Mapper层的 Mapper接口！</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookByID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookByID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部的书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBooks</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、编写接口对应的-Mapper-xml-文件。需要导入MyBatis的包；"><a href="#6、编写接口对应的-Mapper-xml-文件。需要导入MyBatis的包；" class="headerlink" title="6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；"></a>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；<img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221824.png" alt="image-20200609153657337"></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.silentcow.mapper.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books (bookName,bookCounts,detail)</span><br><span class="line">        values (#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookByID&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from ssmbuild.books where bookID = #&#123;bookID&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">        where bookID = #&#123;bookID&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookByID&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books where bookID = #&#123;bookID&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBooks&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">        select * from ssmbuild.books;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7、编写Service层的接口和实现类"><a href="#7、编写Service层的接口和实现类" class="headerlink" title="7、编写Service层的接口和实现类"></a>7、编写Service层的接口和实现类</h4><p>接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一本书</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新一本书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> books</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部的书</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221825.png" alt="image-20200609153812785"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service 调用 mapper 层： 组合 mapper</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookByID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookByID(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookByID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookByID(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBooks();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Spring层"><a href="#6-Spring层" class="headerlink" title="6. Spring层"></a>6. Spring层</h3><h4 id="1、配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；"><a href="#1、配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；" class="headerlink" title="1、配置Spring整合MyBatis，我们这里数据源使用c3p0连接池；"></a>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</h4><h4 id="2、我们去编写Spring整合Mybatis的相关的配置文件；"><a href="#2、我们去编写Spring整合Mybatis的相关的配置文件；" class="headerlink" title="2、我们去编写Spring整合Mybatis的相关的配置文件；"></a>2、我们去编写Spring整合Mybatis的相关的配置文件；</h4><p>spring-mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholderlocation=&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span><span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span><span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、Spring整合service层"><a href="#3、Spring整合service层" class="headerlink" title="3、Spring整合service层"></a>3、<strong>Spring整合service层</strong></h4><p>spring-service.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.silentcow.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给哪些方法配置事务--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置事务的传播特性：new propagation --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn.silentcow.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-SpringMVC层"><a href="#7-SpringMVC层" class="headerlink" title="7. SpringMVC层"></a>7. SpringMVC层</h3><h4 id="1、web-xml"><a href="#1、web-xml" class="headerlink" title="1、web.xml"></a>1、<strong>web.xml</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、spring-mvc-xml"><a href="#2、spring-mvc-xml" class="headerlink" title="2、spring-mvc.xml"></a>2、<strong>spring-mvc.xml</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.silentcow.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、-Spring配置整合文件"><a href="#3、-Spring配置整合文件" class="headerlink" title="3、*Spring配置整合文件"></a>3、*<em>Spring配置整合文件</em></h4><p><strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件结束</strong></p><hr><h3 id="8-Controller-和-视图层编写"><a href="#8-Controller-和-视图层编写" class="headerlink" title="8. Controller 和 视图层编写"></a><strong>8. Controller 和 视图层编写</strong></h3><h4 id="1、BookController-类编写-，-方法一：查询全部书籍"><a href="#1、BookController-类编写-，-方法一：查询全部书籍" class="headerlink" title="1、BookController 类编写 ， 方法一：查询全部书籍"></a>1、BookController 类编写 ， 方法一：查询全部书籍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">       List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、编写首页-index-jsp"><a href="#2、编写首页-index-jsp" class="headerlink" title="2、编写首页 index.jsp"></a>2、编写首页 <strong>index.jsp</strong></h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">   &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">       a &#123;</span><br><span class="line">           text-decoration: none;</span><br><span class="line">           color: black;</span><br><span class="line">           font-size: <span class="number">18</span>px;</span><br><span class="line">      &#125;</span><br><span class="line">       h3 &#123;</span><br><span class="line">           width: <span class="number">180</span>px;</span><br><span class="line">           height: <span class="number">38</span>px;</span><br><span class="line">           margin: <span class="number">100</span>px auto;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: <span class="number">38</span>px;</span><br><span class="line">           background: deepskyblue;</span><br><span class="line">           border-radius: <span class="number">4</span>px;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">   &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="3、书籍列表页面-allbook-jsp"><a href="#3、书籍列表页面-allbook-jsp" class="headerlink" title="3、书籍列表页面 allbook.jsp"></a>3、书籍列表页面 <strong>allbook.jsp</strong></h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍展示&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;书籍列表 --- 展示所有书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">                &lt;%--toAddBook--%&gt;</span><br><span class="line">                    &lt;a class=&quot;btn btn-primary&quot; href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;&gt;新增书籍&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">                &lt;%--书籍从数据库中查询出来，从这个List中遍历出来：foreach--%&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.bookID&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.bookName&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.bookCounts&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.detail&#125;&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdate?id=$&#123;book.bookID&#125;&quot;&gt;修改&lt;/a&gt;</span><br><span class="line">                            &amp;nbsp;|&amp;nbsp;</span><br><span class="line">                            &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/book/toDeleteBook/$&#123;book.bookID&#125;&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">                        &lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="4、BookController-类编写-，-方法二：添加书籍"><a href="#4、BookController-类编写-，-方法二：添加书籍" class="headerlink" title="4、BookController 类编写 ， 方法二：添加书籍"></a>4、BookController 类编写 ， 方法二：添加书籍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转到增加书籍页面</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toAddBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加书籍的请求</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;addBook=&gt;&quot;</span> + books);</span><br><span class="line">    bookService.addBook(books);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>; <span class="comment">//重定向到我们的 @RequestMapping(&quot;/allBook&quot;) 请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、添加书籍页面：addBook-jsp"><a href="#5、添加书籍页面：addBook-jsp" class="headerlink" title="5、添加书籍页面：addBook.jsp"></a>5、添加书籍页面：<strong>addBook.jsp</strong></h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">44</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍名称&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍数量&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍描述&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;添加&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="6、BookController-类编写-，-方法三：修改书籍"><a href="#6、BookController-类编写-，-方法三：修改书籍" class="headerlink" title="6、BookController 类编写 ， 方法三：修改书籍"></a>6、BookController 类编写 ， 方法三：修改书籍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转到修改页面</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toUpdate&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdatePaper</span><span class="params">(<span class="keyword">int</span> id, Model model)</span> </span>&#123;</span><br><span class="line">    Books books = bookService.queryBookByID(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;QBook&quot;</span>,books);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改书籍</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(Books books)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;updateBook=&gt;&quot;</span> + books);</span><br><span class="line">    bookService.updateBook(books);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7、修改书籍页面-updateBook-jsp"><a href="#7、修改书籍页面-updateBook-jsp" class="headerlink" title="7、修改书籍页面  updateBook.jsp"></a>7、修改书籍页面  <strong>updateBook.jsp</strong></h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">10</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改书籍&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;修改书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;%--前端传递隐藏域--%&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;bookID&quot;</span> value=<span class="string">&quot;$&#123;QBook.bookID&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍名称&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;$&#123;QBook.bookName&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍数量&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;$&#123;QBook.bookCounts&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label&gt;书籍描述&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;$&#123;QBook.detail&#125;&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="8、BookController-类编写-，-方法四：删除书籍"><a href="#8、BookController-类编写-，-方法四：删除书籍" class="headerlink" title="8、BookController 类编写 ， 方法四：删除书籍"></a>8、BookController 类编写 ， 方法四：删除书籍</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除书籍</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toDeleteBook/&#123;bookID&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toDeleteBook</span><span class="params">(<span class="meta">@PathVariable(&quot;bookID&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    bookService.deleteBookByID(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-项目结构图"><a href="#9-项目结构图" class="headerlink" title="9. 项目结构图"></a><strong>9. 项目结构图</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221826.png" alt="image-20200609155800800"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221827.png" alt="image-20200609155829011"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> SSM整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> SSM整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM之SpringMVC的学习</title>
      <link href="/2020/08/06/SpringMVC/"/>
      <url>/2020/08/06/SpringMVC/</url>
      
        <content type="html"><![CDATA[<p>本视频教程来自B站@遇见狂神说，有需要的朋友可以去搜索观看他的视频学习。</p><h1 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a><strong>1、回顾MVC</strong></h1><h2 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h2><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><h2 id="1-2-Model2时代"><a href="#1-2-Model2时代" class="headerlink" title="1.2 Model2时代"></a>1.2 Model2时代</h2><p><strong><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221808.png" alt="image-20200515103239740"></strong></p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点</p><h2 id="1-3-回顾Servlet"><a href="#1-3-回顾Servlet" class="headerlink" title="1.3 回顾Servlet"></a>1.3 回顾Servlet</h2><ol><li>新建一个Maven工程当做父工程！pom依赖！</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>springmvc-01-servlet<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1-b03<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/jstl --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>建立一个Moudle：springmvc-01 ， 添加Web app的支持！</p></li><li><p>编写一个Servlet类，用来处理用户的请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-15 07:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取前端参数</span></span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行啦add方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>)) &#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行啦delete方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用业务层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.视图转发或重定向</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat，并启动测试</p></li><li><ul><li>localhost:8080/user?method=add</li><li>localhost:8080/user?method=delete</li></ul></li><li><hr></li><li></li></ol><h2 id="MVC框架要做哪些事情"><a href="#MVC框架要做哪些事情" class="headerlink" title="MVC框架要做哪些事情"></a><strong>MVC框架要做哪些事情</strong></h2><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>​    常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><hr><h1 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h1><h2 id="1-第一个MVC程序"><a href="#1-第一个MVC程序" class="headerlink" title="1. 第一个MVC程序"></a>1. 第一个MVC程序</h2><h2 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a><strong>配置版</strong></h2><p>1.配置web.xml  ， 注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件：【servlet-name】- servlet.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /  匹配所有的请求：(不包括.jsp)--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- /*  匹配所有的请求：(包括.jsp)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p><p>说明，这里的名称要求是按照官方来的</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、添加 处理映射器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>4、添加 处理器适配器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>5、添加 视图解析器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView</span></span><br><span class="line"><span class="comment">    1.获取ModelAndView的数据</span></span><br><span class="line"><span class="comment">    2.解析ModelAndView的视图名字</span></span><br><span class="line"><span class="comment">    3.拼接视图名字，找到对应的视图    /WEB-INF/jsp/hello.jsp</span></span><br><span class="line"><span class="comment">    4.将数据渲染到这个视图上</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;HelloSpringMVC!&quot;</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、将自己的类交给SpringIOC容器，注册bean</p><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将自己的类交给SpringIOC容器，注册bean       Handler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>8、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">5</span>/<span class="number">15</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">56</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">$&#123;msg&#125;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>9、测试</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221809.png" alt="image-20200515155705634"></p><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li><li>重启Tomcat 即可解决！</li></ol><hr><h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><ul><li>由于Maven可能存在资源过滤的问题，我们将配置完善</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><p>2、<strong>配置web.xml</strong></p><p>注意点</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>/ 和 /* 的区别：</strong>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p><ol><li><ul><li><p>注意web.xml版本问题，要最新版！</p></li><li><p>注册DispatcherServlet</p></li><li><p>关联SpringMVC的配置文件</p></li><li><p>启动级别为1</p></li><li><p>映射路径为 / 【不要用/*，会404】</p></li></ul></li></ol><pre><code> **3、添加Spring MVC配置文件**</code></pre><ol start="2"><li><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p></li><li><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;    &lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;    &lt;context:component-scan base-package=&quot;cn.silentcow.controller&quot;/&gt;    &lt;!-- 让Spring MVC不处理静态资源 --&gt;    &lt;mvc:default-servlet-handler /&gt;    &lt;!--    支持mvc注解驱动        在spring中一般采用@RequestMapping注解来完成映射关系        要想使@RequestMapping注解生效        必须向上下文中注册DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        这两个实例分别在类级别和方法级别处理。        而annotation-driven配置帮助我们自动完成上述两个实例的注入。     --&gt;    &lt;mvc:annotation-driven /&gt;    &lt;!-- 视图解析器 --&gt;    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;          id=&quot;internalResourceViewResolver&quot;&gt;        &lt;!-- 前缀 --&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;        &lt;!-- 后缀 --&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;    &lt;/bean&gt;&lt;/beans&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. 在视图解析器中我们把所有的视图都存放在&amp;#x2F;WEB-INF&amp;#x2F;目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. - 让IOC的注解生效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - 静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 .....&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - MVC的注解驱动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   - 配置视图解析器&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. **4、创建Controller**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 编写一个Java控制类：com.kuang.controller.HelloController , 注意编码规范&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. &amp;#96;&amp;#96;&amp;#96;java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   package cn.silentcow.controller;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   import org.springframework.stereotype.Controller;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   import org.springframework.ui.Model;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   import org.springframework.web.bind.annotation.RequestMapping;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#x2F;**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    * Created by NiuLinXuan on 2020-05-15 21:57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @Controller  &amp;#x2F;&amp;#x2F;代表这个类会被spring接管&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   @RequestMapping(&amp;quot;HelloController&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   public class HelloController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       @RequestMapping(&amp;quot;&amp;#x2F;h1&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public String sayHello(Model model) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#x2F;&amp;#x2F;向模型中添加属性msg与值，可以在jsp页面中取出并渲染值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           model.addAttribute(&amp;quot;msg&amp;quot;, &amp;quot;hello1,SpringMVC&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return &amp;quot;hello&amp;quot;; &amp;#x2F;&amp;#x2F;web-inf&amp;#x2F;jsp&amp;#x2F;hello.jsp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @RequestMapping(&amp;quot;&amp;#x2F;2&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       public String sayHello(Model model) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#x2F;&amp;#x2F;向模型中添加属性msg与值，可以在jsp页面中取出并渲染值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           model.addAttribute(&amp;quot;msg&amp;quot;, &amp;quot;hello2,SpringMVC&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           return &amp;quot;hello&amp;quot;; &amp;#x2F;&amp;#x2F;web-inf&amp;#x2F;jsp&amp;#x2F;hello.jsp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ol><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul><ol><li><p>5、<strong>创建视图层</strong></p></li><li><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p></li><li><p>可以通过EL表示取出Model中存放的值，或者对象；</p></li><li><pre><code class="jsp">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;$&#123;msg&#125;&lt;/body&gt;&lt;/html&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6、测试&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;![image-20200515220924794](https:&amp;#x2F;&amp;#x2F;img.silentcow.cn&amp;#x2F;20200806221810.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 小结&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;实现步骤其实非常的简单：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1. 新建一个web项目&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 导入相关jar包&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 编写web.xml , 注册DispatcherServlet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4. 编写springmvc配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5. 接下来就是去创建对应的控制类 , controller&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6. 最后完善前端视图和controller之间的对应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7. 测试运行调试.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用springMVC必须配置的三大件：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;**处理器映射器、处理器适配器、视图解析器**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;通常，我们只需要**手动配置视图解析器**，而**处理器映射器**和**处理器适配器**只需要开启**注解驱动**即可，而省去了大段的xml配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 3、RestFul 风格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## **概念**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## **功能**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;资源：互联网所有的事物都可以被抽象为资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;分别对应 添加、 删除、修改、查询。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Controller&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class RestFulConytoller &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x2F;&amp;#x2F;映射访问路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @RequestMapping(&amp;quot;&amp;#x2F;add&amp;#x2F;&amp;#123;a&amp;#125;&amp;#x2F;&amp;#123;b&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String test1(@PathVariable int a, @PathVariable int b, Model model) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int res &amp;#x3D; a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#x2F;&amp;#x2F;Spring MVC会自动实例化一个Model对象用于向视图中传值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        model.addAttribute( &amp;quot;msg&amp;quot;,&amp;quot;结果为：&amp;quot;+ res);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#x2F;&amp;#x2F;返回视图位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;quot;test&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221811.png" alt="image-20200518091309103"></p><h2 id="思考：使用路径变量的好处？"><a href="#思考：使用路径变量的好处？" class="headerlink" title="思考：使用路径变量的好处？"></a><strong>思考：使用路径变量的好处？</strong></h2><ol><li><ul><li><p>使路径变得更加简洁；</p></li><li><p>获得参数更加方便，框架会自动进行类型转换。</p></li><li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</p></li></ul></li></ol><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a><strong>小结：</strong></h2><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@GetMapping</span><br><span class="line">@PostMapping</span><br><span class="line">@PutMapping</span><br><span class="line">@DeleteMapping</span><br><span class="line">@PatchMapping</span><br></pre></td></tr></table></figure><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span> String b, Model model)</span> </span>&#123;</span><br><span class="line">    String res = a + b;</span><br><span class="line">    <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">    model.addAttribute( <span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果为：&quot;</span>+ res);</span><br><span class="line">    <span class="comment">//返回视图位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><h1 id="4、重定向和转发"><a href="#4、重定向和转发" class="headerlink" title="4、重定向和转发"></a>4、重定向和转发</h1><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><h3 id="通过SpringMVC来实现转发和重定向-无需视图解析器；"><a href="#通过SpringMVC来实现转发和重定向-无需视图解析器；" class="headerlink" title="通过SpringMVC来实现转发和重定向 - 无需视图解析器；"></a><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></h3><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/m1/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/m1/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/m1/t3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过SpringMVC来实现转发和重定向-有视图解析器；"><a href="#通过SpringMVC来实现转发和重定向-有视图解析器；" class="headerlink" title="通过SpringMVC来实现转发和重定向 - 有视图解析器；"></a><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></h3><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/m2/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/m2/t2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//重定向</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5、数据处理"><a href="#5、数据处理" class="headerlink" title="5、数据处理"></a>5、数据处理</h1><h2 id="处理提交数据"><a href="#处理提交数据" class="headerlink" title="处理提交数据"></a>处理提交数据</h2><h3 id="1、提交的域名称和处理方法的参数名一致"><a href="#1、提交的域名称和处理方法的参数名一致" class="headerlink" title="1、提交的域名称和处理方法的参数名一致"></a><strong>1、提交的域名称和处理方法的参数名一致</strong></h3><p>提交数据 :<a href="http://localhost/user/t3?name=cow">http://localhost/user/t3?name=cow</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/t3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出 :cow</p><h3 id="2、提交的域名称和处理方法的参数名不一致"><a href="#2、提交的域名称和处理方法的参数名不一致" class="headerlink" title="2、提交的域名称和处理方法的参数名不一致"></a><strong>2、提交的域名称和处理方法的参数名不一致</strong></h3><p>提交数据 : <a href="http://localhost/user/t4?username=cow">http://localhost/user/t4?username=cow</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestParam(&quot;username&quot;) : username提交的域的名称 .</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;t4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test4</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出 :cow</p><h3 id="3、提交的是一个对象"><a href="#3、提交的是一个对象" class="headerlink" title="3、提交的是一个对象"></a><strong>3、提交的是一个对象</strong></h3><p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p><p>1、实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、提交数据 : <a href="http://localhost/user/t2?id=1&amp;name=cow&amp;age=23">http://localhost/user/t2?id=1&amp;name=cow&amp;age=23</a></p><p>3、处理方法 :</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/t2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后台输出 : User(id=1, name=cow, age=23)</p><p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p><h2 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h2><h3 id="第一种-通过ModelAndView"><a href="#第一种-通过ModelAndView" class="headerlink" title="第一种 : 通过ModelAndView"></a><strong>第一种 : 通过ModelAndView</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test5</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">mvc</span>.<span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;modelAndView&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种-通过ModelMap"><a href="#第二种-通过ModelMap" class="headerlink" title="第二种 : 通过ModelMap"></a><strong>第二种 : 通过ModelMap</strong></h3><p>ModelMap</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;t6&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test6</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap map)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//封装到要显示的视图中的数据</span></span><br><span class="line">    map.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三种-通过Model"><a href="#第三种-通过Model" class="headerlink" title="第三种 : 通过Model"></a>第三种 : 通过Model</h3><p>Model</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/t1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.接收前端数据</span></span><br><span class="line">    System.out.println(<span class="string">&quot;接收到前端的数据为：&quot;</span> + name);</span><br><span class="line">    <span class="comment">//2、将返回的结果传递给前端   ，Model</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>, name);</span><br><span class="line">    <span class="comment">//3.视图跳转</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>就对于新手而言简单来说使用区别就是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</span><br><span class="line"></span><br><span class="line">ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><br><span class="line"></span><br><span class="line">ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span><br></pre></td></tr></table></figure><p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p><hr><h1 id="6、Json交互处理："><a href="#6、Json交互处理：" class="headerlink" title="6、Json交互处理："></a>6、Json交互处理：</h1><p>详细基础内容请看另一个笔记</p><h2 id="1-认识Json："><a href="#1-认识Json：" class="headerlink" title="1.  认识Json："></a>1.  认识Json：</h2><ul><li>JSON（JavaScript Object Notation，JS对象标记）是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据</li><li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率</li></ul><p>在JavaScript语言中，一切都是对象。因此，任何JavaScript支持的类型都可以通过JSON来表示，例如字符串、数字、对象、数组等。看看它的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>大括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON键值对</strong>是用来保存JavaScript对象的一种方式，和JavaScript对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 ：分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;silentcow&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="string">&quot;23&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;sex&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>JSON 和 JavaScript 对象的关系：</strong></p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">var obj = &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;; //这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="line">var json = &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;; //这是一个 JSON 字符串，本质是一个字符串</span><br></pre></td></tr></table></figure><h2 id="2-JSON-和-JavaScript-对象-相互转换："><a href="#2-JSON-和-JavaScript-对象-相互转换：" class="headerlink" title="2.JSON 和 JavaScript 对象 相互转换："></a>2.JSON 和 JavaScript 对象 相互转换：</h2><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var obj = JSON.parse(&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;);</span><br><span class="line"><span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">var json = JSON.stringify(&#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;);</span><br><span class="line"><span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>测试：</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//编写一个JavaScript对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="javascript">            name:<span class="string">&quot;silentcow&quot;</span>,</span></span><br><span class="line">            age:22,</span><br><span class="line"><span class="javascript">            gender:<span class="string">&quot;男&quot;</span></span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//将js对象 转换为 json对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(user);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(json);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;=============&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//将 JSON 对象 转换为 JavaScript对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(json);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(obj);</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Jackson："><a href="#3-Jackson：" class="headerlink" title="3. Jackson："></a>3. Jackson：</h2><p>Jackson应该是目前比较好的json解析工具了</p><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p><p><strong>使用步骤：</strong></p><ol><li>导包</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置SpringMVC需要的配置</li></ol><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>springmvc-servlet.xml</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.silentcow.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><ul><li><p>编写一个实体类 User，然后测试去编写我们的测试Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-06-02 19:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p></li><li><p>编写一个Controller；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.silentcow.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-06-02 19:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Controller //走视图解析器</span></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">//直接返回一个字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试普通类的输出</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="comment">//@ResponseBody //它就不会走视图解析器， 会直接返回一个字符串， 配合Controller 使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json01</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//jackson ,     ObjectMapper</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;silentcow&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试集合的输出</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;j2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json02</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">&quot;牛01&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">&quot;牛02&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">&quot;牛03&quot;</span>, <span class="number">21</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="string">&quot;牛04&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        User user5 = <span class="keyword">new</span> User(<span class="string">&quot;牛05&quot;</span>, <span class="number">19</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        users.add(user1);</span><br><span class="line">        users.add(user2);</span><br><span class="line">        users.add(user3);</span><br><span class="line">        users.add(user4);</span><br><span class="line">        users.add(user5);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonUtils.getJson(users);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//时间输出</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;j3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json03</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonUtils.getJson(date,<span class="string">&quot;yyyy-MM-dd HH-mm-ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><h4 id="乱码统一解决"><a href="#乱码统一解决" class="headerlink" title="乱码统一解决"></a><strong>乱码统一解决</strong></h4><p>在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSON 乱码问题解决--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="返回json字符串统一解决"><a href="#返回json字符串统一解决" class="headerlink" title="返回json字符串统一解决"></a><strong>返回json字符串统一解决</strong></h4><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span> <span class="comment">//直接返回一个字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json01</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;silentcow&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Json工具类："><a href="#Json工具类：" class="headerlink" title="Json工具类："></a>Json工具类：</h3><p><strong>抽取为工具类</strong></p><p>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd HH-mm-ss&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object,String dateFormat)</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义日期的格式</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间输出</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;j3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json03</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> JsonUtils.getJson(date,<span class="string">&quot;yyyy-MM-dd HH-mm-ss&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h2><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.68<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>fastjson 三个主要的类：</strong></p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json04</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    User user1 = <span class="keyword">new</span> User(<span class="string">&quot;牛01&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    User user2 = <span class="keyword">new</span> User(<span class="string">&quot;牛02&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    User user3 = <span class="keyword">new</span> User(<span class="string">&quot;牛03&quot;</span>, <span class="number">21</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    User user4 = <span class="keyword">new</span> User(<span class="string">&quot;牛04&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    User user5 = <span class="keyword">new</span> User(<span class="string">&quot;牛05&quot;</span>, <span class="number">19</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    users.add(user1);</span><br><span class="line">    users.add(user2);</span><br><span class="line">    users.add(user3);</span><br><span class="line">    users.add(user4);</span><br><span class="line">    users.add(user5);</span><br><span class="line"></span><br><span class="line">    String string = JSON.toJSONString(users);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">    String str1 = JSON.toJSONString(users);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">    String str2 = JSON.toJSONString(user1);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">    User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">    JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">    System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">    User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Json在我们数据传输中十分重要，一定要学会使用！</p><h1 id="7-拦截器"><a href="#7-拦截器" class="headerlink" title="7. 拦截器"></a>7. 拦截器</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong> </p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><h2 id="2-自定义拦截器"><a href="#2-自定义拦截器" class="headerlink" title="2.自定义拦截器"></a>2.自定义拦截器</h2><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><p>1、新建一个Moudule ， springmvc-07-Interceptor  ， 添加web支持</p><p>2、配置web.xml 和 springmvc-servlet.xml 文件</p><p>3、编写一个拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//return true：执行下一个拦截器，放行</span></span><br><span class="line">    <span class="comment">//return false：不执行下一个拦截器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========处理前===========&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========处理后===========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========清理===========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentCow.config.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、编写一个Controller，接收请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test() 执行啦&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、前端 index.jsp</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;&gt;拦截器测试&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>7、启动tomcat 测试一下！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221812.png" alt="image-20200610230528411"></p><h2 id="3-验证用户是否登录-认证用户"><a href="#3-验证用户是否登录-认证用户" class="headerlink" title="3.验证用户是否登录 (认证用户)"></a>3.验证用户是否登录 (认证用户)</h2><p><strong>实现思路</strong></p><p>1、有一个登陆页面，需要写一个controller访问页面。</p><p>2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p><p>3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p><p><strong>测试：</strong></p><p>1、编写一个登陆页面  login.jsp</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">10</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">44</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%-- 在WEB-INF下的所有页面或者资源，只能通过controller，或者servlet进行访问 --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、编写一个Controller处理请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentCow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-06-10 20:47</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> NiuLinXuan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/main&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跳转到登陆页面</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/goLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String password, Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//把用户的信息存在session中</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;userLoginInfo&quot;</span>,username);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//退出登陆</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/goOut&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;userLoginInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编写一个登陆成功的页面 </p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">10</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">43</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">$&#123;username&#125;</span><br><span class="line">&lt;h1&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/goOut&quot;&gt;注销&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h1&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/goLogin&quot;&gt;登录页面&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/user/main&quot;&gt;首页&lt;/a&gt;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5、编写用户登录拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentCow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-06-10 22:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//判断在什么情况下会放行</span></span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute(<span class="string">&quot;userLoginInfo&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//本就在登录页面也会放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;goLogin&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断什么情况下没有登录</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OK，测试登录拦截功能无误.</strong></p><h1 id="8-文件上传和下载"><a href="#8-文件上传和下载" class="headerlink" title="8.文件上传和下载"></a>8.文件上传和下载</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><h2 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2. 文件上传"></a>2. 文件上传</h2><p>1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置bean：multipartResolver</p><p>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul><p>3、编写前端页面</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/upload2&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;upload&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>4、<strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentCow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">    <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">        String uploadFileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">        InputStream is = file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">        OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取写出</span></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();</span><br><span class="line">        is.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径保存设置</span></span><br><span class="line">        String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上传文件地址</span></span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试上传文件，OK！</p><h2 id="3-文件下载"><a href="#3-文件下载" class="headerlink" title="3.文件下载"></a>3.文件下载</h2><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">   <span class="comment">//要下载的图片地址</span></span><br><span class="line">   String  path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   String  fileName = <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">   <span class="comment">//设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">   <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">   <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">   OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//4、执行 写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;/download&quot;&gt;点击下载&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>测试，文件下载OK，</p><h2 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.silentCow.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSON 乱码问题解决--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM之Spring的学习</title>
      <link href="/2020/08/06/Spring/"/>
      <url>/2020/08/06/Spring/</url>
      
        <content type="html"><![CDATA[<p>本视频教程来自B站@遇见狂神说，有需要的朋友可以去搜索观看他的视频学习。</p><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1-简介："><a href="#1-简介：" class="headerlink" title="1. 简介："></a>1. 简介：</h2><p>Spring : 春天 —&gt;给软件行业带来了春天</p><p>2002年，Rod Jahnson首次推出了Spring框架雏形interface21框架。</p><p>2004年3月24日，Spring框架以interface21框架为基础，经过重新设计，发布了1.0正式版。</p><p>很难想象Rod Johnson的学历 , 他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</p><p>Spring理念 : 使现有技术更加实用 . 本身就是一个大杂烩 , 整合现有的框架技术</p><p>官网 : <a href="http://spring.io/">http://spring.io/</a></p><p>官方下载地址 : <a href="https://repo.spring.io/libs-release-local/org/springframework/spring/">https://repo.spring.io/libs-release-local/org/springframework/spring/</a></p><p>GitHub : <a href="https://github.com/spring-projects">https://github.com/spring-projects</a></p><p><strong>依赖：</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-优点："><a href="#2-优点：" class="headerlink" title="2. 优点："></a>2. 优点：</h2><ul><li>Spring是一个开源的免费的框架(容器)</li><li>Spring是一个轻量级的、非入侵式的框架</li><li>控制反转（IOC），面向切面编程（AOP）</li><li>支持事务的处理，对框架整合的支持</li></ul><p><strong>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架</strong></p><h1 id="IOC理论推导："><a href="#IOC理论推导：" class="headerlink" title="IOC理论推导："></a>IOC理论推导：</h1><p>1.UserDao接口</p><p>2.UserDaoImpl 实现类</p><p>3.UserService 业务接口</p><p>4.UserServiceImpl 业务实现类<img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221751.png" alt="image-20200511124222828"></p><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我么需要根据用户的需求去修改源代码！如果程序代码量十分大，修改一次的成本代价时分昂贵！</p><p>我们使用一个set接口实现，已经发生了革命性的变化！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用set进行动态实现值的注入</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之前，程序是主动创建对象，控制权在程序员手上</li><li>使用了set注入后，程序不再具有主动性，而是变成了被动的接受对象</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221752.png" alt="image-20200511124237212"></p><p>这种思想，从本质上解决了问题，我们程序员不用再去管理对象的创建了。系统的耦合性大大降低，可以更加专注在业务的实现上，这就是IOC的原型！</p><h2 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h2><p><strong>控制反转IoC(Inversion of Control)，是一种设计思想，DI(依赖注入)是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中 , 我们使用面向对象编程 , 对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</p><p><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection,DI）。</strong></p><hr><h1 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h1><p><strong>导入Jar包</strong></p><p>注 : spring 需要导入commons-logging进行日志记录 . 我们利用maven , 他会自动下载对应的依赖项 .</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>编写代码</strong></p><p>1、编写一个Hello实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-11 14:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写我们的spring文件 , 这里我们命名为ApplicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用Spring来创建对象，在Spring这些都成为Bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、我们可以去进行测试了 .</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line">    Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(hello.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改案例一</strong></p><p>我们在案例一中， 新增一个Spring配置文件beans.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;MySQLImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.dao.UserMySQLImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.dao.UserImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserOraclImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.dao.UserOraclImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;UserOraclImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;ApplicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    UserServiceImpl serviceImpl = (UserServiceImpl) context.getBean(<span class="string">&quot;UserServiceImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    serviceImpl.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考问题？</p><ul><li><p>Hello 对象是谁创建的？</p><p>hello 对象是由Spring创建的</p></li><li><p>Hello 对象的属性是怎么设置的？</p><p>hello 对象的属性是由Spring容器设置的。</p></li></ul><p>这个过程就叫控制反转：</p><p>控制：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建的。</p><p>反转：程序本身不创建对象，而变成被动的接收对象</p><p>依赖注入：就是利用set方法来进行注入的</p><p><strong>IOC是一种编程思想，由主动的编程变成被动的接收</strong></p><p>可以通过new ClassPathXmlApplicationContext去浏览一下底层源码</p><p><strong>到现在，要实现不同操作，只需要在xml配置文件中进行修改，所谓的IoC，一句话搞定：对象由Spring来创建，管理，装配！</strong></p><h1 id="4-IOC创建对象的方式"><a href="#4-IOC创建对象的方式" class="headerlink" title="4.IOC创建对象的方式"></a>4.IOC创建对象的方式</h1><p>1.使用无参构造创建对象，默认</p><p>2.假如我们要使用有参构造创建对象</p><p>​    1.下标赋值</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--第一种，下标赋值--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;user&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg index=&quot;0&quot; value=&quot;狂神说Java&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​    2.类型</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--第二种，通过类型创建，不建议使用--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;user&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;silentcow&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>​    3.参数名</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--第三种，直接通过参数名来创建--&gt;</span><br><span class="line">&lt;bean id=<span class="string">&quot;user&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg name=&quot;name&quot; value=&quot;中国&quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！</p><h1 id="5-Spring配置"><a href="#5-Spring配置" class="headerlink" title="5. Spring配置"></a>5. Spring配置</h1><h2 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种，直接通过参数名来创建--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    id: bean的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">    class：bean 对象所对应的全限定名 ： 包名 + 类型</span></span><br><span class="line"><span class="comment">    name：也是别名，而且name 可以同时起多个别名，中间可以用 空格 逗号 分号 隔离</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;t,t2;t3 t4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你好&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h2><p>这个import，一般用于团队开发使用，它课将多个配置文件，导入合并为一个</p><p>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p><ul><li><p>张三</p></li><li><p>李四</p></li><li><p>王五</p></li><li><p>applicationContext.xml</p></li><li><pre><code class="xml">&lt;import resource=&quot;beans1.xml&quot;/&gt;&lt;import resource=&quot;beans2.xml&quot;/&gt;&lt;import resource=&quot;beans3.xml&quot;/&gt;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;使用的时候，直接使用总的配置就可以了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 6. 依赖注入：DI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 1. 概念：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 依赖注入：Dependency Injection,DI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 依赖：指Bean对象的创建依赖于容器     Bean对象的依赖资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 注入：指Bean对象所依赖的资源，由容器来设置和装配&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 2. 构造器注入&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 3. set注入(重点)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;要求被注入的属性 , 必须有set方法 , set方法的方法名由set + 属性首字母大写 , 如果属性是boolean类型 , 没有set方法 , 是 is .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Address.java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#x2F;**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Created by NiuLinXuan on 2020-05-11 19:00&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&amp;#x2F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Address &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String getAddress() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setAddress(String address) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.address &amp;#x3D; address;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public String toString() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &amp;quot;Address&amp;#123;&amp;quot; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;quot;address&amp;#x3D;&amp;#39;&amp;quot; + address + &amp;#39;\&amp;#39;&amp;#39; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#39;&amp;#125;&amp;#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul><p>Student.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-11 19:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; game;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(String[] books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbys</span><span class="params">(List&lt;String&gt; hobbys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbys = hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> game;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGame</span><span class="params">(Set&lt;String&gt; game)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.game = game;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbys=&quot;</span> + hobbys +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, game=&quot;</span> + game +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、<strong>常量注入</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--常量注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;牛林轩&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、<strong>Bean注入</strong> </p><p>注意点：这里的值是一个引用，ref</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;咸阳&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Bean注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、<strong>数组注入</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、<strong>List注入</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--list注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>听音乐<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>写代码<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、<strong>Map注入</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--map注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;610427199705170716&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6222622262222622222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、<strong>set注入</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--set注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;game&quot;</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>CF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>DNF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、<strong>Null注入</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--null注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8、<strong>Properties注入</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Student&quot;</span> <span class="attr">name</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--Properties注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>lxj521..<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果：<img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221753.png" alt="image-20200511203149693"></p><h2 id="4-c命名空间和p命名空间："><a href="#4-c命名空间和p命名空间：" class="headerlink" title="4. c命名空间和p命名空间："></a>4. c命名空间和p命名空间：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--P命名空间注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;silentcow&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--C命名空间注入，通过构造器注入：construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;程序牛&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;UserBeans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        User user = (User) context.getBean(&quot;user&quot;);</span></span><br><span class="line">    User user = context.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Bean的作用域："><a href="#5-Bean的作用域：" class="headerlink" title="5. Bean的作用域："></a>5. Bean的作用域：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221754.png" alt="image-20200511223647017"></p><ol><li><p>单例模式（Spring默认机制）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;silentcow&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>原型模式：每次都从容器中get的时候，都会产生一个新对象</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;程序牛&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>其余的request、session、application，这些只能在web开发中使用到。</p></li></ol><h1 id="7-Bean的自动装配："><a href="#7-Bean的自动装配：" class="headerlink" title="7. Bean的自动装配："></a>7. Bean的自动装配：</h1><h2 id="1-ByName自动装配"><a href="#1-ByName自动装配" class="headerlink" title="1. ByName自动装配"></a>1. ByName自动装配</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;silentcow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-ByType自动装配："><a href="#2-ByType自动装配：" class="headerlink" title="2. ByType自动装配："></a>2. ByType自动装配：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;silentcow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Id可以省略，因为它是根据类型去寻找的</li></ul><p>小结：</p><ul><li>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致！</li><li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致！</li></ul><h2 id="3-使用注解实现自动装配："><a href="#3-使用注解实现自动装配：" class="headerlink" title="3. 使用注解实现自动装配："></a>3. 使用注解实现自动装配：</h2><p>1.导入约束：context约束</p><p>2.<strong>配置注解的支持：</strong><a href="context:annotation-config/">context:annotation-config/</a></p><p>在spring配置文件中引入context文件头，以及开启属性注解支持！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a><strong>@Autowired</strong></h3><ul><li>@Autowired是按类型自动转配的，不支持id匹配</li></ul><p>直接在属性上使用即可，也可以在set方式上使用！</p><p>使用Autowired 我们可以不用编写Set方法了，前提是你这个自动装配的属性在IOC(Spring)容器中存在，且符合名字byname</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-11 22:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Cat cat, Dog dog, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时配置文件内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置注解的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;silentcow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【科普】：</p><p>@Autowired(required=false)  说明：false，对象可以为null；true，对象必须存对象，不能为null。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果允许对象为null，设置required = false,默认为true</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><ul><li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配</li><li>@Qualifier不能单独使用。</li></ul><p>测试实验步骤：</p><p>1、配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.pojo.Dog&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>2、没有加Qualifier测试，直接报错</p><p>3、在属性上添加Qualifier注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;cat2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;dog222&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解【@Autowired】完成的时候，我们可以使用@Qualifier(value=”xxx”)去配置@Autowired的使用，指定一个唯一的bean对象注入。</p><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><strong>@Resource</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;cat2&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>@Resource 和@Autowired的区别：</p><ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowird 通过byType的方式实现，而且必须要求这个对象存在！【常用】</li><li>@Resource 默认通过byname的方式实现，如果找不到名字，则通过byType实现！如果两个都找不到的情况下，就报错！【常用】</li><li>执行顺序不同：@Autowired 通过byType的方式实现</li></ul><hr><h1 id="8-使用注解开发："><a href="#8-使用注解开发：" class="headerlink" title="8. 使用注解开发："></a>8. 使用注解开发：</h1><p>使用注解开发，必须要保证aop的包导入了<img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221755.png" alt="image-20200512141015788"></p><p>使用注解需要导入context约束，增加注解的支持！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.silentcow.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等价于  &lt;bean id=&quot;user&quot; class=&quot;cn.silentcow.pojo.User&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">//@Component组件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.属性如何注入</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于： &lt;property name=&quot;name&quot; value=&quot;silentcow&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;silentcow&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.衍生的注解</p><p>​    @Component有几个衍生注解，我们在web开发中，会按照mvc三层架构分层</p><ul><li><p>dao    【@Repository】</p></li><li><p>service    【@Service】</p></li><li><p>controller   【@Controller】</p><p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配bean</p></li></ul><p>4.自动装配</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- @Autowired:是按类型自动转配的，名字</span><br><span class="line">    如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value&#x3D;&quot;xxx&quot;)</span><br><span class="line">- @Nullable        字段标记了这个注解，说明这个字段可以为null</span><br><span class="line">- @Resource        自动装配通过名字，类型</span><br></pre></td></tr></table></figure><p>5.作用域</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于： &lt;property name=&quot;name&quot; value=&quot;silentcow&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;silentcow&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.小结</p><p>xml 与 注解：</p><ul><li>xml更加万能，适用于任何场合，维护简单方便</li><li>注解不是自己的类使用不了，维护相对复杂！</li></ul><p>xml 与 注解 最佳实践：</p><ul><li>xml用来管理bean</li><li>注解 只负责完成属性的注入</li><li>我们在使用的过程中，只需要注意一个问题：必须让注解生效，就必须开启注解的支持</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.silentcow.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置注解的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="9-使用Java的方式配置Spring"><a href="#9-使用Java的方式配置Spring" class="headerlink" title="9. 使用Java的方式配置Spring"></a>9. 使用Java的方式配置Spring</h1><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-12 16:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里的这个注解的意思，就是说明这个类被spring接管了，注册到了容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;silentcow&quot;)</span>     <span class="comment">//属性注入值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-12 16:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//这个也会被spring容器接管，注册到容器中，因为它本来就是一个@Component</span></span><br><span class="line"><span class="comment">// @Configuration 代表这是一个配置类，就和我们之前看的beans.xml</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.silentcow&quot;)</span>      <span class="comment">//扫描包</span></span><br><span class="line"><span class="meta">@Import(MyConfig2.class)</span>    <span class="comment">//引入另一个配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个Bean，就相当于我们之前写的一个bean标签</span></span><br><span class="line">    <span class="comment">//这个方法的名字，就相当于bean标签中的id属性</span></span><br><span class="line">    <span class="comment">//这个方法的返回值，就相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();  <span class="comment">//就是返回要注入到bean的对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.silentcow.config.MyConfig;</span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-12 16:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果完全使用了配置类方式去做，我们就只能通过 AnnotationConfig 上下文啦获取容器，通过配置类的class对象加载</span></span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);</span><br><span class="line">        User getUser = (User) context.getBean(<span class="string">&quot;getUser&quot;</span>);</span><br><span class="line">        System.out.println(getUser.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="10-代理模式："><a href="#10-代理模式：" class="headerlink" title="10. 代理模式："></a>10. 代理模式：</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221756.png" alt="image-20200512172739028"></p><h2 id="10-1-静态代理："><a href="#10-1-静态代理：" class="headerlink" title="10.1 静态代理："></a>10.1 静态代理：</h2><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些负数操作</li><li>客户：访问代理对象的人</li></ul><p>代码步骤：</p><p>1.接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.真实角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.代理角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        hetong();</span><br><span class="line">        fare();</span><br><span class="line">        host.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//签合同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hetong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//房东要出租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//找中介租房子,中介从房东那拿房源以及一些附属操作</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务</li><li>公共也就交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色；代码量会翻倍，开发效率会变低</li></ul><h2 id="10-2-加深理解："><a href="#10-2-加深理解：" class="headerlink" title="10.2 加深理解："></a>10.2 加深理解：</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221757.png" alt="image-20200512192011807"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-12 18:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-12 18:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//真实对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-12 18:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UserServiceImpl service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setService</span><span class="params">(UserServiceImpl service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        service.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.query();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用了&quot;</span> + msg + <span class="string">&quot;方法。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-12 18:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UserServiceImpl service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        UserServiceProxy proxy = <span class="keyword">new</span> UserServiceProxy();</span><br><span class="line">        proxy.setService(service);</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-动态代理："><a href="#10-3-动态代理：" class="headerlink" title="10.3 动态代理："></a>10.3 动态代理：</h2><ul><li>动态代理和静态代理角色一样</li><li>动态dialing的代理类是动态生成的，不是我们直接写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口    —    JDK 动态代理</li><li>基于类  —   cglib</li><li>Java字节码实现 ： Javasist</li></ul></li></ul><p>需要了解两个类：Proxy：代理，    InvocationHandler：调用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Object invoke(Object proxy, 方法 method, Object[] args)；</span><br><span class="line">//参数</span><br><span class="line">//proxy - 调用该方法的代理实例</span><br><span class="line">//method -所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</span><br><span class="line">//args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</span><br></pre></td></tr></table></figure><p>动态代理的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共也就交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口即可！</li></ul><ul><li>ProxyInvocationHandler.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-12 19:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成得到代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理代理实例，并返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//动态代理的本质，就是使用反射机制实现</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        log(method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+msg+<span class="string">&quot;方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Client.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        UserServiceImpl service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理角色，不存在</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        pih.setTarget(service);<span class="comment">//设置要代理的对象</span></span><br><span class="line">        <span class="comment">//动态生成代理类</span></span><br><span class="line">        UserService proxy = (UserService) pih.getProxy();</span><br><span class="line">        proxy.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-AOP"><a href="#11-AOP" class="headerlink" title="11. AOP"></a>11. AOP</h1><h2 id="11-1-什么是AOP"><a href="#11-1-什么是AOP" class="headerlink" title="11.1 什么是AOP"></a>11.1 什么是AOP</h2><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h2 id="11-2-Aop在Spring中的作用"><a href="#11-2-Aop在Spring中的作用" class="headerlink" title="11.2 Aop在Spring中的作用"></a>11.2 Aop在Spring中的作用</h2><p>提供声明式事务：允许用户自定义切面</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如：日志，安全，缓存，事务等等</li><li>切面（ASPECT）：横切关注点  被模块化的特殊对象。即，它是一个类</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法</li><li>目标（Target）：被通知对象</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象</li><li>切入点（PointCut）：切面通知  执行的“地点”的定义</li><li>连接点（JointPoint）：与切入点匹配的执行点</li></ul><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><ul><li><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221758.png" alt="image-20200513152019100"></p></li><li><p>即 Aop 在 不改变原有代码的情况下 , 去增加新的功能 .</p></li></ul><h2 id="11-3-使用Spring实现Aop"><a href="#11-3-使用Spring实现Aop" class="headerlink" title="11.3 使用Spring实现Aop"></a>11.3 使用Spring实现Aop</h2><p>【重点】 使用AOP置入，需要导入一个依赖包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方式一：使用Spring的API-接口"><a href="#方式一：使用Spring的API-接口" class="headerlink" title="方式一：使用Spring的API 接口"></a><strong>方式一：使用Spring的API 接口</strong></h3><p>首先编写我们的业务接口和实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后去写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//method: 要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//args: 参数</span></span><br><span class="line">    <span class="comment">//target : 目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(target.getClass().getName() + <span class="string">&quot;的&quot;</span> + method.getName() + <span class="string">&quot;被执行啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//returnValue：返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + method.getName() + <span class="string">&quot;方法，返回结果为：&quot;</span> + returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用Spring来创建对象，在Spring这些都成为Bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.service.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop：需要导入aop的约束--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点：expression：表达式，execution(要执行的的位置！* * * * *)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn.silentcow.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//动态代理代理的是接口</span></span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Aop的重要性 : 很重要 . 一定要理解其中的思路 , 主要是思想的理解这一块 .</strong></p><p>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 . </p><h3 id="第二种方式：自定义类来实现Aop"><a href="#第二种方式：自定义类来实现Aop" class="headerlink" title="第二种方式：自定义类来实现Aop**"></a><strong>第二种方式</strong>：自定义类来实现Aop**</h3><p>目标业务类不变依旧是userServiceImpl</p><p>第一步 : 写我们自己的一个切入类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DiyPointCut &#123;</span><br><span class="line"></span><br><span class="line">    public void before() &#123;</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void after() &#123;</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去spring中配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册dean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.diy.DiyPointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自定义切面：ref 要引用的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn.silentcow.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通知--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//动态代理代理的是接口</span></span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line"></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式三：使用注解实现！"><a href="#方式三：使用注解实现！" class="headerlink" title="方式三：使用注解实现！"></a>方式三：使用注解实现！</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.diy.AnnotationPointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式三：使用注解方式实现AOP</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointCut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* cn.silentcow.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* cn.silentcow.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* cn.silentcow.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        Object proceed = jp.proceed();  <span class="comment">//执行方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12-回顾Mybatis"><a href="#12-回顾Mybatis" class="headerlink" title="12. 回顾Mybatis"></a>12. 回顾Mybatis</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-10-mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-1-步骤："><a href="#12-1-步骤：" class="headerlink" title="12.1 步骤："></a>12.1 步骤：</h2><p>1.导入相关jar包</p><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop织入</li><li>mybatis-spring 【new】</li></ul><p>2.编写配置文件</p><p>3.测试</p><h2 id="12-2-Mybatis-spring"><a href="#12-2-Mybatis-spring" class="headerlink" title="12.2 Mybatis-spring"></a>12.2 Mybatis-spring</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、编写数据源配置</p><p>2、sqlSessionFactory</p><p>3、sqlSessionTemplate</p><p>spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--DataSource:使用spring的数据源替换mybatis的配置     c3p0  dbcp  druid</span></span><br><span class="line"><span class="comment">    我们这里使用spring提供的jdbc ：</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lxj521..&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--绑定Mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:cn/silentcow/mapper/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SqlSessionTemplate:就是我们使用的sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只能使用构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、需要给接口加实现类    【】</p><p>UserMapperImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-13 20:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们的所有操作，都使用sqlSession来 执行，在原来，现在都使用SqlSessionTemplate</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、将自己写的实现类，注入到spring中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、测试使用即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">    <span class="keyword">for</span> (User user : userMapper.getUsers()) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-3-SqlSessionDaoSupport"><a href="#12-3-SqlSessionDaoSupport" class="headerlink" title="12.3 SqlSessionDaoSupport"></a>12.3 SqlSessionDaoSupport</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="13-声明式事务："><a href="#13-声明式事务：" class="headerlink" title="13.声明式事务："></a>13.声明式事务：</h1><h2 id="13-1-回顾事务"><a href="#13-1-回顾事务" class="headerlink" title="13.1 回顾事务"></a>13.1 回顾事务</h2><ul><li>把一组业务当成一个业务来做，要么都成功，要么都失败！</li><li>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎！</li><li>确保完整性和一致性；</li></ul><p>事务ACID原则：</p><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多个业务可能操作同一个资源，防止数据损坏</li></ul></li><li>持久性<ul><li>书屋一旦提交，无论系统发送什么问题，结果都不会再被影响，被持久化的写到存储中。</li></ul></li></ul><h2 id="13-2-spring中的事务管理"><a href="#13-2-spring中的事务管理" class="headerlink" title="13.2 spring中的事务管理"></a>13.2 spring中的事务管理</h2><ul><li>声明式事务：AOP</li><li>编程式事务：需要在代码中，进行事务的管理</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--结合AOP实现事务的织入--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给哪些方法配置事务--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务的传播特性：new propagation --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务切入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn.silentcow.mapper.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>思考：为什么需要事务？</p><ul><li>如果不配置事务，可能存在数据提交不一致的情况下；</li><li>如果我们不在spring中配置声明式事务，我们就需要在代码中手动配置事务</li><li>事务在项目的开发中时分重要，涉及到数据的一致性和完整性问题，不容马虎</li></ul><p>UserMapper.xml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace&#x3D;&quot;cn.silentcow.mapper.UserMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id&#x3D;&quot;getUsers&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;insert id&#x3D;&quot;addUser&quot; parameterType&#x3D;&quot;User&quot;&gt;</span><br><span class="line">        insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id&#x3D;&quot;deleteUser&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">        delete from mybatis.user where id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;delete&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>spring-dao.xml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--DataSource:使用spring的数据源替换mybatis的配置     c3p0  dbcp  druid</span><br><span class="line">    我们这里使用spring提供的jdbc ：</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;url&quot;</span><br><span class="line">                  value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&amp;serverTimezone&#x3D;Asia&#x2F;Shanghai&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;lxj521..&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--sqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;!--绑定Mybatis配置文件--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;mapperLocations&quot; value&#x3D;&quot;classpath:cn&#x2F;silentcow&#x2F;mapper&#x2F;*.xml&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--SqlSessionTemplate:就是我们使用的sqlSession--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSession&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionTemplate&quot;&gt;</span><br><span class="line">        &lt;!--只能使用构造器注入sqlSessionFactory，因为它没有set方法--&gt;</span><br><span class="line">        &lt;constructor-arg index&#x3D;&quot;0&quot; ref&#x3D;&quot;sqlSessionFactory&quot;&gt;&lt;&#x2F;constructor-arg&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--配置声明式事务--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--结合AOP实现事务的织入--&gt;</span><br><span class="line">    &lt;!--配置事务通知--&gt;</span><br><span class="line">    &lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;</span><br><span class="line">        &lt;!--给哪些方法配置事务--&gt;</span><br><span class="line">        &lt;!--配置事务的传播特性：new propagation --&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;add&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;delete&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;update&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;query&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">    &lt;&#x2F;tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置事务切入--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:pointcut id&#x3D;&quot;txPointCut&quot; expression&#x3D;&quot;execution(* cn.silentcow.mapper.*.*(..))&quot;&#x2F;&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut-ref&#x3D;&quot;txPointCut&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启别名映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UserMapperImpl.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.silentcow.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-13 20:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">9</span>, <span class="string">&quot;小明&quot;</span>, <span class="string">&quot;123123&quot;</span>);</span><br><span class="line">        UserMapper mapper = getSqlSession().getMapper(UserMapper.class);</span><br><span class="line">        mapper.addUser(user);</span><br><span class="line">        mapper.deleteUser(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            UserMapper userMapper = context.getBean(<span class="string">&quot;userMapper&quot;</span>, UserMapper.class);</span><br><span class="line">            <span class="keyword">for</span> (User user : userMapper.getUsers()) &#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM之Mybatis的学习</title>
      <link href="/2020/08/06/Mybatis/"/>
      <url>/2020/08/06/Mybatis/</url>
      
        <content type="html"><![CDATA[<p>本视频教程来自B站@遇见狂神说，有需要的朋友可以去搜索观看他的视频学习。</p><h1 id="Mybatis："><a href="#Mybatis：" class="headerlink" title="Mybatis："></a>Mybatis：</h1><h2 id="1-简介："><a href="#1-简介：" class="headerlink" title="1. 简介："></a>1. 简介：</h2><p>官方中文文档：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases">https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><h3 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：断电即失</li><li>数据库(Jdbc)，io文件持久化</li><li>生活：冷藏、罐头</li></ul><p><strong>为什么需要持久化？</strong></p><ul><li>有一些对象，不能让它丢掉</li><li>内存太贵</li></ul><h3 id="1-3、持久层："><a href="#1-3、持久层：" class="headerlink" title="1.3、持久层："></a>1.3、持久层：</h3><p>Dao层，Service层，Controller层</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h3 id="1-4-为什么学习Mybatis"><a href="#1-4-为什么学习Mybatis" class="headerlink" title="1.4 为什么学习Mybatis"></a>1.4 为什么学习Mybatis</h3><ul><li>将数据存入到数据库中</li><li>方便</li><li>传统的JDBC代码太复杂了。简化，框架，自动化</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 优点：</span><br><span class="line">    * 简单易学</span><br><span class="line">    * 灵活</span><br><span class="line">    * sql和代码的分离，提高了可维护性</span><br><span class="line">    * 提供映射标签，支持对象与数据库的orm字段关系映射</span><br><span class="line">    * 提供对象关系映射标签，支持对象关系组建维护</span><br><span class="line">    * 提供xml标签，支持编写动态sql</span><br></pre></td></tr></table></figure><h2 id="2-第一个Mybatis程序："><a href="#2-第一个Mybatis程序：" class="headerlink" title="2. 第一个Mybatis程序："></a>2. 第一个Mybatis程序：</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试</p><h3 id="2-1-搭建环境："><a href="#2-1-搭建环境：" class="headerlink" title="2.1 搭建环境："></a>2.1 搭建环境：</h3><ul><li>搭建数据库：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE mybatis;</span><br><span class="line"></span><br><span class="line">USE mybatis;</span><br><span class="line"></span><br><span class="line">CREATE TABLE USER(</span><br><span class="line">    id INT PRIMARY KEY NOT NULL,</span><br><span class="line">    NAME VARCHAR(20) DEFAULT NULL,</span><br><span class="line">    pwd VARCHAR(30) DEFAULT NULL</span><br><span class="line">) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO USER(id,NAME,pwd) VALUE(1,&#39;张三&#39;,&#39;123456&#39;),(2,&#39;李四&#39;,&#39;123456&#39;),(3,&#39;王五&#39;,&#39;123456&#39;);</span><br></pre></td></tr></table></figure><p>新建项目：</p><p>1.新建一个普通的maven项目</p><p>2.删除src目录</p><p>3.导入maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.silentcow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Mybatis-Study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mysql驱动--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        mybatis--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        junit--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--在build中配置resuorces，来防止我们的资源导出失败--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-创建一个模块"><a href="#2-2-创建一个模块" class="headerlink" title="2.2 创建一个模块"></a>2.2 创建一个模块</h3><ul><li>编写mybatis核心配置文件：</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lxj521..&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 开启别名映射--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lxj521..&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>编写Mybatis工具类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-06 21:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步;获取SqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-编写代码："><a href="#2-3-编写代码：" class="headerlink" title="2.3 编写代码："></a>2.3 编写代码：</h3><ul><li><p>实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.silentcow.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by NiuLinXuan on 2020-05-06 21:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Dao接口：</p></li><li><pre><code class="java">public interface UserDao &#123;    List&lt;User&gt; getUserList();&#125;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 接口实现类：由原来的UserDaoImpl转变为一个Mapper配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &amp;#96;&amp;#96;&amp;#96;xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;?xml version&amp;#x3D;&amp;quot;1.0&amp;quot; encoding&amp;#x3D;&amp;quot;UTF-8&amp;quot; ?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;!DOCTYPE mapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          PUBLIC &amp;quot;-&amp;#x2F;&amp;#x2F;mybatis.org&amp;#x2F;&amp;#x2F;DTD Mapper 3.0&amp;#x2F;&amp;#x2F;EN&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;quot;http:&amp;#x2F;&amp;#x2F;mybatis.org&amp;#x2F;dtd&amp;#x2F;mybatis-3-mapper.dtd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;!--namespace &amp;#x3D; 绑定一个对应的Dao&amp;#x2F;Mapper接口 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;mapper namespace&amp;#x3D;&amp;quot;cn.silentcow.dao.UserDao&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;!--select查询语句--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;select id&amp;#x3D;&amp;quot;getUserList&amp;quot; resultType&amp;#x3D;&amp;quot;cn.silentcow.pojo.User&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          select * from mybatis.user&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;&amp;#x2F;select&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;mapper&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul><h3 id="2-4-测试："><a href="#2-4-测试：" class="headerlink" title="2.4 测试："></a>2.4 测试：</h3><ul><li><p>junit测试：</p></li><li><p>```java<br>package cn.silentcow.dao;</p><p>import cn.silentcow.pojo.User;<br>import cn.silentcow.utils.MybatisUtils;<br>import org.apache.ibatis.session.SqlSession;<br>import org.junit.Test;</p><p>import java.util.List;</p><p>/**</p><ul><li><p>Created by NiuLinXuan on 2020-05-06 22:05</p></li><li><p>/<br>public class UserDaoTest {<br>  @Test<br>  public void test() {</p><pre><code>  //第一步：获取SqlSession对象  SqlSession sqlSession = MybatisUtils.getSqlSession();  //方式一：getMapper  UserDao userDao = sqlSession.getMapper(UserDao.class);  List&lt;User&gt; userList = userDao.getUserList();  //遍历：  for (User user : userList) &#123;      System.out.println(user);  &#125;  //关闭SqlSession  sqlSession.close();</code></pre><p>  }<br>}</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 3. CRUD</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意点：<br>  增删改需要提交事务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 1. namespace</span><br><span class="line"></span><br><span class="line">namespace的包名和Dao&#x2F;mapper接口的包名一致</span><br><span class="line"></span><br><span class="line">### 2. select</span><br><span class="line"></span><br><span class="line">* id：就是对应的namespace中的方法名；</span><br><span class="line">* resultType：sql语句执行的返回值</span><br><span class="line">* parameterType：参数类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.编写接口</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;&#x2F;根据ID查询用户</span><br><span class="line">User getUserID(int id);</span><br></pre></td></tr></table></figure></li></ul><p>2.编写对应的mapper中的sql语句</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;getUserID&quot;</span> parameterType=<span class="string">&quot;int&quot;</span> resultType=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span>&gt;</span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User userID = mapper.getUserID(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(userID);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-insert"><a href="#3-insert" class="headerlink" title="3.insert"></a>3.insert</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//insert 添加一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;insert id=<span class="string">&quot;addUser&quot;</span> parameterType=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span>&gt;</span><br><span class="line">    insert into mybatis.user (id,name,pwd) value (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> addUser = mapper.addUser(<span class="keyword">new</span> User(<span class="number">4</span>, <span class="string">&quot;六六&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-update"><a href="#4-update" class="headerlink" title="4. update"></a>4. update</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;update id=<span class="string">&quot;updateUser&quot;</span> parameterType=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span>&gt;</span><br><span class="line">    update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    mapper.updateUser(<span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">&quot;六蛋&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-delete"><a href="#5-delete" class="headerlink" title="5. delete"></a>5. delete</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除一个数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;delete id=<span class="string">&quot;deleteUser&quot;</span> parameterType=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span> &gt;</span><br><span class="line">    delete from mybatis.user where id=#&#123;id&#125;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    mapper.deleteUser(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-万能Map："><a href="#6-万能Map：" class="headerlink" title="6. 万能Map："></a>6. 万能Map：</h3><p>假如，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--对象中的属性，可以直接去取出来     传递map的key--&gt;</span><br><span class="line">&lt;insert id=<span class="string">&quot;addUser2&quot;</span> parameterType=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">    insert into mybatis.user (id,name,pwd) values (#&#123;userid&#125;,#&#123;username&#125;,#&#123;password&#125;);</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userid&quot;</span>,<span class="number">5</span>);</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;琪琪&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-模糊查询："><a href="#7-模糊查询：" class="headerlink" title="7. 模糊查询："></a>7. 模糊查询：</h3><p>模糊查询怎么写？</p><p>1.Java代码执行的时候，传递通配符% %</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userLike = mapper.getUserLike(<span class="string">&quot;%张%&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.在sql拼接中使用通配符</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-配置解析："><a href="#4-配置解析：" class="headerlink" title="4. 配置解析："></a>4. 配置解析：</h2><h3 id="1-核心配置文件："><a href="#1-核心配置文件：" class="headerlink" title="1. 核心配置文件："></a>1. 核心配置文件：</h3><h3 id="2-环境配置：environments"><a href="#2-环境配置：environments" class="headerlink" title="2. 环境配置：environments"></a>2. 环境配置：environments</h3><p>Mybatis可以配置成适应多种环境</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>学会使用配置多套运行环境</p><p>Mybatis默认的事务管理器就是JDBC，连接池：POOLED</p><h3 id="3-属性（properties）"><a href="#3-属性（properties）" class="headerlink" title="3. 属性（properties）"></a>3. 属性（properties）</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。【db.properties】</p><ul><li><p>编写一个配置文件：</p></li><li><p>db.properties</p></li><li><pre><code class="properties">driver=com.mysql.cj.jdbc.Driverurl=jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghaiusername=rootpassword=lxj521..&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 在核心配置文件中映入：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#96;&amp;#96;&amp;#96;xml&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;properties resource&amp;#x3D;&amp;quot;db.properties&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;property name&amp;#x3D;&amp;quot;username&amp;quot; value&amp;#x3D;&amp;quot;root&amp;quot;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;property name&amp;#x3D;&amp;quot;password&amp;quot; value&amp;#x3D;&amp;quot;lxj521..&amp;quot;&amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&amp;#x2F;properties&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;* 可以直接引入外部文件* 可以在其中增加一些属性配置* 如果两个文件有同一个字段，优先使用外部配置文件的。</code></pre></li></ul><h3 id="4-类型别名（typeAliases）"><a href="#4-类型别名（typeAliases）" class="headerlink" title="4. 类型别名（typeAliases）"></a>4. 类型别名（typeAliases）</h3><ul><li>类别名是为Java类型设置一个短的名字</li><li>存在的意义仅在于用来减少类完全限定名的冗余</li></ul><p>方式一：类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;cn.silentcow.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;cn.silentcow.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实体类比较少的时候，使用第一种方式。</p><p>如果实体类十分多，建议使用第二种。</p><p>第一种可以DIY别名，第二种则不行，如果非要改，需要在实体类上增加注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>注意：注解时建立在第二种的基础上的。</p><h3 id="5-设置（settings）"><a href="#5-设置（settings）" class="headerlink" title="5. 设置（settings）"></a>5. 设置（settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p><table><thead><tr><th><strong>设置名</strong></th><th>描述</th><th><strong>有效值</strong></th><th><strong>默认值</strong></th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true/false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true/false</td><td>false</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>下方</td><td>未设置</td></tr></tbody></table><ul><li>SLF4J/LOG4J/LOG4J2/JDK_LOGGING/COMMONS_LOGGING/STDOUT_LOGGING/NO_LOGGING  </li></ul><hr><h3 id="6-映射器（mappers）"><a href="#6-映射器（mappers）" class="headerlink" title="6. 映射器（mappers）"></a>6. 映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；</p><p>方式一：【推荐】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;cn/silentcow/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.dao.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>接口和它的Mapper配置文件必须同名</li><li>接口和它的Mapper配置文件必须在同一个包下！</li></ul><p>方式三：使用扫描包进行注入绑定：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;cn.silentcow.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>接口和它的Mapper配置文件必须同名</li><li>接口和它的Mapper配置文件必须在同一个包下！</li></ul><h3 id="7-其他配置："><a href="#7-其他配置：" class="headerlink" title="7. 其他配置："></a>7. 其他配置：</h3><ul><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）<ul><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ul></li></ul><hr><h3 id="8-声明周期和作用域："><a href="#8-声明周期和作用域：" class="headerlink" title="8. 声明周期和作用域："></a>8. 声明周期和作用域：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221713.png" alt="image-20200507171449756"></p><p>生命周期、和作用域是至关重要的，因为错误的使用会导致非常严重的并发问题</p><h4 id="SqlSessionFactoryBuilder："><a href="#SqlSessionFactoryBuilder：" class="headerlink" title="SqlSessionFactoryBuilder："></a>SqlSessionFactoryBuilder：</h4><ul><li>一旦创建了SqlSessionFactory，就不需要它了</li><li>局部变量</li></ul><h4 id="SqlSessionFactory："><a href="#SqlSessionFactory：" class="headerlink" title="SqlSessionFactory："></a>SqlSessionFactory：</h4><ul><li>说白了就是可以想象为：数据库连接池</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例。</strong></li><li>因此 SqlSessionFactory 的最佳作用域是应用作用域。</li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><h4 id="SqlSession："><a href="#SqlSession：" class="headerlink" title="SqlSession："></a>SqlSession：</h4><ul><li>连接到连接池的一个请求</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li><li>用完之后需要赶紧关闭，否则资源被占用！</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221714.png" alt="image-20200507171702543"></p><p>这里面的每一个Mapper，就代表一个具体的业务！</p><hr><h2 id="5-解决属性名和字段名不一致的问题："><a href="#5-解决属性名和字段名不一致的问题：" class="headerlink" title="5. 解决属性名和字段名不一致的问题："></a>5. 解决属性名和字段名不一致的问题：</h2><h3 id="1-起别名："><a href="#1-起别名：" class="headerlink" title="1. 起别名："></a>1. 起别名：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserID&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select id,name,pwd as password from mybatis.user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-resultMap："><a href="#2-resultMap：" class="headerlink" title="2. resultMap："></a>2. resultMap：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserID&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</li><li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li><code>ResultMap</code> 的优秀之处——你完全可以不用显式地配置它们。</li><li>如果这个世界总是这么简单就好了。</li></ul><hr><h2 id="6-日志："><a href="#6-日志：" class="headerlink" title="6. 日志："></a>6. 日志：</h2><h3 id="1-日志工厂："><a href="#1-日志工厂：" class="headerlink" title="1. 日志工厂："></a>1. 日志工厂：</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221715.png" alt="image-20200507192115861"><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221716.png" alt="image-20200507192220454"></p><ul><li>SLF4J </li><li>LOG4J 【掌握】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING【掌握】</li><li>NO_LOGGING</li></ul><hr><p><strong>STDOUT_LOGGING标准日志输出</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-LOG4J"><a href="#2-LOG4J" class="headerlink" title="2. LOG4J"></a>2. LOG4J</h3><p>什么是LOG4J ？</p><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件</li><li>我们也可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul><p>1.先导入log4j的包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/silentcow.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure></li><li><p>配置log4j为日志的实现</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p></li></ol><h3 id="3-简单使用log4j"><a href="#3-简单使用log4j" class="headerlink" title="3. 简单使用log4j"></a>3. 简单使用log4j</h3><p>1.要在使用log4j的类中，导入包</p><p>2.日志对象，参数为当前类的class</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);</span><br></pre></td></tr></table></figure><p>3.日志级别：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">&quot;info:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.debug(<span class="string">&quot;debug:进入了testLog4j&quot;</span>);</span><br><span class="line">logger.error(<span class="string">&quot;error:进入了testLog4j&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="7-分页："><a href="#7-分页：" class="headerlink" title="7. 分页："></a>7. 分页：</h2><p><strong>思考：为什么要分页？</strong></p><ul><li>减少数据的处理量</li></ul><p>使用Limit分页</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：select * from user limit startIndex,pageSize;</span><br><span class="line">        select * from user limit 0,1;</span><br></pre></td></tr></table></figure><h3 id="1-使用Mybatis实现分页，核心SQL"><a href="#1-使用Mybatis实现分页，核心SQL" class="headerlink" title="1. 使用Mybatis实现分页，核心SQL"></a><strong>1. 使用Mybatis实现分页，核心SQL</strong></h3><p>1.接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>2.Mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--分页查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserList(map);</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-RowBounds分页："><a href="#2-RowBounds分页：" class="headerlink" title="2.RowBounds分页："></a>2.RowBounds分页：</h3><p>不再使用SQL实现分页</p><p>1.接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>2.mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--分页查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RowBounds实现</span></span><br><span class="line">    <span class="comment">//第一页显示两个</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过Java代码层面实现分页</span></span><br><span class="line">    List&lt;User&gt; list = sqlSession.selectList(<span class="string">&quot;cn.silentcow.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="keyword">null</span>,rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-分页插件："><a href="#3-分页插件：" class="headerlink" title="3. 分页插件："></a>3. 分页插件：<img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221717.png" alt="image-20200508101630330"></h3><p><strong>如何使用分页插件：</strong></p><p><a href="https://pagehelper.github.io/docs/howtouse/">https://pagehelper.github.io/docs/howtouse/</a></p><hr><h2 id="8-使用注解开发："><a href="#8-使用注解开发：" class="headerlink" title="8. 使用注解开发："></a>8. 使用注解开发：</h2><p>1.注解在接口上实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>2.需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.silentcow.dao.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">    <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本质：反射机制实现</p><p>底层：动态代理</p><h2 id="9-注解CRUD"><a href="#9-注解CRUD" class="headerlink" title="9. 注解CRUD:"></a>9. 注解CRUD:</h2><p>我们可以在工具类创建的时候实现自动提交事务：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写接口，增加注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        User userByID = mapper.getUserByID(<span class="number">1</span>);</span><br><span class="line">        System.out.println(userByID);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        mapper.addUser(<span class="keyword">new</span> User(<span class="number">8</span>, <span class="string">&quot;六六&quot;</span>, <span class="string">&quot;123321&quot;</span>));</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        mapper.updateUser(<span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">&quot;天蓬元帅&quot;</span>,<span class="string">&quot;666666&quot;</span>));</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        mapper.deleteUser(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注意：我们必须要将接口绑定到我们的核心配置文件中】</p><h3 id="关于-Param-注解："><a href="#关于-Param-注解：" class="headerlink" title="关于@Param()注解："></a>关于@Param()注解：</h3><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上！</li><li>我们在SQL中引用的就是我们这里的@Param(“uid”)中设定的属性名！</li></ul><h2 id="10-Lombok："><a href="#10-Lombok：" class="headerlink" title="10. Lombok："></a>10. Lombok：</h2><p>1.安装Lombok插件</p><p>2.在项目中导入lombok的jar包</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.在实体类上加注解即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log4j</span>, <span class="meta">@Log4j2</span>, <span class="meta">@Slf4j</span>, <span class="meta">@XSlf4j</span>, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@With</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data：无参构造，get，set，toString,hashcode,equals</span><br><span class="line">@AllArgsConstructor 有参</span><br><span class="line">@NoArgsConstructor    无参</span><br><span class="line">@ToString</span><br><span class="line">@EqualsAndHashCode</span><br></pre></td></tr></table></figure><hr><h2 id="11-多对一处理："><a href="#11-多对一处理：" class="headerlink" title="11. 多对一处理："></a>11. 多对一处理：</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><ul><li>对个学生，对应一个老师</li><li>对于学生这边而言，<strong>关联</strong>。。。多个学生关联一个老师【多对一】</li><li>对于老师而言，<strong>集合</strong>。一个老师，有很多学生【一对多】</li></ul><h3 id="1-测试环境搭建"><a href="#1-测试环境搭建" class="headerlink" title="1. 测试环境搭建"></a>1. 测试环境搭建</h3><p>1.导入lombok</p><p>2.新建实体类Teacher，Student</p><p>3.建立Mapper接口</p><p>4.建立Mapper.xml文件</p><p>5.在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多，随心选】</p><p>6.测试查询是否能够成功！</p><h3 id="2-按照查询嵌套处理："><a href="#2-按照查询嵌套处理：" class="headerlink" title="2. 按照查询嵌套处理："></a>2. 按照查询嵌套处理：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;cn.silentcow.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        思路：</span></span><br><span class="line"><span class="comment">            1. 查询所有的学生信息</span></span><br><span class="line"><span class="comment">            2. 根据查询出来的学生的tid，寻找对应的老师</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.student;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--复杂的属性，我们需要单独处理      对象：association      集合：collection--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.teacher where id=#&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-按照结果嵌套处理："><a href="#3-按照结果嵌套处理：" class="headerlink" title="3. 按照结果嵌套处理："></a>3. 按照结果嵌套处理：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-一对多处理："><a href="#12-一对多处理：" class="headerlink" title="12. 一对多处理："></a>12. 一对多处理：</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>搭建环境，和上面一样：</p><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师，拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按照结果嵌套处理："><a href="#按照结果嵌套处理：" class="headerlink" title="按照结果嵌套处理："></a>按照结果嵌套处理：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher3&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid=t.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="按照查询嵌套处理："><a href="#按照查询嵌套处理：" class="headerlink" title="按照查询嵌套处理："></a>按照查询嵌套处理：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher4&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id=#&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherID&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherID&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid=#&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>1.关联：association    【多对一】</p><p>2.集合：collection        【一对多】</p><p>3.JavaType &amp;  ofType</p><p>​        1.JavaType    用来hiding实体类中属性的类型</p><p>​        2.ofType        用来指定映射到List或者集合中的pojo类型，泛型中的约束类型！</p><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li><li>如果问题不好排查错误，可以使用日志，建议使用Log4J</li></ul><hr><h2 id="13-动态SQL："><a href="#13-动态SQL：" class="headerlink" title="13. 动态SQL："></a>13. 动态SQL：</h2><p><strong>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</span><br><span class="line"></span><br><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure><p><strong>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</strong></p><p>建议：</p><ul><li>现在Mysql中写出完整的SQL，再对应的去修改成为我们的动态SQL实现通用即可！</li></ul><h3 id="搭建环境："><a href="#搭建环境：" class="headerlink" title="搭建环境："></a>搭建环境：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line"><span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line"><span class="string">`create_time`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="string">`views`</span> <span class="built_in">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>创建一个基础工程：</p><p>​    1.导包</p><p>​    2.编写配置文件</p><p>​    3.编写实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4.编写实体类对应Mapper接口和Mapper.xml文件</p><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询博客</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogIF</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">   <span class="comment">// map.put(&quot;title&quot;,&quot;Java如此简单&quot;);</span></span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">   <span class="comment">// map.put(&quot;title&quot;,&quot;Java如此简单&quot;);</span></span><br><span class="line">   <span class="comment">// map.put(&quot;author&quot;,&quot;狂神说&quot;);</span></span><br><span class="line">    map.put(<span class="string">&quot;views&quot;</span>,<span class="string">&quot;9999&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h3><p><strong>where</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            and title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>set</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> &gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">//map.put(&quot;title&quot;,&quot;Java如此简单2&quot;);</span></span><br><span class="line">     map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;狂神说2&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;34f6c5e17c354bf397c88cb1cd4b629c&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mapper.updateBlog(map);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL片段："><a href="#SQL片段：" class="headerlink" title="SQL片段："></a>SQL片段：</h3><p>有时候，我们可能会将一些功能的部分抽取出来，方便复用！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlog2</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><p>1.使用SQL标签抽取公共的部分</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span> &gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在需要使用的地方使用include标签引用即可&lt;select </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">id=&quot;queryBlog2&quot; parameterType=&quot;map&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>最好基于单表来定义SQL片段</li><li>不要存在where标签</li></ul><p><strong>ForEach</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogForeach</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">1</span>);</span><br><span class="line">    ids.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-缓存"><a href="#14-缓存" class="headerlink" title="14. 缓存"></a>14. 缓存</h2><h3 id="14-1-简介："><a href="#14-1-简介：" class="headerlink" title="14.1 简介："></a>14.1 简介：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询:     连接数据库，耗资源</span><br><span class="line">    一次查询的结果，给它暂存在一个可以查找取到的地方！    --&gt; 内存    ： 缓存</span><br><span class="line">    </span><br><span class="line">我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</span><br></pre></td></tr></table></figure><p>1、什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><p>2、为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul><p>3、什么样的数据能使用缓存？</p><ul><li>经常查询并且不经常改变的数据。</li></ul><h3 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p></li><li><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>一级缓存也叫本地缓存：</p><ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul><p><strong>一级缓存失效的四种情况</strong></p><p>一级缓存是SqlSession级别的缓存，是一直开启的，我们关闭不了它；</p><p>一级缓存失效情况：没有使用到当前的一级缓存，效果就是，还需要再向数据库中发起一次查询请求！</p><p>1、sqlSession不同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">   session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察结果：发现发送了两条SQL语句！</p><p>2、sqlSession相同，查询条件不同</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   User user2 = mapper2.queryUserById(<span class="number">2</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察结果：发现发送了两条SQL语句！很正常的理解</p><p>结论：<strong>当前缓存中，不存在这个数据</strong></p><p>3、sqlSession相同，两次查询之间执行了增删改操作！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;修改用户</span><br><span class="line">int updateUser(Map map);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;updateUser&quot; parameterType&#x3D;&quot;map&quot;&gt;</span><br><span class="line">  update user set name &#x3D; #&#123;name&#125; where id &#x3D; #&#123;id&#125;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testQueryUserById()&#123;</span><br><span class="line">   SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper &#x3D; session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user &#x3D; mapper.queryUserById(1);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">   HashMap map &#x3D; new HashMap();</span><br><span class="line">   map.put(&quot;name&quot;,&quot;kuangshen&quot;);</span><br><span class="line">   map.put(&quot;id&quot;,4);</span><br><span class="line">   mapper.updateUser(map);</span><br><span class="line"></span><br><span class="line">   User user2 &#x3D; mapper.queryUserById(1);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line"></span><br><span class="line">   System.out.println(user&#x3D;&#x3D;user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察结果：查询在中间执行了增删改操作后，重新执行了</p><p>结论：<strong>因为增删改操作可能会对当前数据产生影响</strong></p><p>4、sqlSession相同，手动清除一级缓存</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testQueryUserById()&#123;</span><br><span class="line">   SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper &#x3D; session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user &#x3D; mapper.queryUserById(1);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">   session.clearCache();&#x2F;&#x2F;手动清除缓存</span><br><span class="line"></span><br><span class="line">   User user2 &#x3D; mapper.queryUserById(1);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line"></span><br><span class="line">   System.out.println(user&#x3D;&#x3D;user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一级缓存就是一个map</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><ul><li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</p></li><li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p></li><li><p>工作机制</p></li><li><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><p><strong>使用步骤</strong></p><p>1、开启全局缓存 【mybatis-config.xml】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>2、去每个mapper.xml中配置使用二级缓存，这个配置非常简单；【xxxMapper.xml】</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;cache&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">官方示例&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;查看官方文档</span><br><span class="line">&lt;cache</span><br><span class="line"> eviction&#x3D;&quot;FIFO&quot;</span><br><span class="line"> flushInterval&#x3D;&quot;60000&quot;</span><br><span class="line"> size&#x3D;&quot;512&quot;</span><br><span class="line"> readOnly&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</span><br></pre></td></tr></table></figure><p>3、代码测试</p><ul><li>所有的实体类先实现序列化接口</li><li>测试代码</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void testQueryUserById()&#123;</span><br><span class="line">   SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">   SqlSession session2 &#x3D; MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">   UserMapper mapper &#x3D; session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 &#x3D; session2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user &#x3D; mapper.queryUserById(1);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   session.close();</span><br><span class="line"></span><br><span class="line">   User user2 &#x3D; mapper2.queryUserById(1);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user&#x3D;&#x3D;user2);</span><br><span class="line"></span><br><span class="line">   session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论</p></blockquote><ul><li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li><li>查出的数据都会被默认先放在一级缓存中</li><li>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</li></ul><h3 id="缓存原理："><a href="#缓存原理：" class="headerlink" title="缓存原理："></a><strong>缓存原理：</strong></h3><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221718.png" alt="image-20200510110617772"></p><p><strong>缓存原理图</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221719.png" alt="image-20200510105419963"></p><h3 id="自定义缓存-ehcache"><a href="#自定义缓存-ehcache" class="headerlink" title="自定义缓存-ehcache"></a>自定义缓存-ehcache</h3><p>Ehcache是一种广泛使用的java分布式缓存，用于通用缓存；</p><p>要在程序中使用ehcache，先要导包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.caches&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-ehcache&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>在mapper中指定使用eacache缓存实现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;cache type &#x3D; “org.mybatis.caches.ehcache.EhcacheCache” &#x2F;&gt; </span><br></pre></td></tr></table></figure><p>编写ehcache.xml文件，如果在加载时未找到/ehcache.xml资源或出现问题，则将使用默认配置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;259200&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;cloud_user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​                    合理的使用缓存，可以让我们程序的性能大大提升</p><h2 id="15-面试高频："><a href="#15-面试高频：" class="headerlink" title="15. 面试高频："></a>15. 面试高频：</h2><ul><li>Mysql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax的使用</title>
      <link href="/2020/08/06/Ajax/"/>
      <url>/2020/08/06/Ajax/</url>
      
        <content type="html"><![CDATA[<p>本视频教程来自B站@遇见狂神说，有需要的朋友可以去搜索观看他的视频学习。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><h2 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h2><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。</p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，GET、POST（1.9.0之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;)</span><br><span class="line">          async：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><strong>测试</strong></h2><p>1、配置web.xml 和 applicationContext.xml的配置文件</p><ul><li>web.xml</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--&lt;filter&gt;</span></span><br><span class="line"><span class="comment">        &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span></span><br><span class="line"><span class="comment">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span></span><br><span class="line"><span class="comment">        &lt;init-param&gt;</span></span><br><span class="line"><span class="comment">            &lt;param-name&gt;encoding&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment">            &lt;param-value&gt;utf-8&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment">        &lt;/init-param&gt;</span></span><br><span class="line"><span class="comment">    &lt;/filter&gt;</span></span><br><span class="line"><span class="comment">    &lt;filter-mapping&gt;</span></span><br><span class="line"><span class="comment">        &lt;filter-name&gt;encoding&lt;/filter-name&gt;</span></span><br><span class="line"><span class="comment">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span></span><br><span class="line"><span class="comment">    &lt;/filter-mapping&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.silentCow.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--静态资源过滤--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--JSON 乱码问题解决--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写一个AjaxController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ajax1</span><span class="params">(String name , HttpServletResponse response)</span> throwsIOException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><p>选取一个就可以了</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>4、编写index.jsp测试</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;%--&lt;script src=&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;--%&gt;</span><br><span class="line">   &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="function">function <span class="title">a1</span><span class="params">()</span></span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#txtName&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data,status) &#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">                   alert(status);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txtName&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><hr><h2 id="Springmvc实现"><a href="#Springmvc实现" class="headerlink" title="Springmvc实现"></a><strong>Springmvc实现</strong></h2><p>实体类user</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来获取一个集合对象，展示到前端页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">&quot;牛哥说java&quot;</span>, <span class="number">20</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">&quot;牛哥说前端&quot;</span>, <span class="number">19</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(<span class="string">&quot;牛哥说运维&quot;</span>, <span class="number">21</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery-3.5.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>, function (data) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                        html += <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">&quot;#content&quot;</span>).html(html);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;加载数据&quot;</span> id=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;tbody id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">    &lt;%--数据：后台--%&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="注册提示效果"><a href="#注册提示效果" class="headerlink" title="注册提示效果"></a>注册提示效果</h2><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">(String name,String pwd)</span> </span>&#123;</span><br><span class="line">    String msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name)) &#123;</span><br><span class="line">            msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;您输入的用户名有误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pwd != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;123456&quot;</span>.equals(pwd)) &#123;</span><br><span class="line">            msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            msg = <span class="string">&quot;您输入的密码有误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面 login.jsp</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: NiuLinXuan</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">10</span></span><br><span class="line">  Time: <span class="number">14</span>:<span class="number">26</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/static/js/jquery-3.5.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        <span class="function">function <span class="title">a1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">                data:&#123;<span class="string">&quot;name&quot;</span>:$(<span class="string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="line">                success: function (data) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.toString() === <span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                        $(<span class="string">&quot;#nameInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $(<span class="string">&quot;#nameInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">&quot;#nameInfo&quot;</span>).html(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">function <span class="title">a2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">                data: &#123;<span class="string">&quot;pwd&quot;</span>:$(<span class="string">&quot;#pwd&quot;</span>).val()&#125;,</span><br><span class="line">                success:function (data) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (data.toString() === <span class="string">&quot;OK&quot;</span>) &#123;</span><br><span class="line">                        $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(<span class="string">&quot;#pwdInfo&quot;</span>).html(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    用户名：&lt;input id=<span class="string">&quot;name&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span> type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">    &lt;span id=&quot;nameInfo&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    密码: &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;pwd&quot;</span> onblur=<span class="string">&quot;a2()&quot;</span>&gt;</span><br><span class="line">    &lt;span id=&quot;pwdInfo&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806215800.png" alt="image-20200610155451092"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL与JDBC精简笔记</title>
      <link href="/2020/08/06/MySQL%E4%B8%8EJDBC%E7%B2%BE%E8%AE%B2%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/08/06/MySQL%E4%B8%8EJDBC%E7%B2%BE%E8%AE%B2%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h1><h2 id="1-数据库的基本概念"><a href="#1-数据库的基本概念" class="headerlink" title="1.数据库的基本概念"></a>1.数据库的基本概念</h2><h3 id="1-数据库的英文单词："><a href="#1-数据库的英文单词：" class="headerlink" title="1.数据库的英文单词："></a>1.数据库的英文单词：</h3><p> DataBase  简称：DB</p><h3 id="2-什么是数据库？"><a href="#2-什么是数据库？" class="headerlink" title="2. 什么是数据库？"></a>2. 什么是数据库？</h3><p>用于存储和管理数据的仓库。</p><h3 id="3-数据库的特点："><a href="#3-数据库的特点：" class="headerlink" title="3 .数据库的特点："></a>3 .数据库的特点：</h3><blockquote><p>1.持久化存储数据的。其实数据库就是一个文件系统；</p><p>2.方便存储和管理数据；</p><p>3.使用了统一的方式操作数据库 — SQL</p></blockquote><h3 id="4-MySQL的安装和卸载"><a href="#4-MySQL的安装和卸载" class="headerlink" title="4. MySQL的安装和卸载"></a>4. MySQL的安装和卸载</h3><p>具体自己百度查询</p><h3 id="5-MySQL的登录和退出"><a href="#5-MySQL的登录和退出" class="headerlink" title="5. MySQL的登录和退出"></a>5. MySQL的登录和退出</h3><h4 id="1-MySQL的登录"><a href="#1-MySQL的登录" class="headerlink" title="1. MySQL的登录"></a>1. MySQL的登录</h4><blockquote><ol><li>​    方式1：mysql -uroot -p密码</li><li>​    方式2：mysql -h连接目标的IP地址 -uroot -p连接目标的密码</li><li>​    方式3：mysql –host=ip –user=root –password=连接目标的密码</li></ol></blockquote><h4 id="2-MySQL的退出"><a href="#2-MySQL的退出" class="headerlink" title="2. MySQL的退出"></a>2. MySQL的退出</h4><blockquote><ol><li>方式1：exit</li><li>方式2：quit</li></ol></blockquote><h2 id="2-SQL"><a href="#2-SQL" class="headerlink" title="2. SQL"></a>2. SQL</h2><h3 id="1-什么是SQL？"><a href="#1-什么是SQL？" class="headerlink" title="1.什么是SQL？"></a>1.什么是SQL？</h3><p>Structured Query Language：结构化查询语言</p><p>其实就是定义了操作所有关系数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p><h3 id="2-SQL通用语法"><a href="#2-SQL通用语法" class="headerlink" title="2. SQL通用语法"></a>2. SQL通用语法</h3><ol><li><p>SQL语句可以单行或多行书写，以分号结尾；</p></li><li><p>可使用空格和缩进来增强语句的可读性；</p></li><li><p>MySQL数据库的SQL语句不区分大小写，关键字建议用大写书写；</p></li><li><p>有3种注释方式：</p><blockquote><ol><li>单行注释：– 注释内容；（注意–后必须有空格）</li><li>单行注释：# 注释内容；（MySQL特有方法）</li><li>多行注释：/* 注释 */    </li></ol></blockquote></li></ol><h3 id="3-SQL分类"><a href="#3-SQL分类" class="headerlink" title="3. SQL分类"></a>3. SQL分类</h3><blockquote><ol><li><p>DDL（Data Definition Language）数据定义语言</p><p>用来定义数据库对象：数据库，表，列等。</p><p>关键字：create,drop,alter等。</p></li><li><p>DML（Data Manipulation Language）数据操作语言：</p><p>用来对数据库中表的数据进行增删改。</p><p>关键字：insert,delete,update等。</p></li><li><p>DQL：（Data Query Language）数据查询语言：</p><p>用来查询数据库中表的记录（数据）。</p><p>关键字：select,where等。</p></li><li><p>DCL：（Data Control Language）数据控制语言（了解）</p><p>用来定义数据库的访问权限和安全级别，及创建用户。</p><p>关键字：GRANT,REVOKE等。</p></li></ol></blockquote><h2 id="3-DDL：操作数据库、表"><a href="#3-DDL：操作数据库、表" class="headerlink" title="3. DDL：操作数据库、表"></a>3. DDL：操作数据库、表</h2><h3 id="1-操作数据库：CRUD"><a href="#1-操作数据库：CRUD" class="headerlink" title="1. 操作数据库：CRUD"></a>1. 操作数据库：CRUD</h3><h4 id="1-C-Create-：创建"><a href="#1-C-Create-：创建" class="headerlink" title="1. C(Create)：创建"></a>1. C(Create)：创建</h4><ul><li><p>创建数据库：</p><ul><li><p>create database 数据库名称;</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database db1;</span><br><span class="line">Query OK, 1 row affected (0.15 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建数据库，判断不存在，再创建：</p><ul><li><p>create database if not exists 数据库名称；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database if not exists db2;</span><br><span class="line">Query OK, 1 row affected (0.18 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建数据库，并制定字符集：</p><ul><li><p>create database 数据库名称 character set 字符集名；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database db3 character set gbk;</span><br><span class="line">Query OK, 1 row affected (0.16 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-R-Retrieve-：查询"><a href="#2-R-Retrieve-：查询" class="headerlink" title="2. R(Retrieve)：查询"></a>2. R(Retrieve)：查询</h4><ul><li><p>查询所有数据库的名称：</p><ul><li><p>show databases;</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| db1                |</span><br><span class="line">| db2                |</span><br><span class="line">| db3                |</span><br><span class="line">| db4                |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">8 rows in set (0.37 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询某个数据库的字符集：查询某个数据库的创建语句</p><ul><li><p>show create database 数据库名称;</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create database db3;</span><br><span class="line">+----------+------------------------------------------------------------------------------------------------+</span><br><span class="line">| Database | Create Database                                                                                |</span><br><span class="line">+----------+------------------------------------------------------------------------------------------------+</span><br><span class="line">| db3      | CREATE DATABASE &#96;db3&#96; &#x2F;*!40100 DEFAULT CHARACTER SET gbk *&#x2F; &#x2F;*!80016 DEFAULT ENCRYPTION&#x3D;&#39;N&#39; *&#x2F; |</span><br><span class="line">+----------+------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-U-Update-：修改"><a href="#3-U-Update-：修改" class="headerlink" title="3. U(Update)：修改"></a>3. U(Update)：修改</h4><ul><li><p>修改数据库的字符集</p><ul><li><p>alter database 数据库名称 character set 字符集名称；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter database db4 character set utf8;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.49 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="4-D-Delete-：删除"><a href="#4-D-Delete-：删除" class="headerlink" title="4. D(Delete)：删除"></a>4. D(Delete)：删除</h4><ul><li><p>删除数据库</p><ul><li><p>drop database 数据库名称；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database db4;</span><br><span class="line">Query OK, 0 rows affected (0.21 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>判断数据库存在，存在再删除</p><ul><li><p>drop database if exists 数据库名称；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop database if exists db3;</span><br><span class="line">Query OK, 0 rows affected (0.17 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="5-使用数据库"><a href="#5-使用数据库" class="headerlink" title="5. 使用数据库"></a>5. 使用数据库</h4><ul><li><p>查询当前正在使用的数据库名称</p><ul><li><p>select database();</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select database();</span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| NULL       |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用数据库：</p><ul><li><p>use 数据库名称;</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use db2;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select database();</span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| db2        |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-操作表："><a href="#2-操作表：" class="headerlink" title="2.操作表："></a>2.操作表：</h3><h4 id="1-C-Create-：创建-1"><a href="#1-C-Create-：创建-1" class="headerlink" title="1. C(Create)：创建"></a>1. C(Create)：创建</h4><h5 id="1-语法"><a href="#1-语法" class="headerlink" title="1. 语法"></a>1. 语法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    列名1 数据类型1,</span><br><span class="line">    列名2 数据类型2,</span><br><span class="line">    ...</span><br><span class="line">    列名n 数据类型n</span><br><span class="line">);</span><br><span class="line">* 注意：最后一列，不需要加逗号（，）</span><br></pre></td></tr></table></figure><h5 id="2-数据库类型"><a href="#2-数据库类型" class="headerlink" title="2. 数据库类型"></a>2. 数据库类型</h5><ol><li><p>int：整数类型</p><ul><li>age int,</li></ul></li><li><p>double : 小数类型</p><ul><li>score double(5,2)</li></ul><p>*注意 ：5表示总共取5位，2表示小数点后2位</p></li><li><p>date：日期，只包含年月日，yyyy-MM-dd </p></li><li><p>datetime：日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss</p></li><li><p>timestamp：时间错类型（自动赋值使用当前系统时间）：包含年月日时分秒：yyyy-MM-dd HH:mm:ss</p><ul><li>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</li></ul></li><li><p>varchar：字符串</p><ul><li>name varchar(20)：表示姓名最大占用20个字符<ul><li>zhangsan 8个字符      张三 2个字符</li></ul></li></ul></li></ol><ul><li><p>练习：</p><ul><li><p>在db1数据库中创建一个名为student数据表，</p></li><li><p>里面包含的列有id，name，age，score，birthday，创建日期（默认）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use db1;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table student(</span><br><span class="line">    -&gt;          id int,</span><br><span class="line">    -&gt;          name varchar(20),</span><br><span class="line">    -&gt;          age int,</span><br><span class="line">    -&gt;          score double(3,1),</span><br><span class="line">    -&gt;          birthday date,</span><br><span class="line">    -&gt;          insert_time timestamp</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.28 sec)</span><br></pre></td></tr></table></figure><p>展示表结构：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc student;</span><br><span class="line">+-------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field       | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------------+-------------+------+-----+---------+-------+</span><br><span class="line">| id          | int         | YES  |     | NULL    |       |</span><br><span class="line">| name        | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">| age         | int         | YES  |     | NULL    |       |</span><br><span class="line">| score       | double(3,1) | YES  |     | NULL    |       |</span><br><span class="line">| birthday    | date        | YES  |     | NULL    |       |</span><br><span class="line">| insert_time | timestamp   | YES  |     | NULL    |       |</span><br><span class="line">+-------------+-------------+------+-----+---------+-------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="3-复制表"><a href="#3-复制表" class="headerlink" title="3.复制表"></a>3.复制表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名 like 被复制的表名;</span><br></pre></td></tr></table></figure><h4 id="2-R-Retrieve-：查询-1"><a href="#2-R-Retrieve-：查询-1" class="headerlink" title="2. R(Retrieve)：查询"></a>2. R(Retrieve)：查询</h4><ul><li><p>查询某个数据库中所有的表名称</p><ul><li><p>show tables;</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------------------+</span><br><span class="line">| Tables_in_mysql           |</span><br><span class="line">+---------------------------+</span><br><span class="line">| columns_priv              |</span><br><span class="line">| component                 |</span><br><span class="line">| db                        |</span><br><span class="line">| user                      |</span><br><span class="line">+---------------------------+</span><br><span class="line">4 rows in set (0.10 sec)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询表结构</p><ul><li><p>desc 表明；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc db;</span><br><span class="line">+-----------------------+---------------+------+-----+---------+-------+</span><br><span class="line">| Field                 | Type          | Null | Key | Default | Extra |</span><br><span class="line">+-----------------------+---------------+------+-----+---------+-------+</span><br><span class="line">| Host                  | char(255)     | NO   | PRI |         |       |</span><br><span class="line">| Db                    | char(64)      | NO   | PRI |         |       |</span><br><span class="line">| User                  | char(32)      | NO   | PRI |         |       |</span><br><span class="line">+-----------------------+---------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-U-Update-：修改-1"><a href="#3-U-Update-：修改-1" class="headerlink" title="3. U(Update)：修改"></a>3. U(Update)：修改</h4><h5 id="1-修改表名"><a href="#1-修改表名" class="headerlink" title="1. 修改表名"></a>1. 修改表名</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 rename to 新的表名;</span><br></pre></td></tr></table></figure><h5 id="2-修改表的字符集"><a href="#2-修改表的字符集" class="headerlink" title="2. 修改表的字符集"></a>2. 修改表的字符集</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 character set 新字符集名称;</span><br></pre></td></tr></table></figure><h5 id="3-添加一列"><a href="#3-添加一列" class="headerlink" title="3. 添加一列"></a>3. 添加一列</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add 列名 数据类型;</span><br></pre></td></tr></table></figure><h5 id="4-修改列名称、类型"><a href="#4-修改列名称、类型" class="headerlink" title="4.修改列名称、类型"></a>4.修改列名称、类型</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.alter table 表名 change 列名 新列名 新数据类型;</span><br><span class="line">2.alter table 表名 modify 列名 新数据类型;    -- 只修改列的数据类型</span><br></pre></td></tr></table></figure><h5 id="5-删除列"><a href="#5-删除列" class="headerlink" title="5. 删除列"></a>5. 删除列</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop 列名;</span><br></pre></td></tr></table></figure><h4 id="4-D-Delete-：删除-1"><a href="#4-D-Delete-：删除-1" class="headerlink" title="4. D(Delete)：删除"></a>4. D(Delete)：删除</h4><ol><li>drop table 表名;</li><li>drop table if exists 表名;</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; drop table if exists stu;</span><br><span class="line">Query OK, 0 rows affected (0.68 sec)</span><br></pre></td></tr></table></figure><h2 id="4-DML-增删改表中数据"><a href="#4-DML-增删改表中数据" class="headerlink" title="4. DML: 增删改表中数据"></a>4. DML: 增删改表中数据</h2><h3 id="1-添加数据："><a href="#1-添加数据：" class="headerlink" title="1. 添加数据："></a>1. 添加数据：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：</span><br><span class="line">insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><ol><li><p>列名和值要一一对应；</p></li><li><p>如果表名后，不定义列名，则默认给所有列添加值；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名 values(值1,值2,...值n);</span><br></pre></td></tr></table></figure></li><li><p>除了数字类型，其它类型需要使用引号（单双都可以）引起来。</p></li></ol></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO stu(id,NAME,age) VALUES(1001,&#39;露娜&#39;,18); -- 给指定列添加数据</span><br><span class="line"></span><br><span class="line">INSERT INTO stu VALUES(1002,&#39;貂蝉&#39;,19,99.9,&#39;2000-01-01&#39;,NULL); -- 默认全部添加数据</span><br><span class="line"></span><br><span class="line">SELECT * FROM stu; -- 查询表中的数据</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221735.png" alt="image-20200405094412034"></p></li></ul><h3 id="2-删除数据："><a href="#2-删除数据：" class="headerlink" title="2. 删除数据："></a>2. 删除数据：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：</span><br><span class="line">delete from 表名 where 条件; -- 删除具体某一行数据</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><ol><li><p>如果不加条件，则删除表中所有记录；</p></li><li><p>如果要删除所有记录：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.delete from 表名; --不推荐使用。有多少条记录就会执行多少次删除操作，效率低；</span><br><span class="line">2.truncate table 表名； --推荐使用，效率更高；先删除表，然后再创建一张一模一样的表。</span><br></pre></td></tr></table></figure></li></ol></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM stu WHERE id&#x3D;1001;</span><br><span class="line"></span><br><span class="line">DELETE FROM stu;</span><br><span class="line"></span><br><span class="line">TRUNCATE TABLE stu;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-修改数据："><a href="#3-修改数据：" class="headerlink" title="3. 修改数据："></a>3. 修改数据：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：</span><br><span class="line">update 表名 set 列名 &#x3D; 值1,列名2 &#x3D; 值2，... [where 条件];</span><br></pre></td></tr></table></figure><ul><li><p>注意：<br>  如果不加任何条件则会将表中所有记录全部修改。</p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE stu SET age &#x3D; 20 WHERE id &#x3D; 1002; -- 修改某一列某一数据</span><br><span class="line"></span><br><span class="line">UPDATE stu SET age &#x3D; 21; -- 修改表中全部某一数据的值为统一的值</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-DQL-查询表中的记录"><a href="#5-DQL-查询表中的记录" class="headerlink" title="5. DQL: 查询表中的记录"></a>5. DQL: 查询表中的记录</h2><h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    字段列表</span><br><span class="line">from</span><br><span class="line">    表名列表</span><br><span class="line">where</span><br><span class="line">    条件列表</span><br><span class="line">group by</span><br><span class="line">    分组字段</span><br><span class="line">having</span><br><span class="line">    分组之后的条件</span><br><span class="line">order by</span><br><span class="line">    排序</span><br><span class="line">limit</span><br><span class="line">    分页限定</span><br></pre></td></tr></table></figure><h3 id="2-基础查询："><a href="#2-基础查询：" class="headerlink" title="2. 基础查询："></a>2. 基础查询：</h3><h4 id="1-多个字段的-查询"><a href="#1-多个字段的-查询" class="headerlink" title="1.多个字段的 查询"></a>1.多个字段的 查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段名1,字段名2,... from 表名;</span><br></pre></td></tr></table></figure><h4 id="2-去重重复："><a href="#2-去重重复：" class="headerlink" title="2. 去重重复："></a>2. 去重重复：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">distinct</span><br></pre></td></tr></table></figure><h4 id="3-计算列："><a href="#3-计算列：" class="headerlink" title="3. 计算列："></a>3. 计算列：</h4><ul><li><p>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）；</p></li><li><p>ifnull(表达式1，表达式2)</p><blockquote><ol><li>null参加的运算，计算结果都为null；</li><li>表达式1：代表哪个字段需要判断是否为null；</li><li>表达式2：如果该字段为null后的替换纸。</li></ol></blockquote></li></ul><h4 id="4-起别名："><a href="#4-起别名：" class="headerlink" title="4. 起别名："></a>4. 起别名：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">as ： as也可以省略</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表</span><br><span class="line">CREATE TABLE student (</span><br><span class="line">    id INT, -- 编号</span><br><span class="line">    NAME VARCHAR(20), -- 姓名</span><br><span class="line">    age INT, -- 年龄</span><br><span class="line">    sex VARCHAR(5), -- 性别</span><br><span class="line">    address VARCHAR(100), -- 地址</span><br><span class="line">    math INT, -- 数学</span><br><span class="line">    english INT -- 英语</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO student(id,NAME,age,sex,address,math,english) VALUES(1,&#39;马云&#39;,55,&#39;男&#39;,&#39;杭州&#39;,66,78),</span><br><span class="line">(2,&#39;马化腾&#39;,45,&#39;女&#39;,&#39;深圳&#39;,98,87),(3,&#39;马克涛&#39;,55,&#39;男&#39;,&#39;香港&#39;,56,77),(4,&#39;柳岩&#39;,20,&#39;女&#39;,&#39;湖南&#39;,76,65),</span><br><span class="line">(5,&#39;柳青&#39;,20,&#39;男&#39;,&#39;湖南&#39;,86,NULL),(6,&#39;刘德华&#39;,57,&#39;男&#39;,&#39;香港&#39;,99,99),</span><br><span class="line">(7,&#39;马德&#39;,22,&#39;女&#39;,&#39;香港&#39;,99,99),(8,&#39;德玛西亚&#39;,18,&#39;男&#39;,&#39;南京&#39;,56,65);</span><br><span class="line"></span><br><span class="line">-- 查询编号和姓名</span><br><span class="line">SELECT id,NAME FROM student;</span><br><span class="line"></span><br><span class="line">-- 查询地址</span><br><span class="line">SELECT address FROM student;</span><br><span class="line"></span><br><span class="line">-- 去重，地址里面有重复的</span><br><span class="line">SELECT DISTINCT address FROM student;</span><br><span class="line"></span><br><span class="line">-- 计算每个人成绩总分</span><br><span class="line">SELECT NAME,math,english,math + english FROM student;</span><br><span class="line"></span><br><span class="line">-- 因为null参加的运算，结果都为null</span><br><span class="line">-- 所以利用ifnull计算</span><br><span class="line">SELECT DISTINCT NAME,math,english,math + IFNULL(english,0) FROM student;</span><br><span class="line"></span><br><span class="line">-- 起别名</span><br><span class="line">SELECT DISTINCT NAME AS 姓名,math AS 数学,english AS 英语,math + IFNULL(english,0) AS 总分 FROM student;</span><br><span class="line"></span><br><span class="line">-- 起别名 中 AS 也可以省略</span><br><span class="line">SELECT DISTINCT NAME 姓名,math 数学,english 英语,math + IFNULL(english,0) 总分 FROM student;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-条件查询"><a href="#3-条件查询" class="headerlink" title="3. 条件查询"></a>3. 条件查询</h3><ol><li>where子句后跟条件；</li><li>运算符<ul><li>&lt;, &gt;, &lt;=, &gt;=, =, &lt;&gt;</li><li>between…and</li><li>in(集合)</li><li>like</li><li>is null</li><li>and 或 &amp;&amp;</li><li>or 或 ||</li><li>not 或 ！</li></ul></li></ol><ul><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询年龄大于20的人</span><br><span class="line">SELECT * FROM student WHERE age &gt; 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄等于20的人</span><br><span class="line">SELECT * FROM student WHERE age &#x3D; 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于等于20的人</span><br><span class="line">SELECT * FROM student WHERE age &gt;&#x3D; 20;</span><br><span class="line"></span><br><span class="line">-- 查询年龄不等于20的人</span><br><span class="line">SELECT * FROM student WHERE age !&#x3D; 20;    -- 方式1</span><br><span class="line">SELECT * FROM student WHERE age &lt;&gt; 20;    -- 方式2</span><br><span class="line"></span><br><span class="line">-- 查询年龄大于等于20，小于等于30的人</span><br><span class="line">SELECT * FROM student WHERE age &gt;&#x3D; 20 AND age &lt;&#x3D; 30;  -- 方式1</span><br><span class="line">SELECT * FROM student WHERE age &gt;&#x3D; 20 &amp;&amp; age &lt;&#x3D; 30;  -- 方式2</span><br><span class="line">SELECT * FROM student WHERE age BETWEEN 20 AND 30;  -- 方式3</span><br><span class="line"></span><br><span class="line">-- 查询年龄为22岁，18岁，25岁的人的信息</span><br><span class="line">SELECT * FROM student WHERE age &#x3D; 22 OR age &#x3D; 18 OR age &#x3D; 25;  -- 方式1</span><br><span class="line">SELECT * FROM student WHERE age IN (22,18,25);</span><br><span class="line"></span><br><span class="line">-- 查询英语成绩为null的人</span><br><span class="line">-- select * from student where english &#x3D; null;    -- 错误写法,NULL值不能使用 &#x3D; 或者 !&#x3D; 进行判断</span><br><span class="line">SELECT * FROM student WHERE english IS NULL;</span><br><span class="line"></span><br><span class="line">-- 查询英语 成绩不为NULL的人</span><br><span class="line">SELECT * FROM student WHERE english IS NOT NULL;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>模糊查询（ like ）：<ul><li>占位符：<ul><li>_ ：单个任意字符；</li><li>% ：多个任意字符</li></ul></li></ul></li></ol><ul><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询姓马的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#39;马%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询名字第二个字为化的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#39;_化%&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询名字是3个 字的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#39;___&#39;;  -- &quot;三个_&quot;</span><br><span class="line"></span><br><span class="line">-- 查询名字中包含德的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#39;%德%&#39;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-排序查询"><a href="#4-排序查询" class="headerlink" title="4. 排序查询"></a>4. 排序查询</h3><ul><li><p>语法： </p><ul><li>order by 子句</li><li>order by 排序字段1 排序方式1，排序字段2 排序方式2…</li></ul></li><li><p>排序方式：</p><ul><li>ASC ：升序，默认的；</li><li>DESC : 降序。</li></ul></li><li><p>注意：</p><ul><li>如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</li></ul></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询数学成绩，按升序排序</span><br><span class="line">SELECT * FROM student ORDER BY math ASC;</span><br><span class="line"></span><br><span class="line">-- 查询数学成绩，按降序排序</span><br><span class="line">SELECT * FROM student ORDER BY math DESC;</span><br><span class="line"></span><br><span class="line">-- 查询数学成绩，按照降序排序，如果数学成绩一样，按照英语成绩降序排序</span><br><span class="line">SELECT * FROM student ORDER BY math DESC,english DESC;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-聚合函数"><a href="#5-聚合函数" class="headerlink" title="5. 聚合函数"></a>5. 聚合函数</h3><ol><li><p>count : 计算个数</p><ul><li>一般选择非空的列：主键；</li><li>count( * )</li></ul></li><li><p>max ：计算最大值</p></li><li><p>min ：计算最小值</p></li><li><p>sum ：计算和</p></li><li><p>avg ：计算平均值</p><hr><p><strong>注意</strong>：</p><ul><li>聚合函数的计算，排除null值；<ul><li>解决方案：<ol><li>选择不包含非空的列进行计算；</li><li>ifnull函数。</li></ol></li></ul></li></ul></li></ol><ul><li>示例：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 计算数学个数</span><br><span class="line">SELECT COUNT(math) FROM student;</span><br><span class="line"></span><br><span class="line">-- 计算英语个数</span><br><span class="line">SELECT COUNT(IFNULL(english,0)) FROM student; -- 如果为null,可使用ifnull函数</span><br><span class="line"></span><br><span class="line">-- 计算个数</span><br><span class="line">SELECT COUNT(*) FROM student; -- 哪列没有NULL，就自动选取哪列计算个数</span><br><span class="line"></span><br><span class="line">-- 计算数学最高分</span><br><span class="line">SELECT MAX(math) FROM student;</span><br><span class="line"></span><br><span class="line">-- 计算数学最小分</span><br><span class="line">SELECT MIN(math) FROM student;</span><br><span class="line"></span><br><span class="line">-- 计算数学总和</span><br><span class="line">SELECT SUM(math) FROM student;</span><br><span class="line"></span><br><span class="line">-- 计算数学平均分</span><br><span class="line">SELECT AVG(math) FROM student;</span><br></pre></td></tr></table></figure><h3 id="6-分组查询"><a href="#6-分组查询" class="headerlink" title="6. 分组查询"></a>6. 分组查询</h3><ol><li><p>语法：group by 分组字段；</p></li><li><p>注意：</p><blockquote><ul><li>分组之后查询的字段：分组字段、聚合函数</li><li>where 和 having 的区别？<ol><li>where 在分组之前进行限定，如果不满足条件。则不参与分组；having在分组之后限定，如果不满足结果，则不会被查询出来。</li><li>where 后 不可以 跟聚合函数，having 可以进行聚合函数的判断。</li></ol></li></ul></blockquote></li></ol><ul><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-- 按照性别分组，分别查询男、女同学的数学平均分</span><br><span class="line">SELECT sex,AVG(math) GROUP BY sex;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组，分别查询男、女同学的数学平均分、人数</span><br><span class="line">SELECT sex,AVG(math),COUNT(id) FROM student GROUP BY sex ;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组，分别查询男、女同学的数学平均分、人数,要求：分数低于70分的，不参与分组</span><br><span class="line">SELECT sex,AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;</span><br><span class="line"></span><br><span class="line">-- 按照性别分组，分别查询男、女同学的数学平均分、人数,要求：分数低于70分的，不参与分组,</span><br><span class="line">-- 分组之后，人数要大于2个人</span><br><span class="line">SELECT sex,AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2; -- 方式1</span><br><span class="line">SELECT sex,AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2; -- 方式2</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-分页查询"><a href="#7-分页查询" class="headerlink" title="7. 分页查询"></a>7. 分页查询</h3><ol><li><p>语法：</p><ul><li>limit 开始的索引,每页查询的条数;</li></ul></li><li><p>公式：</p><ul><li>$$<br>开始的索引 = （当前的页码 - 1） * 每页显示的条数<br>$$</li></ul></li><li><p>注意： limit 是一个MySQL“方言”。</p></li></ol><hr><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 每页显示3条记录</span><br><span class="line">SELECT * FROM student LIMIT 0,3; -- 第1页</span><br><span class="line">SELECT * FROM student LIMIT 3,3; -- 第2页</span><br><span class="line">SELECT * FROM student LIMIT 6,3; -- 第3页</span><br></pre></td></tr></table></figure><h2 id="8-约束"><a href="#8-约束" class="headerlink" title="8. 约束"></a>8. 约束</h2><h3 id="1-概念和分类"><a href="#1-概念和分类" class="headerlink" title="1. 概念和分类"></a>1. 概念和分类</h3><ul><li>概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性。</li><li>分类：<ol><li>主键约束：primary key</li><li>非空约束：not null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ol></li></ul><h3 id="2-非空约束：not-null"><a href="#2-非空约束：not-null" class="headerlink" title="2. 非空约束：not null"></a>2. 非空约束：not null</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表时添加非空约束</span><br><span class="line">CREATE TABLE stu (</span><br><span class="line">    id INT,</span><br><span class="line">    NAME VARCHAR(20) NOT NULL  -- name为非空</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建完表后，再添加非空约束</span><br><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</span><br><span class="line"></span><br><span class="line">-- 删除约束</span><br><span class="line">ALTER TABLE stu MODIFY NAME VARCHAR(20);  -- 相当于修改</span><br></pre></td></tr></table></figure><h3 id="3-唯一约束：UNIQUE"><a href="#3-唯一约束：UNIQUE" class="headerlink" title="3. 唯一约束：UNIQUE"></a>3. 唯一约束：UNIQUE</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表时，添加唯一约束</span><br><span class="line">CREATE TABLE stu (</span><br><span class="line">    id INT,</span><br><span class="line">    phone_num VARCHAR(20) UNIQUE</span><br><span class="line">);</span><br><span class="line">* 注意：在mySQL中，唯一约束限定的列的值可以有多个NULL</span><br><span class="line"></span><br><span class="line">-- 删除唯一约束</span><br><span class="line">ALTER TABLE stu DROP INDEX phone_num;</span><br><span class="line"></span><br><span class="line">-- 在创建表后，添加唯一约束</span><br><span class="line">ALTER TABLE stu MODIFY phone_num VARCHAR(20) UNIQUE;</span><br></pre></td></tr></table></figure><h3 id="4-主键约束：primary-key"><a href="#4-主键约束：primary-key" class="headerlink" title="4. 主键约束：primary key"></a>4. 主键约束：primary key</h3><ol><li><p>注意：</p><ol><li>含义：<strong>非空且唯一</strong>；</li><li>一张表只能有一个字段为主键；</li><li>主键就是表中记录的唯一标识。</li></ol></li><li><p>在创建表时，添加主键约束；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu(</span><br><span class="line">    id INT PRIMARY KEY,</span><br><span class="line">    NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除主键；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE stu DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure></li><li><p>创建完表后，添加主键。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY id INT PRIMARY KEY;</span><br></pre></td></tr></table></figure></li></ol><hr><ul><li><h4 id="自动增长"><a href="#自动增长" class="headerlink" title="自动增长"></a>自动增长</h4><ol><li><p>概念：</p><p>如果某一列是数值类型的，使用 auto_increment 可以来完成自动增长；</p></li><li><p>在创建表时，添加主键约束，并且完成主键自动增长；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加数据</span><br><span class="line">INSERT INTO stu(id,NAME) VALUES (1,&#39;露娜&#39;);</span><br><span class="line">INSERT INTO stu(id,NAME) VALUES (NULL,&#39;貂蝉&#39;);</span><br></pre></td></tr></table></figure></li><li><p>删除自动增长；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY id INT ;</span><br></pre></td></tr></table></figure></li><li><p>创建完表后，添加自动增长。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h5 id="5-外键约束：foreign-key"><a href="#5-外键约束：foreign-key" class="headerlink" title="5. 外键约束：foreign key"></a>5. 外键约束：foreign key</h5><ol><li><p>概述：</p><ul><li>让表与表产生关系，从而保证数据的正确性。</li></ul></li><li><p>在创建表时，添加外键</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：</span><br><span class="line">create table 表名 (</span><br><span class="line">    ...</span><br><span class="line">    外键列,</span><br><span class="line">    constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除外键</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 drop foreign key 外键名称;</span><br></pre></td></tr></table></figure></li><li><p>创建表之后，添加外键</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add constraint 外键名称 foreign key (外键字段名称) references 主表名称(主列表名称);</span><br></pre></td></tr></table></figure><hr><ul><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 主表必须先创建，否则外键创建失败</span><br><span class="line">CREATE TABLE sch (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    address VARCHAR(20)  -- 地址</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE stu (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    NAME VARCHAR(20),</span><br><span class="line">    address_id INT, -- 外键列</span><br><span class="line">    -- constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</span><br><span class="line">    CONSTRAINT stu_sch_fy FOREIGN KEY (address_id) REFERENCES sch(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO sch(id,address) VALUES (1,&#39;北京&#39;);</span><br><span class="line">INSERT INTO sch(id,address) VALUES (NULL,&#39;西安&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO stu(NAME,address_id) VALUES (&#39;张三&#39;,1),(&#39;露娜&#39;,1),(&#39;貂蝉&#39;,2),(&#39;吕布&#39;,2),(&#39;赵云&#39;,1);</span><br><span class="line">-- --------------------------分隔符-------------------------------------------</span><br><span class="line"></span><br><span class="line">-- 删除外键</span><br><span class="line">ALTER TABLE stu DROP FOREIGN KEY stu_sch_fy;</span><br><span class="line"></span><br><span class="line">-- 创建完表后再添加外键</span><br><span class="line">ALTER TABLE stu ADD CONSTRAINT stu_sch_fy FOREIGN KEY (address_id) REFERENCES sch(id);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="6-级联操作"><a href="#6-级联操作" class="headerlink" title="6.级联操作"></a>6.级联操作</h5><ul><li><p>添加级联操作：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：</span><br><span class="line">alter table 表名 add constraint 外键名称</span><br><span class="line">    foreign key (外键字段名称) references 主表名称(主表列名称) on update cascade on delete cascade;</span><br></pre></td></tr></table></figure></li><li><p>分类：</p><ol><li>级联更新：on update cascade</li><li>级联删除：on delete cascade</li></ol></li></ul><h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="* 数据库的备份和还原"></a>* 数据库的备份和还原</h2><ol><li><p>命令行：</p><blockquote><ul><li>语法：<ul><li>备份：mysqldump -u用户名 -p密码 要备份的数据库名 &gt; 保存的路径</li><li>还原：<ol><li>登录数据库</li><li>创建数据库</li><li>使用数据库；</li><li>执行文件：source 文件路径；</li></ol></li></ul></li></ul></blockquote></li><li><p>图形化工具：<br>$$<br>百度查询<br>$$</p></li></ol><hr><hr><h1 id="二、数据库的设计"><a href="#二、数据库的设计" class="headerlink" title="二、数据库的设计"></a>二、数据库的设计</h1><h2 id="1-多表之间的关系："><a href="#1-多表之间的关系：" class="headerlink" title="1. 多表之间的关系："></a>1. 多表之间的关系：</h2><h3 id="1-一对一："><a href="#1-一对一：" class="headerlink" title="1. 一对一："></a>1. 一对一：</h3><ul><li>如：人和身份证</li><li>分析：一个人只有一个身份证，一个身份证只能对应一个人</li><li>实现方式：可以在任意一方添加唯一外键指向另一方的主键。</li></ul><h3 id="2-一对多（多对一）："><a href="#2-一对多（多对一）：" class="headerlink" title="2.一对多（多对一）："></a>2.一对多（多对一）：</h3><ul><li>如：部门和员工</li><li>分析：一个部门有多个员工，一个员工只能对应一个部门</li><li>实现方式：在多的一方建立外键，指向一的一方的主键。</li></ul><h3 id="3-多对多："><a href="#3-多对多：" class="headerlink" title="3. 多对多："></a>3. 多对多：</h3><ul><li><p>如：学生和课程</p></li><li><p>分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</p></li><li><p>实现方式：</p><p>多对多关系实现需要借助第三张中间表；</p><p>中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键。</p></li></ul><h3 id="4-联合主键"><a href="#4-联合主键" class="headerlink" title="4.联合主键"></a>4.联合主键</h3><ul><li><p>示例</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_uy (</span><br><span class="line">    uid INT , -- 线路id</span><br><span class="line">    yid INT , -- 用户id</span><br><span class="line">    -- 创建复合主键</span><br><span class="line">    PRIMARY KEY(uid,yid), -- 联合主键</span><br><span class="line">    -- 分别相互关联对方表的主键</span><br><span class="line">    FOREIGN KEY (uid) REFERENCES tab_yead (yid),</span><br><span class="line">    FOREIGN KEY (yid) REFERENCES tab_user (uid)</span><br><span class="line">    </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-数据库设计的范式："><a href="#2-数据库设计的范式：" class="headerlink" title="2. 数据库设计的范式："></a>2. 数据库设计的范式：</h2><h3 id="1-概述："><a href="#1-概述：" class="headerlink" title="1. 概述："></a>1. 概述：</h3><blockquote><p>设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</p><p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）</p></blockquote><h3 id="2-函数依赖："><a href="#2-函数依赖：" class="headerlink" title="2. 函数依赖："></a>2. 函数依赖：</h3><ol><li><p>函数依赖：A–&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属                    性的值，则称B依赖于A；</p><blockquote><p>​        例如：学号 –&gt; 姓名</p></blockquote></li><li><p>完全函数依赖：A –&gt; B,如果A是一个属性组，则B属性值的确定需                          要依赖于A属性组中所有的属性值；</p><blockquote><p>​        例如：（学号，课程名称） –&gt; 分数</p></blockquote></li><li><p>部分函数依赖：A –&gt; B，如果A是一个属性组，则B属性值的确定                       只需要依赖于A属性组中某一些值即可；</p><blockquote><p>​        例如：（学号，课程名称） –&gt; 姓名</p></blockquote></li><li><p>传递函数依赖：A–&gt;B,B –&gt; C，如果通过A属性(属性组)的值，可                        以确定唯一B属性的值，在通过B属性(属性组)的值可                    以确定唯一C属性的值，则称C传递函数依赖于A；</p><blockquote><p>​        例如：学号 –&gt; 系名，系名 –&gt; 系主任</p></blockquote></li><li><p>码：如果在一张表中，一个属性或属性组，被其他所有属性完全        依赖，则称这个属性(属性组)为该表的码。</p><blockquote><p>​        例如：该表中码为：（学号，课程名称）</p></blockquote><blockquote><pre><code>    *  主属性：码属性组中所有的属性    *  非主属性：除过码属性组的属性</code></pre></blockquote></li></ol><h3 id="3-三大范式："><a href="#3-三大范式：" class="headerlink" title="3. 三大范式："></a>3. 三大范式：</h3><ul><li><strong>第一范式（1NF）</strong>：每一列都是不可分割的院子数据项（只要能表能出来，都符合第一范式）；</li><li><strong>第二范式（2NF）</strong>：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的函数部分依赖）；</li><li><strong>第三范式（3NF</strong>）：在2NF基础上，任何非主属性不能依赖于其它非主属性（在2NF基础上消除传递依赖）。</li></ul><hr><h1 id="三、多表查询"><a href="#三、多表查询" class="headerlink" title="三、多表查询"></a>三、多表查询</h1><h2 id="1-笛卡尔积："><a href="#1-笛卡尔积：" class="headerlink" title="1. 笛卡尔积："></a>1. 笛卡尔积：</h2><blockquote><ul><li>有两个集合A，B，取这两个集合的所有组成情况，</li><li>要完成多表查询，需要消除无用的数据</li></ul></blockquote><h2 id="2-多表查询的分类："><a href="#2-多表查询的分类：" class="headerlink" title="2. 多表查询的分类："></a>2. 多表查询的分类：</h2><blockquote><ul><li>内连接查询</li><li>外连接查询</li><li>子查询</li></ul></blockquote><hr><ul><li><p>建表：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建部门表</span><br><span class="line">CREATE TABLE dept (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    NAME VARCHAR(20)</span><br><span class="line">);</span><br><span class="line">INSERT INTO dept(NAME) VALUES (&#39;开发部&#39;),(&#39;市场部&#39;),(&#39;财务部&#39;);</span><br><span class="line"></span><br><span class="line"># 创建员工表</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">    id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    NAME VARCHAR(10),</span><br><span class="line">    sex CHAR(1),</span><br><span class="line">    salary DOUBLE,</span><br><span class="line">    jion_date DATE,</span><br><span class="line">    dept_id INT,</span><br><span class="line">    FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表（部门表的主键）</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO emp (NAME,sex,salary,jion_date,dept_id) VALUES (&#39;孙悟空&#39;,&#39;男&#39;,7200,&#39;2013-02-24&#39;,1),</span><br><span class="line">(&#39;猪八戒&#39;,&#39;男&#39;,3600,&#39;2010-12-02&#39;,2),</span><br><span class="line">(&#39;唐曾&#39;,&#39;男&#39;,9600,&#39;2008-08-08&#39;,2),</span><br><span class="line">(&#39;白骨精&#39;,&#39;女&#39;,5000,&#39;2015-10-17&#39;,3),</span><br><span class="line">(&#39;蜘蛛精&#39;,&#39;女&#39;,4500,&#39;2011-03-04&#39;,1);</span><br></pre></td></tr></table></figure><hr></li></ul><h2 id="3-内连接查询："><a href="#3-内连接查询：" class="headerlink" title="3. 内连接查询："></a>3. 内连接查询：</h2><h3 id="1-隐式内连接"><a href="#1-隐式内连接" class="headerlink" title="1. 隐式内连接"></a>1. 隐式内连接</h3><ul><li><p>使用where条件消除无用数据</p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询所有员工信息和对应的部门信息</span><br><span class="line">SELECT * FROM emp,dept WHERE emp.dept_id &#x3D; dept.id; </span><br><span class="line"></span><br><span class="line">-- 查询员工表的名称，性别。部门表的名称</span><br><span class="line">SELECT emp.name,emp.sex,dept.name FROM emp,dept WHERE emp.dept_id &#x3D; dept.id;</span><br><span class="line"></span><br><span class="line">-- 标准写法</span><br><span class="line">SELECT</span><br><span class="line">    a.name, -- 员工表姓名</span><br><span class="line">    a.sex, -- 员工表性别</span><br><span class="line">    b.name -- 部门表姓名</span><br><span class="line">FROM </span><br><span class="line">    emp a,</span><br><span class="line">    dept b</span><br><span class="line">WHERE </span><br><span class="line">    a.dept_id &#x3D; b.id</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-显示内连接："><a href="#2-显示内连接：" class="headerlink" title="2. 显示内连接："></a>2. 显示内连接：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 语法：</span><br><span class="line">    select 字段列表 from 表名1 [inner] jion 表名2 on 条件</span><br><span class="line">    </span><br><span class="line">* 示例：</span><br><span class="line">-- 查询所有员工信息和对应的部门信息</span><br><span class="line">SELECT * FROM emp INNER JOIN dept ON emp.dept_id &#x3D; dept.id;</span><br><span class="line">SELECT * FROM emp JOIN dept ON emp.dept_id &#x3D; dept.id; -- inner可以省略</span><br></pre></td></tr></table></figure><h3 id="3-内连接查询注意事项："><a href="#3-内连接查询注意事项：" class="headerlink" title="3. 内连接查询注意事项："></a>3. 内连接查询注意事项：</h3><ol><li>从哪些表中查询数据；</li><li>条件是什么；</li><li>查询哪些字段</li></ol><hr><h2 id="4-外连接查询："><a href="#4-外连接查询：" class="headerlink" title="4. 外连接查询："></a>4. 外连接查询：</h2><h3 id="1-左外连接："><a href="#1-左外连接：" class="headerlink" title="1. 左外连接："></a>1. 左外连接：</h3><ul><li><p>语法</p><blockquote><p>select 字段列表 from 表1 left [outer] join 表2 on 条件;</p></blockquote></li><li><p>查询的是左表所有数据以及其交集部分。</p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 左外连接</span><br><span class="line">SELECT * FROM emp LEFT OUTER JOIN dept ON emp.dept_id &#x3D; dept.id;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221736.png" alt="image-20200407092653730"></p></li></ul><h3 id="2-右外连接："><a href="#2-右外连接：" class="headerlink" title="2. 右外连接："></a>2. 右外连接：</h3><ul><li><p>语法：</p><blockquote><p>select 字段列表 from 表1 right [outer] join 表2 on 条件;</p></blockquote></li><li><p>查询的是右表所有数据以及其交集部分</p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 右外连接</span><br><span class="line">SELECT * FROM dept RIGHT OUTER JOIN emp ON emp.dept_id &#x3D; dept.id;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221737.png" alt="image-20200407095702913"></p></li></ul><h2 id="5-子查询："><a href="#5-子查询：" class="headerlink" title="5. 子查询："></a>5. 子查询：</h2><h3 id="1-子查询的基本查询："><a href="#1-子查询的基本查询：" class="headerlink" title="1. 子查询的基本查询："></a>1. 子查询的基本查询：</h3><ul><li><p>概念：查询中嵌套查询，成嵌套查询为子查询。</p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询最高工资员工信息</span><br><span class="line">-- 1.先查询最高工资是多少</span><br><span class="line">SELECT MAX(salary) FROM emp;</span><br><span class="line"></span><br><span class="line">-- 2.查询员工信息，工资等于9600的</span><br><span class="line">SELECT * FROM emp WHERE salary &#x3D; 9600;</span><br><span class="line"></span><br><span class="line">-- ----------------------------------------</span><br><span class="line">-- 利用子查询完成</span><br><span class="line">SELECT * FROM emp WHERE salary &#x3D; (SELECT MAX(salary) FROM emp);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-子查询的不同情况："><a href="#2-子查询的不同情况：" class="headerlink" title="2.子查询的不同情况："></a>2.子查询的不同情况：</h3><h4 id="1-子查询的结果是单行单列的："><a href="#1-子查询的结果是单行单列的：" class="headerlink" title="1. 子查询的结果是单行单列的："></a>1. 子查询的结果是单行单列的：</h4><ul><li><p>子查询可以作为条件，使用运算符去判断。</p><p>运算符：&gt; , &lt;, &gt;=, &lt;=, =</p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询工资小于平均工资的员工信息</span><br><span class="line">SELECT * FROM emp WHERE salary &lt; (SELECT AVG(salary) FROM emp);</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-子查询的结果是多行单列的："><a href="#2-子查询的结果是多行单列的：" class="headerlink" title="2. 子查询的结果是多行单列的："></a>2. 子查询的结果是多行单列的：</h4><ul><li><p>子查询可以作为条件，使用运算符in来判断</p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询财务部和市场部的所有员工信息</span><br><span class="line">SELECT id FROM dept WHERE NAME &#x3D; &#39;财务部&#39; OR NAME &#x3D; &#39;市场部&#39;;</span><br><span class="line">SELECT * FROM emp WHERE dept_id &#x3D; 2 OR dept_id &#x3D; 3;</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (2,3);</span><br><span class="line">-- 利用子查询解决</span><br><span class="line">SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME &#x3D; &#39;财务部&#39; OR NAME &#x3D; &#39;市场部&#39;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-子查询的结果是多行多列的："><a href="#3-子查询的结果是多行多列的：" class="headerlink" title="3. 子查询的结果是多行多列的："></a>3. 子查询的结果是多行多列的：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 子查询可以作为一张虚拟表参与查询</span><br><span class="line"></span><br><span class="line">-- 查询入职时间在2011-11-11之后的员工信息和部门信息</span><br><span class="line">SELECT </span><br><span class="line">    * </span><br><span class="line">FROM </span><br><span class="line">    dept a,</span><br><span class="line">    (SELECT * FROM emp WHERE jion_date &gt; &#39;2011-11-11&#39;) b</span><br><span class="line">WHERE </span><br><span class="line">    b.dept_id &#x3D; a.id;</span><br><span class="line">    </span><br><span class="line">-- ---------------------------------------------------</span><br><span class="line">-- 普通内查询</span><br><span class="line">SELECT * FROM emp a,dept b WHERE a.dept_id &#x3D; b.id AND a.jion_date &gt; &#39;2011-11-11&#39;;</span><br></pre></td></tr></table></figure><hr><h1 id="四、事务"><a href="#四、事务" class="headerlink" title="四、事务"></a>四、事务</h1><h2 id="1-事务的基本概念"><a href="#1-事务的基本概念" class="headerlink" title="1. 事务的基本概念"></a>1. 事务的基本概念</h2><ol><li><p>概念：</p><p>如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</p></li><li><p>操作：</p><ol><li>开启事务：start tansacton</li><li>回滚：rollback</li><li>提交：commit</li></ol></li></ol><ul><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE zhuangzhang (</span><br><span class="line">    NAME VARCHAR(20),</span><br><span class="line">    money INT</span><br><span class="line">);</span><br><span class="line">INSERT INTO zhuangzhang(NAME,money) VALUES (&#39;张三&#39;,1000),(&#39;李四&#39;,1000);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 开启事务</span><br><span class="line">START TRANSACTION;</span><br><span class="line">-- 张三给李四转账</span><br><span class="line">UPDATE zhuangzhang SET money &#x3D; money - 500 WHERE NAME &#x3D; &#39;张三&#39;;</span><br><span class="line"></span><br><span class="line">异常来啦</span><br><span class="line"></span><br><span class="line">UPDATE zhuangzhang SET money &#x3D; money + 500 WHERE NAME &#x3D; &#39;李四&#39;;</span><br><span class="line"></span><br><span class="line">-- 发现没有问题，提交事务</span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 发现出问题了，回滚事务</span><br><span class="line">ROLLBACK</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-事务的四大特征"><a href="#2-事务的四大特征" class="headerlink" title="2. 事务的四大特征"></a>2. 事务的四大特征</h2><blockquote><ol><li>原子性：是不可能分割的最小操作单位，要么同时成功，要么同时失败；</li><li>持久性：当事务提交或回滚后，数据后会持久化的保存数据；</li><li>隔离性：多个事务之间，相互独立；</li><li>一致性：事务操作前后，数据总量不变。</li></ol></blockquote><h2 id="3-事务的隔离级别-了解"><a href="#3-事务的隔离级别-了解" class="headerlink" title="3. 事务的隔离级别(了解)"></a>3. 事务的隔离级别(了解)</h2><h3 id="1-概念："><a href="#1-概念：" class="headerlink" title="1. 概念："></a>1. 概念：</h3><p>​    多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p><h3 id="2-存在问题："><a href="#2-存在问题：" class="headerlink" title="2. 存在问题："></a>2. 存在问题：</h3><ol><li>脏读：一个事务，读取到另一个事务中没有提交的数据；</li><li>不可重复读(虚读)：早同一个事务中，两次读取到的数据不一样；</li><li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li></ol><h3 id="3-隔离级别："><a href="#3-隔离级别：" class="headerlink" title="3. 隔离级别："></a>3. 隔离级别：</h3><blockquote><ol><li>read uncommitted：读未提交<ul><li>产生的问题：脏读、不可重复读、幻读</li></ul></li><li>read committed：读已提交     （Oracle默认级别）<ul><li>产生的问题：不可重复读、幻读</li></ul></li><li>repeatable read：可重复读       （MySQL默认级别）<ul><li>产生的问题：幻读</li></ul></li><li>serializable：串行化<ul><li>可以解决所有的问题</li></ul></li></ol></blockquote><ul><li><p>注意：</p><p>隔离级别从小到大安全性越来越高，但是效率越来越低。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 数据库查询隔离级别：</span><br><span class="line">    select @@tx_isolation;</span><br><span class="line">    </span><br><span class="line">* 数据库设置隔离级别：</span><br><span class="line">    set global transaction isolation level 级别字符串;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-MySQL数据库中事务默认自动提交"><a href="#4-MySQL数据库中事务默认自动提交" class="headerlink" title="4. MySQL数据库中事务默认自动提交"></a>4. MySQL数据库中事务默认自动提交</h2><h3 id="1-事务提交的两种方式："><a href="#1-事务提交的两种方式：" class="headerlink" title="1. 事务提交的两种方式："></a>1. 事务提交的两种方式：</h3><ul><li>自动提交：<ul><li>mysql就是自动提交的；</li><li>一条DML(增删改)语句会自动提交一次事务。</li></ul></li><li>手动提交：<ul><li>Oracle数据库默认是手动提交事务；</li><li>需要先开启事务，再提交。</li></ul></li></ul><h3 id="2-修改事务的默认提交方式："><a href="#2-修改事务的默认提交方式：" class="headerlink" title="2. 修改事务的默认提交方式："></a>2. 修改事务的默认提交方式：</h3><ul><li>查看事务的默认提交方式<ul><li>select @@autocommit;        1代表自动提交，0代表手动提交</li></ul></li><li>修改默认提交方式：<ul><li>set @@autocommit = 0;</li></ul></li></ul><hr><h1 id="五、DCL：管理用户、授权"><a href="#五、DCL：管理用户、授权" class="headerlink" title="五、DCL：管理用户、授权"></a>五、DCL：管理用户、授权</h1><h2 id="1-管理用户"><a href="#1-管理用户" class="headerlink" title="1. 管理用户"></a>1. 管理用户</h2><h3 id="1-添加用户："><a href="#1-添加用户：" class="headerlink" title="1. 添加用户："></a>1. 添加用户：</h3><p>create user ‘用户名’ @’主机名’ identified by ‘密码’;</p><h3 id="2-删除用户："><a href="#2-删除用户：" class="headerlink" title="2. 删除用户："></a>2. 删除用户：</h3><p>drop user ‘用户名‘@’主机名’;</p><h3 id="3-修改用户密码："><a href="#3-修改用户密码：" class="headerlink" title="3. 修改用户密码："></a>3. 修改用户密码：</h3><p>方式1：update user set password = password(‘新密码’) where user = ‘用户名’;</p><p>方式2：set password for ‘用户名’ @’主机名’ = password(‘新密码’);</p><h3 id="4-mysql中忘记了root用户的密码？"><a href="#4-mysql中忘记了root用户的密码？" class="headerlink" title="4. mysql中忘记了root用户的密码？"></a>4. mysql中忘记了root用户的密码？</h3><blockquote><ol><li>cmd –&gt; net stop mysql             停止mysql服务<ul><li>需要管理员运行cmd</li></ul></li><li>使用无验证方式启动mysql：mysqld –skip-grant-tables</li><li>打开新的cmd窗口，直接输入mysql命令，敲回车，就可以登录成功</li><li>use mysql</li><li>update user set passwprd = password(‘你的新密码’) where user = ‘root’;</li><li>关闭两个窗口</li><li>打开任务管理器，手动结束mysqld.exe的进程</li><li>启动mysql服务</li><li>使用新密码登录</li></ol></blockquote><h3 id="5-查询用户："><a href="#5-查询用户：" class="headerlink" title="5. 查询用户："></a>5. 查询用户：</h3><ul><li><p>1.切换到mysql数据库</p><p>use mysql;</p></li><li><p>2.查询user表</p><p>select * from user;</p></li><li><p>通配符： % 表示可以在任意主机使用用户登录数据库</p></li></ul><hr><h2 id="2-权限管理"><a href="#2-权限管理" class="headerlink" title="2. 权限管理"></a>2. 权限管理</h2><h3 id="1-查询权限"><a href="#1-查询权限" class="headerlink" title="1. 查询权限"></a>1. 查询权限</h3><blockquote><p>show grants for ‘用户名‘@’主机名’;</p></blockquote><h3 id="2-授予权限"><a href="#2-授予权限" class="headerlink" title="2. 授予权限"></a>2. 授予权限</h3><blockquote><p>grant 权限列表 on 数据库名.表名 to ‘用户名‘@’主机名’;</p><p>给哪位用户授权什么权限，在什么数据库的什么表上</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给某位用户授予所有权限，在任意数据库任意表上</span><br><span class="line">grant all on *.* to &#39;用户名&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure><h3 id="3-撤销权限"><a href="#3-撤销权限" class="headerlink" title="3. 撤销权限"></a>3. 撤销权限</h3><p>revoke 权限列表 on 数据库名.表名 from ‘用户名‘@’主机名’;</p><hr><h1 id="六、JDBC"><a href="#六、JDBC" class="headerlink" title="六、JDBC"></a>六、JDBC</h1><h2 id="1-概述：-1"><a href="#1-概述：-1" class="headerlink" title="1. 概述："></a>1. 概述：</h2><ul><li>概念：Java DataBase ConnectIvity ，Java 数据库连接，Java语言操作数据库。</li><li>JDBC本质：其实是官方(SUN公司)定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</li></ul><h2 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤"></a>2. 步骤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*        <span class="comment">//1. 导入驱动jar包</span></span><br><span class="line">*        <span class="comment">//2. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>); <span class="comment">// mysql 5版本之后可以省略</span></span><br><span class="line">*        <span class="comment">//3. 获取数据库连接对象</span></span><br><span class="line">        <span class="comment">//Connection conn =DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db3&quot;, &quot;root&quot;, &quot;lxj521..&quot;);</span></span><br><span class="line">        Connection conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///db3&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;lxj521..&quot;</span>);<span class="comment">//省略本机名和IP写法</span></span><br><span class="line">*        <span class="comment">//4. 定义sql语句</span></span><br><span class="line">        String sql = <span class="string">&quot;update zhuangzhang set money = 1000&quot;</span>;</span><br><span class="line">*        <span class="comment">//5. 获取执行sql的对象     Statement</span></span><br><span class="line">        Statement statement = conn.createStatement();</span><br><span class="line">*        <span class="comment">//6. 执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = statement.executeUpdate(sql);</span><br><span class="line">*        <span class="comment">//7. 处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">*        <span class="comment">//8. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br></pre></td></tr></table></figure><h2 id="3-详解各个对象："><a href="#3-详解各个对象：" class="headerlink" title="3.详解各个对象："></a>3.详解各个对象：</h2><h3 id="1-DriverManager：驱动管理对象"><a href="#1-DriverManager：驱动管理对象" class="headerlink" title="1. DriverManager：驱动管理对象"></a>1. DriverManager：驱动管理对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 功能：</span><br><span class="line">    <span class="number">1.</span> 注册驱动：告诉程序该使用哪一个数据库驱动jar</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerDriver</span><span class="params">(Driver driver)</span>：注册与给定的驱动程序DriverManager</span></span><br><span class="line"><span class="function">    写代码使用：Class.<span class="title">forName</span><span class="params">(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">    通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块.</span></span><br><span class="line"><span class="function">* 注意：mysql 5之后的驱动jar包可以省略注册驱动的步骤。但建议还是写上。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    2. 获取数据库连接</span></span><br><span class="line"><span class="function">    * 方法：<span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url,String user,String password)</span></span></span><br><span class="line"><span class="function">    * 参数：</span></span><br><span class="line"><span class="function">        * url:指定连接的路径</span></span><br><span class="line"><span class="function">            * 语法：jdbc:mysql:<span class="comment">//ip地址(域名):端口号/数据库名称</span></span></span><br><span class="line"><span class="function">            * 例子：jdbc:mysql:<span class="comment">//localhost:3306/db3</span></span></span><br><span class="line"><span class="function">            * 细节：如果连接的是本机mysql服务器，并且mysql服务器默认端口是3306，则url可以简写为：jdbc:mysql:<span class="comment">///数据库名称</span></span></span><br><span class="line"><span class="function">        * user：用户名</span></span><br><span class="line"><span class="function">        * password：密码</span></span><br></pre></td></tr></table></figure><h3 id="2-Connection-数据库连接对象"><a href="#2-Connection-数据库连接对象" class="headerlink" title="2. Connection:数据库连接对象"></a>2. Connection:数据库连接对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 功能：</span><br><span class="line">    1. 获取执行sql的对象</span><br><span class="line">        * Statement createStatement()</span><br><span class="line">        * PreparedStatement preparedStatement(String sql)</span><br><span class="line">    2. 管理事务：</span><br><span class="line">        * 开启事务：setAutoCommit(boolean autoCommit)：调用该方法设置参数为false，即开启事务</span><br><span class="line">        * 提交事务：commit()</span><br><span class="line">        * 回滚事务：rollback()</span><br></pre></td></tr></table></figure><h3 id="3-Statement：执行sql的对象"><a href="#3-Statement：执行sql的对象" class="headerlink" title="3. Statement：执行sql的对象"></a>3. Statement：执行sql的对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 执行sql</span><br><span class="line">    <span class="number">1.</span> <span class="function"><span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(String sql)</span>:可以执行任意的sql（了解）</span></span><br><span class="line"><span class="function">    2. <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span>：执行<span class="title">DML</span><span class="params">(insert,update,delete)</span>语句，<span class="title">DDL</span><span class="params">(create,alter,drop)</span>语句</span></span><br><span class="line"><span class="function">        * 返回值：影响的行数，可以通过这个影响地行数判断DML是否执行成功，返回值&gt;0的则执行成功，反之，则失败。</span></span><br><span class="line"><span class="function">    3. ResultSet <span class="title">executeQuery</span><span class="params">(String sql)</span>：执行<span class="title">DQL</span><span class="params">(select)</span>语句。</span></span><br><span class="line"><span class="function">        * 返回值为结果集对象。</span></span><br></pre></td></tr></table></figure><h3 id="4-ResultSet：结果集对象"><a href="#4-ResultSet：结果集对象" class="headerlink" title="4. ResultSet：结果集对象"></a>4. ResultSet：结果集对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* next()：游标向下移动一行</span><br><span class="line">* getXxx(参数)：获取数据</span><br><span class="line">    * Xxx：代表数据类型   如：<span class="keyword">int</span>：getInt(), String:getString()</span><br><span class="line">    * 参数：</span><br><span class="line">        <span class="number">1.</span><span class="keyword">int</span> :代表列的编号，从<span class="number">1</span>开始。  如：getString(<span class="number">1</span>)</span><br><span class="line">        <span class="number">2.</span>String:代表列名称。 如：getDoble(<span class="string">&quot;balance&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//2.获取数据库连接对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/db3&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;lxj521..&quot;</span>);</span><br><span class="line">            <span class="comment">//3.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from zhuangzhang&quot;</span>;</span><br><span class="line">            <span class="comment">//4.获取sql执行对象</span></span><br><span class="line">            statement = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//6.处理结果</span></span><br><span class="line">            <span class="comment">//6.1 游标向下移动一行：因为要查询第一行的数据</span></span><br><span class="line">            resultSet.next();</span><br><span class="line">            <span class="comment">//6.2 获取数据</span></span><br><span class="line">            String name = resultSet.getString(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">double</span> money = resultSet.getDouble(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">            <span class="comment">//7.处理结果</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;===&quot;</span> + money);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">////8. 释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    resultSet.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="附加：ResultSet遍历"><a href="#附加：ResultSet遍历" class="headerlink" title="附加：ResultSet遍历"></a>附加：ResultSet遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* <span class="function"><span class="keyword">boolean</span> <span class="title">next</span><span class="params">()</span>：游标向下移动一行，判断当前是否是最后一行末尾<span class="params">(是否有数据)</span>,如果是，则返回<span class="keyword">false</span>，如果不是则返回<span class="keyword">true</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 利用<span class="keyword">while</span>循环遍历</span></span><br><span class="line"><span class="function"><span class="title">while</span> <span class="params">(rs.next()</span>) </span>&#123;</span><br><span class="line">                String name = rs.getString(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">double</span> money = rs.getDouble(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">                System.out.println(name + <span class="string">&quot;---&quot;</span> + money);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h4 id="练习：查询emp表中所有数据"><a href="#练习：查询emp表中所有数据" class="headerlink" title="练习：查询emp表中所有数据"></a>练习：查询emp表中所有数据</h4><ul><li><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221738.png" alt="image-20200408185749935"></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img.silentcow.cn/20200806221739.png" alt="image-20200408185812605"></p><ul><li><p>先创建一个emp类</p></li><li><pre><code class="java">public class emp &#123;    private int id;    private String name;    private String sex;    private double salary;    private Date jion_date;    private int dept_id;    public emp(int id, String name, String sex, double salary, Date jion_date, int dept_id) &#123;        this.id = id;        this.name = name;        this.sex = sex;        this.salary = salary;        this.jion_date = jion_date;        this.dept_id = dept_id;    &#125;    public emp() &#123;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name = name;    &#125;    public String getSex() &#123;        return sex;    &#125;    public void setSex(String sex) &#123;        this.sex = sex;    &#125;    public double getSalary() &#123;        return salary;    &#125;    public void setSalary(double salary) &#123;        this.salary = salary;    &#125;    public Date getJion_date(Date jion_date) &#123;        return this.jion_date;    &#125;    public void setJion_date(Date jion_date) &#123;        this.jion_date = jion_date;    &#125;    public int getDept_id() &#123;        return dept_id;    &#125;    public void setDept_id(int dept_id) &#123;        this.dept_id = dept_id;    &#125;    @Override    public String toString() &#123;        return &quot;emp&#123;&quot; +                &quot;id=&quot; + id +                &quot;, name=&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, sex=&quot; + sex +                &quot;, salary=&quot; + salary +                &quot;, jion_date=&quot; + jion_date +                &quot;, dept_id=&quot; + dept_id +                &#39;&#125;&#39;;    &#125;&#125;&lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * 再创建一个主类，调用emp方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#96;&amp;#96;&amp;#96;java&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Demo07 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;emp&amp;gt; list &amp;#x3D; new Demo07().findAll();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(list);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(list.size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public List&amp;lt;emp&amp;gt; findAll() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ResultSet rs &amp;#x3D; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Statement statement &amp;#x3D; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Connection conn &amp;#x3D; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        List&amp;lt;emp&amp;gt; list &amp;#x3D; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#x2F;&amp;#x2F;1.注册驱动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Class.forName(&amp;quot;com.mysql.cj.jdbc.Driver&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#x2F;&amp;#x2F;2.获取连接数据库对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            conn &amp;#x3D; DriverManager.getConnection(&amp;quot;jdbc:mysql:&amp;#x2F;&amp;#x2F;&amp;#x2F;db2&amp;quot;, &amp;quot;root&amp;quot;, &amp;quot;lxj521..&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#x2F;&amp;#x2F;3.定义sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String sql &amp;#x3D; &amp;quot;select * from emp&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#x2F;&amp;#x2F;4.获取处理sql对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            statement &amp;#x3D; conn.createStatement();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#x2F;&amp;#x2F;5.处理sql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rs &amp;#x3D; statement.executeQuery(sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#x2F;&amp;#x2F;6.处理结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            emp emp &amp;#x3D; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            list &amp;#x3D; new ArrayList&amp;lt;emp&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            while (rs.next()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                int id &amp;#x3D; rs.getInt(&amp;quot;id&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String name &amp;#x3D; rs.getString(&amp;quot;name&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                String sex &amp;#x3D; rs.getString(&amp;quot;sex&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                double salary &amp;#x3D; rs.getDouble(&amp;quot;salary&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Date jion_date &amp;#x3D; rs.getDate(&amp;quot;jion_date&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                int dept_id &amp;#x3D; rs.getInt(&amp;quot;dept_id&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#x2F;&amp;#x2F;创建emp对象，并赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emp &amp;#x3D; new emp();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emp.setId(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emp.setName(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emp.setSex(sex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emp.setSalary(salary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emp.getJion_date(jion_date);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                emp.setDept_id(dept_id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#x2F;&amp;#x2F;装载集合&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                list.add(emp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (ClassNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (rs !&amp;#x3D; null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    rs.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (statement !&amp;#x3D; null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    statement.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (conn!&amp;#x3D;null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    conn.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; catch (SQLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return list;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;</code></pre></li></ul><h3 id="5-PreparedStatement-执行sql的对象"><a href="#5-PreparedStatement-执行sql的对象" class="headerlink" title="5. PreparedStatement:执行sql的对象"></a>5. PreparedStatement:执行sql的对象</h3><h4 id="1-SQL注入问题："><a href="#1-SQL注入问题：" class="headerlink" title="1. SQL注入问题："></a>1. SQL注入问题：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在拼接sql时，有一些sql的特殊关键字参与字符串的拼接，会造成安全性问题；</span><br><span class="line">* 1.输入用户随便，输入密码：a&#39; or &#39;a&#39; &#x3D; &#39;a</span><br><span class="line">  2.sql:select * from user where username &#x3D; &quot;ahdahal&quot; and password &#x3D; a&#39; or &#39;a&#39; &#x3D; &#39;a</span><br></pre></td></tr></table></figure><h4 id="2-解决sql注入问题："><a href="#2-解决sql注入问题：" class="headerlink" title="2. 解决sql注入问题："></a>2. 解决sql注入问题：</h4><ul><li>使用PreparedStatement对象来解决</li></ul><h4 id="3-预编译的SQL："><a href="#3-预编译的SQL：" class="headerlink" title="3. 预编译的SQL："></a>3. 预编译的SQL：</h4><ul><li>参数使用 ? 作为占位符</li></ul><h4 id="4-步骤："><a href="#4-步骤：" class="headerlink" title="*4. 步骤：**"></a>*<em>4</em>. 步骤：**</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>导入驱动jar包;</span><br><span class="line"><span class="number">2.</span>注册驱动；</span><br><span class="line"><span class="number">3.</span>获取数据库连接对象 Connection</span><br><span class="line"><span class="number">4.</span>定义sql</span><br><span class="line">    * 注意：sql的参数使用?作为占位符。</span><br><span class="line">      如：select * from user where username = ? and password = ?;</span><br><span class="line"><span class="number">5.</span>获取执行sql语句的对象    PreparedStatement</span><br><span class="line">    * Connection.prepareSttement(String sql)</span><br><span class="line"><span class="number">6.</span>给?赋值：</span><br><span class="line">    * 方法：setXxx(参数<span class="number">1</span>,参数<span class="number">2</span>)</span><br><span class="line">        * 参数<span class="number">1</span>：?的位置编号 从<span class="number">1</span> 开始</span><br><span class="line">        * 参数<span class="number">2</span>：?的值</span><br><span class="line"><span class="number">7.</span>执行sql，接受返回结果，不需要传递sql语句</span><br><span class="line"><span class="number">8.</span>处理结果</span><br><span class="line"><span class="number">9.</span>释放资源</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        String username = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        String password = sc.nextLine();</span><br><span class="line">        <span class="comment">//调用对象</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">new</span> Demo02().login2(username, password);</span><br><span class="line">        <span class="comment">//判断结果</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或者密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">login2</span><span class="params">(String username,String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((username == <span class="keyword">null</span>) || (password == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstem =<span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接数据库对象</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from user where username = ? and password = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取处理sql对象</span></span><br><span class="line">             pstem = conn.prepareStatement(sql);</span><br><span class="line">             <span class="comment">//给?赋值</span></span><br><span class="line">            pstem.setString(<span class="number">1</span>,username);</span><br><span class="line">            pstem.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//4.执行查询sql，不需要传递sql</span></span><br><span class="line">            rs = pstem.executeQuery();</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();<span class="comment">//如果有下一行，则返回true</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtils.close(rs,pstem,conn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-注意："><a href="#5-注意：" class="headerlink" title="5.注意："></a>5.注意：</h4><ul><li>后期都会使用PreparedStatement来完成增删改查的所有操作<ul><li>1、可以防止SQL注入；</li><li>2、效率更高</li></ul></li></ul><h1 id="七、JDBC工具类：JDBCUtils"><a href="#七、JDBC工具类：JDBCUtils" class="headerlink" title="七、JDBC工具类：JDBCUtils"></a>七、JDBC工具类：JDBCUtils</h1><ul><li><p>目的：简化书写</p></li><li><p>分析：</p><ul><li><p>1、注册驱动也抽取；</p></li><li><p>2、抽取一个方法获取连接对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 需求：不想传递参数(麻烦)，还得保证工具类的通用性。</span><br><span class="line">* 解决：配置文件：</span><br><span class="line">    * 创建 jdbc.properties    文件</span><br><span class="line">          url = </span><br><span class="line">          user = </span><br><span class="line">          password = </span><br><span class="line">          driver = </span><br><span class="line">* 示例：</span><br><span class="line">url=jdbc:mysql:<span class="comment">///db2</span></span><br><span class="line">user=root</span><br><span class="line">password=lxj521..</span><br><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建工具类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 首先创建名为JDBCUtils.java  文件 </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 文件的读取，只需要读取一次即可拿到这些值。只用静态代码块</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Properties集合类</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取src路径下的文件的方式：ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL resource = classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path = resource.getPath();</span><br><span class="line">            <span class="comment">//System.out.println(path);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.加载文件</span></span><br><span class="line"><span class="comment">//            pro.load(new FileReader(&quot;src/jdbc.properties&quot;));</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            <span class="comment">//3.获取数据，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//4.注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 获取连接</span></span><br><span class="line"><span class="comment">    * @return 连接对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 释放资源</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement,Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源，重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs,Statement statement,Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用工具示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;emp&gt; list = <span class="keyword">new</span> Demo().findAll();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;emp&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;emp&gt; list = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line"><span class="comment">//            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span></span><br><span class="line">            <span class="comment">//2.获取连接数据库对象</span></span><br><span class="line"><span class="comment">//            conn = DriverManager.getConnection(&quot;jdbc:mysql:///db2&quot;, &quot;root&quot;, &quot;lxj521..&quot;);</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//3.定义sql</span></span><br><span class="line">            String sql = <span class="string">&quot;select * from emp&quot;</span>;</span><br><span class="line">            <span class="comment">//4.获取处理sql对象</span></span><br><span class="line">            statement = conn.createStatement();</span><br><span class="line">            <span class="comment">//5.处理sql</span></span><br><span class="line">            rs = statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//6.处理结果</span></span><br><span class="line">            emp emp = <span class="keyword">null</span>;</span><br><span class="line">            list = <span class="keyword">new</span> ArrayList&lt;emp&gt;();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                String sex = rs.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = rs.getDouble(<span class="string">&quot;salary&quot;</span>);</span><br><span class="line">                Date jion_date = rs.getDate(<span class="string">&quot;jion_date&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> dept_id = rs.getInt(<span class="string">&quot;dept_id&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//创建emp对象，并赋值</span></span><br><span class="line">                emp = <span class="keyword">new</span> emp();</span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setName(name);</span><br><span class="line">                emp.setSex(sex);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.getJion_date(jion_date);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//装载集合</span></span><br><span class="line">                list.add(emp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            JDBCUtils.close(rs, statement, conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="八、JDBC管理事务"><a href="#八、JDBC管理事务" class="headerlink" title="八、JDBC管理事务"></a>八、JDBC管理事务</h1><h2 id="1-事务："><a href="#1-事务：" class="headerlink" title="1. 事务："></a>1. 事务：</h2><p>一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</p><h2 id="2-操作："><a href="#2-操作：" class="headerlink" title="2. 操作："></a>2. 操作：</h2><blockquote><ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></blockquote><h2 id="3-使用Connection对象来管理事务"><a href="#3-使用Connection对象来管理事务" class="headerlink" title="3. 使用Connection对象来管理事务"></a>3. 使用Connection对象来管理事务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 开启事务：setAutoCommit(<span class="keyword">boolean</span> autoCommit)：调用该方法设置参数为<span class="keyword">false</span>，即开启事务；</span><br><span class="line">        *   在执行sql之前开启事务</span><br><span class="line">* 提交事务：commit()</span><br><span class="line">        *   当所有sql都执行完提交事务</span><br><span class="line">* 回滚事务：rollback()</span><br><span class="line">        *   在<span class="keyword">catch</span>中回滚事务</span><br></pre></td></tr></table></figure><ul><li><p>示例：</p></li><li><p>发生异常后，如果数据没有变化，则说明我们管理事务成功，反之则失败。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PreparedStatement pstm1 = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement pstm2 = <span class="keyword">null</span>;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            String sql1 = <span class="string">&quot;update zhuangzhang set money = money - ? where name = ?&quot;</span>;</span><br><span class="line">            String sql2 = <span class="string">&quot;update zhuangzhang set money = money + ? where name = ?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取处理sql对象</span></span><br><span class="line">            pstm1 = conn.prepareStatement(sql1);</span><br><span class="line">            pstm2 = conn.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//4.给？赋值</span></span><br><span class="line">            pstm1.setDouble(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">            pstm1.setString(<span class="number">2</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">            pstm2.setDouble(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">            pstm2.setString(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">            <span class="comment">//5.处理sql，不需要获取sql</span></span><br><span class="line">            pstm1.executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//手动设置异常</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            pstm2.executeUpdate();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            JDBCUtils.close(pstm1, conn);</span><br><span class="line">            JDBCUtils.close(pstm2, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="九、数据库连接池"><a href="#九、数据库连接池" class="headerlink" title="九、数据库连接池"></a>九、数据库连接池</h1><h2 id="1-概念：-1"><a href="#1-概念：-1" class="headerlink" title="1. 概念："></a>1. 概念：</h2><p>其实就是一个容器(集合)，存放数据库连接的容器。</p><p>当系统初始化好后，容器被创建，容器中会申请宁一些连接对象，当用户来访问数据库时，从容器中中获取连接对象，榕湖访问完之后，会将连接对象归还给容器。</p><hr><h2 id="2-好处："><a href="#2-好处：" class="headerlink" title="2. 好处："></a>2. 好处：</h2><blockquote><ol><li>节约资源；</li><li>用户访问高效。</li></ol></blockquote><h2 id="3-实现："><a href="#3-实现：" class="headerlink" title="3. 实现："></a>3. 实现：</h2><h3 id="1-标准接口：DataSource-javax-sql包下的"><a href="#1-标准接口：DataSource-javax-sql包下的" class="headerlink" title="1. 标准接口：DataSource        javax.sql包下的"></a>1. 标准接口：DataSource        javax.sql包下的</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法：</span><br><span class="line">    * 获取连接：getConnection()</span><br><span class="line">    * 归还连接：Connection.close().如果连接对象Connection是从连接池获取的，那么调用Connection.close()方法，则不会再关闭连接了，而是归还连接。</span><br></pre></td></tr></table></figure><h3 id="2-连接池种类："><a href="#2-连接池种类：" class="headerlink" title="2. 连接池种类："></a>2. 连接池种类：</h3><ul><li>一般我们不会去实现它，有数据库厂商来实现<ul><li>1、C3P0：数据库连接池技术；</li><li>2、Druid：数据库连接池实现技术，由阿里巴巴提供的。</li></ul></li></ul><h2 id="4-C3P0"><a href="#4-C3P0" class="headerlink" title="4.C3P0"></a>4.C3P0</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line">    1.导入jar包(两个)c3p0-0.9.5.5-sources.jar和mchange-commons-java-0.2.19-sources.jar；</span><br><span class="line">        * 不要忘记导入数据库驱动jar包：mysql-connector-java-8.0.19.jar</span><br><span class="line">    2.定义配置文件：</span><br><span class="line">        * 名称：c3p0.properties 或者 c3p0-config.xml</span><br><span class="line">        * 路径：直接将文件放在src目录下即可。</span><br><span class="line">    3.创建核心对象：</span><br><span class="line">        数据库连接池对象 ComboPooledDataSource</span><br><span class="line">    4.获取连接：getConnection</span><br></pre></td></tr></table></figure><h2 id="5-Druid"><a href="#5-Druid" class="headerlink" title="5.Druid"></a>5.Druid</h2><h3 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1. 步骤"></a>1. 步骤</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line">        <span class="comment">//1.导入jar包     druid-1.1.18.jar</span></span><br><span class="line">        <span class="comment">//2.定义配置文件</span></span><br><span class="line">        * 是properties形式的</span><br><span class="line">        * 可以叫任意名称，可以放在任意目录下</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.加载配置文件    Properties</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();                                    InputStreamis=DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取连接池对象:通过工厂来获取  DruidDataSourceFactory</span></span><br><span class="line">        DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.获取连接    getConnection</span></span><br><span class="line">        Connection conn = ds.getConnection();</span><br><span class="line">        System.out.println(conn);</span><br></pre></td></tr></table></figure><ul><li><p>配置文件：druid.properties</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">///db3</span></span><br><span class="line">username=root</span><br><span class="line">password=lxj521..</span><br><span class="line"># 初始化连接数量</span><br><span class="line">initialSize=<span class="number">5</span></span><br><span class="line"># 最大连接数</span><br><span class="line">maxActive=<span class="number">10</span></span><br><span class="line"># 最大等待时间</span><br><span class="line">maxWait=<span class="number">3000</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-druid工具类："><a href="#2-druid工具类：" class="headerlink" title="2. druid工具类："></a>2. druid工具类：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.定义一个类：JDBCUtils</span><br><span class="line">2.提供静态代码块加载配置文件，初始化连接池对象</span><br><span class="line">3.提供方法</span><br><span class="line">    1.获取连接方法：通过数据库连接池获取连接；</span><br><span class="line">    2.释放资源；</span><br><span class="line">    3.获取连接池的方法。</span><br></pre></td></tr></table></figure><ul><li>创建工具类：JDBCUtils.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.定义成员变量 DataSours</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.记载配置文件</span></span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            prop.load(JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement statement,Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        if (statement != null) &#123;</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                statement.close();</span></span><br><span class="line"><span class="comment">//            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if (conn != null) &#123;</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                conn.close(); //归还连接</span></span><br><span class="line"><span class="comment">//            &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        close(<span class="keyword">null</span>,statement,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet resultSet,Statement statement, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close(); <span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接池方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>示例：给zhuangzhang表里添加数据：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接：</span></span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql：</span></span><br><span class="line">            String sql = <span class="string">&quot;insert into zhuangzhang value (?,?)&quot;</span>;</span><br><span class="line">            <span class="comment">//3.获取处理sql对象</span></span><br><span class="line">            ps = conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//4.给?赋值</span></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            ps.setDouble(<span class="number">2</span>, <span class="number">2000</span>);</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            <span class="keyword">int</span> count = ps.executeUpdate();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6.释放资源</span></span><br><span class="line">            JDBCUtils.close(ps, conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="十、JDBCTemplate"><a href="#十、JDBCTemplate" class="headerlink" title="十、JDBCTemplate"></a>十、JDBCTemplate</h1><p>spring JDBC</p><ul><li><p>Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p></li><li><p>步骤：</p></li><li><pre><code>1.导入jar包2.创建JDBCTemplate对象，依赖于数据源DataSource    * JdbcTemplate template = new JdbcTemplate(ds);3.调用JdbcTemplate的方法来完成CRUD的操作：    * update():执行DML语句。增删改    * queryForMap():查询结果将结果集封装为map集合    * queryForList():查询结果将结果集封装为list集合    * query():查询结果，将结果封装为JavaBean对象    * queryForObject:查询结果，将结果封装为对象</code></pre></li></ul><p><a href="https://repo.spring.io/release/org/springframework/">https://repo.spring.io/release/org/springframework/</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
